
TRABALHO_SPI_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e04  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  08008fd8  08008fd8  00009fd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800963c  0800963c  0000b204  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800963c  0800963c  0000a63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009644  08009644  0000b204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009644  08009644  0000a644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009648  08009648  0000a648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  0800964c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000204  08009850  0000b204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  08009850  0000b6c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015455  00000000  00000000  0000b234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e6  00000000  00000000  00020689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00023b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00024c0a  00000000  00000000  00024f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001ab22  00000000  00000000  00049b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d7797  00000000  00000000  000646a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0013be3b  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000f94  00000000  00000000  0013be7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000064b4  00000000  00000000  0013ce14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001432c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008fbc 	.word	0x08008fbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	08008fbc 	.word	0x08008fbc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <lerBotoes>:
#include "variaveis.h"
#include "main.h"
#include "usart.h"

void lerBotoes(void) // função que lê os pinos do botão
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(BOTAO_START_GPIO_Port, BOTAO_START_Pin) == GPIO_PIN_SET) // verifica se o botão de START foi pressionado
 8000fb8:	2104      	movs	r1, #4
 8000fba:	4816      	ldr	r0, [pc, #88]	@ (8001014 <lerBotoes+0x60>)
 8000fbc:	f001 fe06 	bl	8002bcc <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d10b      	bne.n	8000fde <lerBotoes+0x2a>
	{
	 start = 1;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <lerBotoes+0x64>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
	 stop = 0;
 8000fcc:	4b13      	ldr	r3, [pc, #76]	@ (800101c <lerBotoes+0x68>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
	 tela_inicial_mostrada = 0;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <lerBotoes+0x6c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
	 HAL_Delay(200); // debounce
 8000fd8:	20c8      	movs	r0, #200	@ 0xc8
 8000fda:	f001 fa9b 	bl	8002514 <HAL_Delay>
	}
	if (HAL_GPIO_ReadPin(BOTAO_STOP_GPIO_Port, BOTAO_STOP_Pin) == GPIO_PIN_SET) // verifica se o botão de STOP foi pressionado
 8000fde:	2102      	movs	r1, #2
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <lerBotoes+0x60>)
 8000fe2:	f001 fdf3 	bl	8002bcc <HAL_GPIO_ReadPin>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d111      	bne.n	8001010 <lerBotoes+0x5c>
	{
	 stop = 1;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <lerBotoes+0x68>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]
	 start = 0;
 8000ff2:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <lerBotoes+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
	 acertosSequencia = 0;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <lerBotoes+0x70>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
	 aguardandoMovimento = 0;
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <lerBotoes+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
	 tela_inicial_mostrada = 0;
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <lerBotoes+0x6c>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
	 HAL_Delay(200); // debounce
 800100a:	20c8      	movs	r0, #200	@ 0xc8
 800100c:	f001 fa82 	bl	8002514 <HAL_Delay>
	}
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40020400 	.word	0x40020400
 8001018:	20000478 	.word	0x20000478
 800101c:	20000004 	.word	0x20000004
 8001020:	20000488 	.word	0x20000488
 8001024:	20000474 	.word	0x20000474
 8001028:	20000480 	.word	0x20000480

0800102c <enviarAcertosSequencia>:

void enviarAcertosSequencia(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b092      	sub	sp, #72	@ 0x48
 8001030:	af00      	add	r7, sp, #0
	char buffer[64]; // armazenador da mensagem
	int len = snprintf(buffer, sizeof(buffer), "ACERTOS:%d\r\n", acertosSequencia); // salva para poder enviar para o monitor
 8001032:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <enviarAcertosSequencia+0x30>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	1d38      	adds	r0, r7, #4
 8001038:	4a09      	ldr	r2, [pc, #36]	@ (8001060 <enviarAcertosSequencia+0x34>)
 800103a:	2140      	movs	r1, #64	@ 0x40
 800103c:	f005 fe76 	bl	8006d2c <sniprintf>
 8001040:	6478      	str	r0, [r7, #68]	@ 0x44
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, HAL_MAX_DELAY); // envia os acertos para o monitor CUBE
 8001042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001044:	b29a      	uxth	r2, r3
 8001046:	1d39      	adds	r1, r7, #4
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	4805      	ldr	r0, [pc, #20]	@ (8001064 <enviarAcertosSequencia+0x38>)
 800104e:	f004 f921 	bl	8005294 <HAL_UART_Transmit>
}
 8001052:	bf00      	nop
 8001054:	3748      	adds	r7, #72	@ 0x48
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000474 	.word	0x20000474
 8001060:	08008fd8 	.word	0x08008fd8
 8001064:	20000530 	.word	0x20000530

08001068 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	@ 0x28
 800106c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	4b48      	ldr	r3, [pc, #288]	@ (80011a4 <MX_GPIO_Init+0x13c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a47      	ldr	r2, [pc, #284]	@ (80011a4 <MX_GPIO_Init+0x13c>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b45      	ldr	r3, [pc, #276]	@ (80011a4 <MX_GPIO_Init+0x13c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b41      	ldr	r3, [pc, #260]	@ (80011a4 <MX_GPIO_Init+0x13c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a40      	ldr	r2, [pc, #256]	@ (80011a4 <MX_GPIO_Init+0x13c>)
 80010a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b3e      	ldr	r3, [pc, #248]	@ (80011a4 <MX_GPIO_Init+0x13c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	4b3a      	ldr	r3, [pc, #232]	@ (80011a4 <MX_GPIO_Init+0x13c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a39      	ldr	r2, [pc, #228]	@ (80011a4 <MX_GPIO_Init+0x13c>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b37      	ldr	r3, [pc, #220]	@ (80011a4 <MX_GPIO_Init+0x13c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b33      	ldr	r3, [pc, #204]	@ (80011a4 <MX_GPIO_Init+0x13c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a32      	ldr	r2, [pc, #200]	@ (80011a4 <MX_GPIO_Init+0x13c>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b30      	ldr	r3, [pc, #192]	@ (80011a4 <MX_GPIO_Init+0x13c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f249 0120 	movw	r1, #36896	@ 0x9020
 80010f4:	482c      	ldr	r0, [pc, #176]	@ (80011a8 <MX_GPIO_Init+0x140>)
 80010f6:	f001 fd81 	bl	8002bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CE_GPIO_Port, LCD_CE_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001100:	482a      	ldr	r0, [pc, #168]	@ (80011ac <MX_GPIO_Init+0x144>)
 8001102:	f001 fd7b 	bl	8002bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MESTRE_MANDOU_GPIO_Port, MESTRE_MANDOU_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2120      	movs	r1, #32
 800110a:	4829      	ldr	r0, [pc, #164]	@ (80011b0 <MX_GPIO_Init+0x148>)
 800110c:	f001 fd76 	bl	8002bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001110:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001116:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800111a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	4821      	ldr	r0, [pc, #132]	@ (80011ac <MX_GPIO_Init+0x144>)
 8001128:	f001 fbbc 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_RST_Pin|LCD_DC_Pin;
 800112c:	f249 0320 	movw	r3, #36896	@ 0x9020
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	4818      	ldr	r0, [pc, #96]	@ (80011a8 <MX_GPIO_Init+0x140>)
 8001146:	f001 fbad 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTAO_STOP_Pin BOTAO_START_Pin */
  GPIO_InitStruct.Pin = BOTAO_STOP_Pin|BOTAO_START_Pin;
 800114a:	2306      	movs	r3, #6
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001152:	2302      	movs	r3, #2
 8001154:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4814      	ldr	r0, [pc, #80]	@ (80011b0 <MX_GPIO_Init+0x148>)
 800115e:	f001 fba1 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CE_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin;
 8001162:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CE_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	480c      	ldr	r0, [pc, #48]	@ (80011ac <MX_GPIO_Init+0x144>)
 800117c:	f001 fb92 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MESTRE_MANDOU_Pin */
  GPIO_InitStruct.Pin = MESTRE_MANDOU_Pin;
 8001180:	2320      	movs	r3, #32
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001184:	2301      	movs	r3, #1
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MESTRE_MANDOU_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	@ (80011b0 <MX_GPIO_Init+0x148>)
 8001198:	f001 fb84 	bl	80028a4 <HAL_GPIO_Init>

}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	@ 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020000 	.word	0x40020000
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020400 	.word	0x40020400

080011b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <MX_I2C1_Init+0x50>)
 80011ba:	4a13      	ldr	r2, [pc, #76]	@ (8001208 <MX_I2C1_Init+0x54>)
 80011bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_I2C1_Init+0x50>)
 80011c0:	4a12      	ldr	r2, [pc, #72]	@ (800120c <MX_I2C1_Init+0x58>)
 80011c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <MX_I2C1_Init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <MX_I2C1_Init+0x50>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <MX_I2C1_Init+0x50>)
 80011d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <MX_I2C1_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011de:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <MX_I2C1_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e4:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <MX_I2C1_Init+0x50>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <MX_I2C1_Init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f0:	4804      	ldr	r0, [pc, #16]	@ (8001204 <MX_I2C1_Init+0x50>)
 80011f2:	f001 fd1d 	bl	8002c30 <HAL_I2C_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011fc:	f000 fd42 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000220 	.word	0x20000220
 8001208:	40005400 	.word	0x40005400
 800120c:	000186a0 	.word	0x000186a0

08001210 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a19      	ldr	r2, [pc, #100]	@ (8001294 <HAL_I2C_MspInit+0x84>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d12b      	bne.n	800128a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <HAL_I2C_MspInit+0x88>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a17      	ldr	r2, [pc, #92]	@ (8001298 <HAL_I2C_MspInit+0x88>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <HAL_I2C_MspInit+0x88>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800124e:	23c0      	movs	r3, #192	@ 0xc0
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001252:	2312      	movs	r3, #18
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800125e:	2304      	movs	r3, #4
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	480c      	ldr	r0, [pc, #48]	@ (800129c <HAL_I2C_MspInit+0x8c>)
 800126a:	f001 fb1b 	bl	80028a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <HAL_I2C_MspInit+0x88>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	4a08      	ldr	r2, [pc, #32]	@ (8001298 <HAL_I2C_MspInit+0x88>)
 8001278:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800127c:	6413      	str	r3, [r2, #64]	@ 0x40
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_I2C_MspInit+0x88>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	@ 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40005400 	.word	0x40005400
 8001298:	40023800 	.word	0x40023800
 800129c:	40020400 	.word	0x40020400

080012a0 <LCD5110_update>:
#include "direcao.h"
#include "main.h"

static uint8_t scrbuf[504];

void LCD5110_update(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
    LCD5110_SetXY(0, 0);
 80012a6:	2100      	movs	r1, #0
 80012a8:	2000      	movs	r0, #0
 80012aa:	f000 fa30 	bl	800170e <LCD5110_SetXY>
    for (int i = 0; i < 504; i++) {
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	e009      	b.n	80012c8 <LCD5110_update+0x28>
        LCD5110_SendData(scrbuf[i]);
 80012b4:	4a09      	ldr	r2, [pc, #36]	@ (80012dc <LCD5110_update+0x3c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 f9d7 	bl	8001670 <LCD5110_SendData>
    for (int i = 0; i < 504; i++) {
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3301      	adds	r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 80012ce:	dbf1      	blt.n	80012b4 <LCD5110_update+0x14>
    }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000274 	.word	0x20000274

080012e0 <LCD5110_clrScr>:

void LCD5110_clrScr(void) { // limpa o display
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
    for (int i = 0; i < 504; i++) {
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	e007      	b.n	80012fc <LCD5110_clrScr+0x1c>
        scrbuf[i] = 0x00;
 80012ec:	4a08      	ldr	r2, [pc, #32]	@ (8001310 <LCD5110_clrScr+0x30>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 504; i++) {
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3301      	adds	r3, #1
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 8001302:	dbf3      	blt.n	80012ec <LCD5110_clrScr+0xc>
    }
    LCD5110_update();
 8001304:	f7ff ffcc 	bl	80012a0 <LCD5110_update>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000274 	.word	0x20000274

08001314 <LCD5110_setPixel>:
        scrbuf[i] = 0xFF;
    }
    LCD5110_update();
}

void LCD5110_setPixel(uint16_t x, uint16_t y) {
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	460a      	mov	r2, r1
 800131e:	80fb      	strh	r3, [r7, #6]
 8001320:	4613      	mov	r3, r2
 8001322:	80bb      	strh	r3, [r7, #4]
    if (x >= 84 || y >= 48) return;
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	2b53      	cmp	r3, #83	@ 0x53
 8001328:	d821      	bhi.n	800136e <LCD5110_setPixel+0x5a>
 800132a:	88bb      	ldrh	r3, [r7, #4]
 800132c:	2b2f      	cmp	r3, #47	@ 0x2f
 800132e:	d81e      	bhi.n	800136e <LCD5110_setPixel+0x5a>
    scrbuf[(y/8)*84 + x] |= (1 << (y % 8));
 8001330:	88bb      	ldrh	r3, [r7, #4]
 8001332:	08db      	lsrs	r3, r3, #3
 8001334:	b298      	uxth	r0, r3
 8001336:	4602      	mov	r2, r0
 8001338:	2354      	movs	r3, #84	@ 0x54
 800133a:	fb03 f202 	mul.w	r2, r3, r2
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	4413      	add	r3, r2
 8001342:	4a0e      	ldr	r2, [pc, #56]	@ (800137c <LCD5110_setPixel+0x68>)
 8001344:	5cd3      	ldrb	r3, [r2, r3]
 8001346:	b25a      	sxtb	r2, r3
 8001348:	88bb      	ldrh	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	2101      	movs	r1, #1
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	b25b      	sxtb	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	b259      	sxtb	r1, r3
 800135a:	4602      	mov	r2, r0
 800135c:	2354      	movs	r3, #84	@ 0x54
 800135e:	fb03 f202 	mul.w	r2, r3, r2
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	4413      	add	r3, r2
 8001366:	b2c9      	uxtb	r1, r1
 8001368:	4a04      	ldr	r2, [pc, #16]	@ (800137c <LCD5110_setPixel+0x68>)
 800136a:	54d1      	strb	r1, [r2, r3]
 800136c:	e000      	b.n	8001370 <LCD5110_setPixel+0x5c>
    if (x >= 84 || y >= 48) return;
 800136e:	bf00      	nop
}
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000274 	.word	0x20000274

08001380 <LCD5110_drawLine>:
        LCD5110_clrPixel(x, y+i);
    }
    LCD5110_update();
}

void LCD5110_drawLine(int x1, int y1, int x2, int y2) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
    int dx = abs(x2 - x1);
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	bfb8      	it	lt
 8001398:	425b      	neglt	r3, r3
 800139a:	623b      	str	r3, [r7, #32]
    int dy = abs(y2 - y1);
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	bfb8      	it	lt
 80013a6:	425b      	neglt	r3, r3
 80013a8:	61fb      	str	r3, [r7, #28]
    int sx = (x1 < x2) ? 1 : -1;
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	da01      	bge.n	80013b6 <LCD5110_drawLine+0x36>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e001      	b.n	80013ba <LCD5110_drawLine+0x3a>
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	61bb      	str	r3, [r7, #24]
    int sy = (y1 < y2) ? 1 : -1;
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	da01      	bge.n	80013c8 <LCD5110_drawLine+0x48>
 80013c4:	2301      	movs	r3, #1
 80013c6:	e001      	b.n	80013cc <LCD5110_drawLine+0x4c>
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295
 80013cc:	617b      	str	r3, [r7, #20]
    int err = dx - dy;
 80013ce:	6a3a      	ldr	r2, [r7, #32]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24

    while (1) {
        LCD5110_setPixel(x1, y1);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	b292      	uxth	r2, r2
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff97 	bl	8001314 <LCD5110_setPixel>
        if (x1 == x2 && y1 == y2) break;
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d103      	bne.n	80013f6 <LCD5110_drawLine+0x76>
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d01c      	beq.n	8001430 <LCD5110_drawLine+0xb0>
        int e2 = 2 * err;
 80013f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
        if (e2 > -dy) { err -= dy; x1 += sx; }
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	425b      	negs	r3, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	429a      	cmp	r2, r3
 8001404:	dd07      	ble.n	8001416 <LCD5110_drawLine+0x96>
 8001406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
        if (e2 < dx)  { err += dx; y1 += sy; }
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	6a3b      	ldr	r3, [r7, #32]
 800141a:	429a      	cmp	r2, r3
 800141c:	dadb      	bge.n	80013d6 <LCD5110_drawLine+0x56>
 800141e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001420:	6a3b      	ldr	r3, [r7, #32]
 8001422:	4413      	add	r3, r2
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	4413      	add	r3, r2
 800142c:	60bb      	str	r3, [r7, #8]
    while (1) {
 800142e:	e7d2      	b.n	80013d6 <LCD5110_drawLine+0x56>
        if (x1 == x2 && y1 == y2) break;
 8001430:	bf00      	nop
    }
    LCD5110_update();
 8001432:	f7ff ff35 	bl	80012a0 <LCD5110_update>
}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	@ 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <desenharSeta>:
        LCD5110_setPixel(x0 - y, y0 - x);
    }
    LCD5110_update();
}

void desenharSeta(Direcao dir) { // desenha a respectiva seta
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
	LCD5110_clrScr();
 800144a:	f7ff ff49 	bl	80012e0 <LCD5110_clrScr>

    switch (dir) {
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b03      	cmp	r3, #3
 8001452:	d857      	bhi.n	8001504 <desenharSeta+0xc4>
 8001454:	a201      	add	r2, pc, #4	@ (adr r2, 800145c <desenharSeta+0x1c>)
 8001456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145a:	bf00      	nop
 800145c:	0800146d 	.word	0x0800146d
 8001460:	08001493 	.word	0x08001493
 8001464:	080014b9 	.word	0x080014b9
 8001468:	080014df 	.word	0x080014df
        case DIR_CIMA:
        	LCD5110_drawLine(42, 30, 42, 10);
 800146c:	230a      	movs	r3, #10
 800146e:	222a      	movs	r2, #42	@ 0x2a
 8001470:	211e      	movs	r1, #30
 8001472:	202a      	movs	r0, #42	@ 0x2a
 8001474:	f7ff ff84 	bl	8001380 <LCD5110_drawLine>
			LCD5110_drawLine(42, 10, 36, 16);
 8001478:	2310      	movs	r3, #16
 800147a:	2224      	movs	r2, #36	@ 0x24
 800147c:	210a      	movs	r1, #10
 800147e:	202a      	movs	r0, #42	@ 0x2a
 8001480:	f7ff ff7e 	bl	8001380 <LCD5110_drawLine>
			LCD5110_drawLine(42, 10, 48, 16);
 8001484:	2310      	movs	r3, #16
 8001486:	2230      	movs	r2, #48	@ 0x30
 8001488:	210a      	movs	r1, #10
 800148a:	202a      	movs	r0, #42	@ 0x2a
 800148c:	f7ff ff78 	bl	8001380 <LCD5110_drawLine>
			break;
 8001490:	e039      	b.n	8001506 <desenharSeta+0xc6>
        case DIR_BAIXO:
			LCD5110_drawLine(42, 10, 42, 30);
 8001492:	231e      	movs	r3, #30
 8001494:	222a      	movs	r2, #42	@ 0x2a
 8001496:	210a      	movs	r1, #10
 8001498:	202a      	movs	r0, #42	@ 0x2a
 800149a:	f7ff ff71 	bl	8001380 <LCD5110_drawLine>
			LCD5110_drawLine(42, 30, 36, 24);
 800149e:	2318      	movs	r3, #24
 80014a0:	2224      	movs	r2, #36	@ 0x24
 80014a2:	211e      	movs	r1, #30
 80014a4:	202a      	movs	r0, #42	@ 0x2a
 80014a6:	f7ff ff6b 	bl	8001380 <LCD5110_drawLine>
			LCD5110_drawLine(42, 30, 48, 24);
 80014aa:	2318      	movs	r3, #24
 80014ac:	2230      	movs	r2, #48	@ 0x30
 80014ae:	211e      	movs	r1, #30
 80014b0:	202a      	movs	r0, #42	@ 0x2a
 80014b2:	f7ff ff65 	bl	8001380 <LCD5110_drawLine>
			break;
 80014b6:	e026      	b.n	8001506 <desenharSeta+0xc6>
        case DIR_ESQUERDA:
			LCD5110_drawLine(50, 24, 30, 24);
 80014b8:	2318      	movs	r3, #24
 80014ba:	221e      	movs	r2, #30
 80014bc:	2118      	movs	r1, #24
 80014be:	2032      	movs	r0, #50	@ 0x32
 80014c0:	f7ff ff5e 	bl	8001380 <LCD5110_drawLine>
			LCD5110_drawLine(30, 24, 36, 18);
 80014c4:	2312      	movs	r3, #18
 80014c6:	2224      	movs	r2, #36	@ 0x24
 80014c8:	2118      	movs	r1, #24
 80014ca:	201e      	movs	r0, #30
 80014cc:	f7ff ff58 	bl	8001380 <LCD5110_drawLine>
			LCD5110_drawLine(30, 24, 36, 30);
 80014d0:	231e      	movs	r3, #30
 80014d2:	2224      	movs	r2, #36	@ 0x24
 80014d4:	2118      	movs	r1, #24
 80014d6:	201e      	movs	r0, #30
 80014d8:	f7ff ff52 	bl	8001380 <LCD5110_drawLine>
			break;
 80014dc:	e013      	b.n	8001506 <desenharSeta+0xc6>
        case DIR_DIREITA:
			LCD5110_drawLine(30, 24, 50, 24);
 80014de:	2318      	movs	r3, #24
 80014e0:	2232      	movs	r2, #50	@ 0x32
 80014e2:	2118      	movs	r1, #24
 80014e4:	201e      	movs	r0, #30
 80014e6:	f7ff ff4b 	bl	8001380 <LCD5110_drawLine>
			LCD5110_drawLine(50, 24, 44, 18);
 80014ea:	2312      	movs	r3, #18
 80014ec:	222c      	movs	r2, #44	@ 0x2c
 80014ee:	2118      	movs	r1, #24
 80014f0:	2032      	movs	r0, #50	@ 0x32
 80014f2:	f7ff ff45 	bl	8001380 <LCD5110_drawLine>
			LCD5110_drawLine(50, 24, 44, 30);
 80014f6:	231e      	movs	r3, #30
 80014f8:	222c      	movs	r2, #44	@ 0x2c
 80014fa:	2118      	movs	r1, #24
 80014fc:	2032      	movs	r0, #50	@ 0x32
 80014fe:	f7ff ff3f 	bl	8001380 <LCD5110_drawLine>
			break;
 8001502:	e000      	b.n	8001506 <desenharSeta+0xc6>
        default:
            break;
 8001504:	bf00      	nop
    }
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop

08001510 <mostrarResultado>:

void mostrarResultado(uint8_t acertou) { // exibe os resultados, se acertou ou errou
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
    LCD5110_Clear();
 800151a:	f000 f8e0 	bl	80016de <LCD5110_Clear>
    LCD5110_SetXY(0, 0);
 800151e:	2100      	movs	r1, #0
 8001520:	2000      	movs	r0, #0
 8001522:	f000 f8f4 	bl	800170e <LCD5110_SetXY>

    if (acertou == 1) { // se acertou
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d104      	bne.n	8001536 <mostrarResultado+0x26>
        LCD5110_WriteStringCentered("Acertou!", 2); // exibe ACERTOU centralizado
 800152c:	2102      	movs	r1, #2
 800152e:	4808      	ldr	r0, [pc, #32]	@ (8001550 <mostrarResultado+0x40>)
 8001530:	f000 f952 	bl	80017d8 <LCD5110_WriteStringCentered>
 8001534:	e003      	b.n	800153e <mostrarResultado+0x2e>
    } else { // se errou
        LCD5110_WriteStringCentered("Errou!", 2); // exibe ERROU centralizado
 8001536:	2102      	movs	r1, #2
 8001538:	4806      	ldr	r0, [pc, #24]	@ (8001554 <mostrarResultado+0x44>)
 800153a:	f000 f94d 	bl	80017d8 <LCD5110_WriteStringCentered>
    }

    HAL_Delay(1000);  // Dá tempo para ver o resultado
 800153e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001542:	f000 ffe7 	bl	8002514 <HAL_Delay>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	08008fe8 	.word	0x08008fe8
 8001554:	08008ff4 	.word	0x08008ff4

08001558 <mostrarTelaInicial>:

void mostrarTelaInicial(void) // mostra a tela inicial do jogo
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	LCD5110_Clear();
 800155c:	f000 f8bf 	bl	80016de <LCD5110_Clear>
	LCD5110_SetXY(0, 0);
 8001560:	2100      	movs	r1, #0
 8001562:	2000      	movs	r0, #0
 8001564:	f000 f8d3 	bl	800170e <LCD5110_SetXY>
	LCD5110_WriteStringCentered("MESTRE MANDOU", 2); // exibe MESTRE MANDOU centralizado
 8001568:	2102      	movs	r1, #2
 800156a:	4802      	ldr	r0, [pc, #8]	@ (8001574 <mostrarTelaInicial+0x1c>)
 800156c:	f000 f934 	bl	80017d8 <LCD5110_WriteStringCentered>
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	08008ffc 	.word	0x08008ffc

08001578 <LCD5110_Delay>:
#include "lcd5110_hal.h"
#include "font6_8.h" // fonte 6x8

static void LCD5110_Delay(uint32_t ms) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 ffc7 	bl	8002514 <HAL_Delay>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <LCD5110_DC>:

static void LCD5110_DC(uint8_t val) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	bf14      	ite	ne
 80015a0:	2301      	movne	r3, #1
 80015a2:	2300      	moveq	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015ac:	4803      	ldr	r0, [pc, #12]	@ (80015bc <LCD5110_DC+0x2c>)
 80015ae:	f001 fb25 	bl	8002bfc <HAL_GPIO_WritePin>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40020000 	.word	0x40020000

080015c0 <LCD5110_RST>:

static void LCD5110_RST(uint8_t val) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bf14      	ite	ne
 80015d0:	2301      	movne	r3, #1
 80015d2:	2300      	moveq	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015dc:	4803      	ldr	r0, [pc, #12]	@ (80015ec <LCD5110_RST+0x2c>)
 80015de:	f001 fb0d 	bl	8002bfc <HAL_GPIO_WritePin>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40020000 	.word	0x40020000

080015f0 <LCD5110_CE>:

static void LCD5110_CE(uint8_t val) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CE_GPIO_Port, LCD_CE_Pin, val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf14      	ite	ne
 8001600:	2301      	movne	r3, #1
 8001602:	2300      	moveq	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800160c:	4803      	ldr	r0, [pc, #12]	@ (800161c <LCD5110_CE+0x2c>)
 800160e:	f001 faf5 	bl	8002bfc <HAL_GPIO_WritePin>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40020800 	.word	0x40020800

08001620 <LCD5110_Send>:

void LCD5110_Send(uint8_t data) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800162a:	1df9      	adds	r1, r7, #7
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
 8001630:	2201      	movs	r2, #1
 8001632:	4803      	ldr	r0, [pc, #12]	@ (8001640 <LCD5110_Send+0x20>)
 8001634:	f003 f991 	bl	800495a <HAL_SPI_Transmit>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	2000048c 	.word	0x2000048c

08001644 <LCD5110_SendCommand>:

void LCD5110_SendCommand(uint8_t cmd) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
    LCD5110_DC(0);
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff ff9e 	bl	8001590 <LCD5110_DC>
    LCD5110_CE(0);
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff ffcb 	bl	80015f0 <LCD5110_CE>
    LCD5110_Send(cmd);
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ffdf 	bl	8001620 <LCD5110_Send>
    LCD5110_CE(1);
 8001662:	2001      	movs	r0, #1
 8001664:	f7ff ffc4 	bl	80015f0 <LCD5110_CE>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <LCD5110_SendData>:

void LCD5110_SendData(uint8_t data) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
    LCD5110_DC(1);
 800167a:	2001      	movs	r0, #1
 800167c:	f7ff ff88 	bl	8001590 <LCD5110_DC>
    LCD5110_CE(0);
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff ffb5 	bl	80015f0 <LCD5110_CE>
    LCD5110_Send(data);
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ffc9 	bl	8001620 <LCD5110_Send>
    LCD5110_CE(1);
 800168e:	2001      	movs	r0, #1
 8001690:	f7ff ffae 	bl	80015f0 <LCD5110_CE>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <LCD5110_Init>:

void LCD5110_Init(void) {
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
    LCD5110_RST(0);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff ff8d 	bl	80015c0 <LCD5110_RST>
    LCD5110_Delay(10);
 80016a6:	200a      	movs	r0, #10
 80016a8:	f7ff ff66 	bl	8001578 <LCD5110_Delay>
    LCD5110_RST(1);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f7ff ff87 	bl	80015c0 <LCD5110_RST>

    LCD5110_SendCommand(0x21); // Extended commands
 80016b2:	2021      	movs	r0, #33	@ 0x21
 80016b4:	f7ff ffc6 	bl	8001644 <LCD5110_SendCommand>
    LCD5110_SendCommand(0xC6); // Vop (contrast)
 80016b8:	20c6      	movs	r0, #198	@ 0xc6
 80016ba:	f7ff ffc3 	bl	8001644 <LCD5110_SendCommand>
    LCD5110_SendCommand(0x06); // Temp coef
 80016be:	2006      	movs	r0, #6
 80016c0:	f7ff ffc0 	bl	8001644 <LCD5110_SendCommand>
    LCD5110_SendCommand(0x13); // Bias
 80016c4:	2013      	movs	r0, #19
 80016c6:	f7ff ffbd 	bl	8001644 <LCD5110_SendCommand>
    LCD5110_SendCommand(0x20); // Basic commands
 80016ca:	2020      	movs	r0, #32
 80016cc:	f7ff ffba 	bl	8001644 <LCD5110_SendCommand>
    LCD5110_SendCommand(0x0C); // Normal display
 80016d0:	200c      	movs	r0, #12
 80016d2:	f7ff ffb7 	bl	8001644 <LCD5110_SendCommand>

    LCD5110_Clear();
 80016d6:	f000 f802 	bl	80016de <LCD5110_Clear>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}

080016de <LCD5110_Clear>:

void LCD5110_Clear(void) { // limpar o display
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
    for (int i = 0; i < 504; i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	e005      	b.n	80016f6 <LCD5110_Clear+0x18>
        LCD5110_SendData(0x00);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff ffc0 	bl	8001670 <LCD5110_SendData>
    for (int i = 0; i < 504; i++)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3301      	adds	r3, #1
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 80016fc:	dbf5      	blt.n	80016ea <LCD5110_Clear+0xc>
    LCD5110_SetXY(0, 0);
 80016fe:	2100      	movs	r1, #0
 8001700:	2000      	movs	r0, #0
 8001702:	f000 f804 	bl	800170e <LCD5110_SetXY>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <LCD5110_SetXY>:

void LCD5110_SetXY(uint8_t x, uint8_t y) {
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	460a      	mov	r2, r1
 8001718:	71fb      	strb	r3, [r7, #7]
 800171a:	4613      	mov	r3, r2
 800171c:	71bb      	strb	r3, [r7, #6]
    LCD5110_SendCommand(0x80 | (x * 6));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	461a      	mov	r2, r3
 8001722:	0052      	lsls	r2, r2, #1
 8001724:	4413      	add	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	b25b      	sxtb	r3, r3
 800172c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001730:	b25b      	sxtb	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff85 	bl	8001644 <LCD5110_SendCommand>
    LCD5110_SendCommand(0x40 | y);
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001740:	b2db      	uxtb	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff7e 	bl	8001644 <LCD5110_SendCommand>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <LCD5110_WriteChar>:

void LCD5110_WriteChar(char c) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
    if (c < 32 || c > 127) c = '?';
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b1f      	cmp	r3, #31
 800175e:	d903      	bls.n	8001768 <LCD5110_WriteChar+0x18>
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	da01      	bge.n	800176c <LCD5110_WriteChar+0x1c>
 8001768:	233f      	movs	r3, #63	@ 0x3f
 800176a:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 6; i++)
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e011      	b.n	8001796 <LCD5110_WriteChar+0x46>
        LCD5110_SendData(font6_8[c - 32][i]);
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	f1a3 0220 	sub.w	r2, r3, #32
 8001778:	490b      	ldr	r1, [pc, #44]	@ (80017a8 <LCD5110_WriteChar+0x58>)
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	18ca      	adds	r2, r1, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ff70 	bl	8001670 <LCD5110_SendData>
    for (int i = 0; i < 6; i++)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3301      	adds	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b05      	cmp	r3, #5
 800179a:	ddea      	ble.n	8001772 <LCD5110_WriteChar+0x22>
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	0800900c 	.word	0x0800900c

080017ac <LCD5110_WriteString>:

void LCD5110_WriteString(char *s) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
    while (*s) {
 80017b4:	e006      	b.n	80017c4 <LCD5110_WriteString+0x18>
        LCD5110_WriteChar(*s++);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ffc6 	bl	8001750 <LCD5110_WriteChar>
    while (*s) {
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1f4      	bne.n	80017b6 <LCD5110_WriteString+0xa>
    }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <LCD5110_WriteStringCentered>:

void LCD5110_WriteStringCentered(char *str, uint8_t y) { // exibir frases centralizadas
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	70fb      	strb	r3, [r7, #3]
    int len = strlen(str);             // número de caracteres
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7fe fd63 	bl	80002b0 <strlen>
 80017ea:	4603      	mov	r3, r0
 80017ec:	617b      	str	r3, [r7, #20]
    int text_width = len * 6;          // 6 pixels por caractere
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	613b      	str	r3, [r7, #16]
    int x_pixel = (84 - text_width) / 2; // posição X centralizada em pixels
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	f1c3 0354 	rsb	r3, r3, #84	@ 0x54
 8001800:	0fda      	lsrs	r2, r3, #31
 8001802:	4413      	add	r3, r2
 8001804:	105b      	asrs	r3, r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
    int x_column = x_pixel / 6;        // converte para coluna
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4a0a      	ldr	r2, [pc, #40]	@ (8001834 <LCD5110_WriteStringCentered+0x5c>)
 800180c:	fb82 1203 	smull	r1, r2, r2, r3
 8001810:	17db      	asrs	r3, r3, #31
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	60bb      	str	r3, [r7, #8]
    LCD5110_SetXY(x_column, y);
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	78fa      	ldrb	r2, [r7, #3]
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff75 	bl	800170e <LCD5110_SetXY>
    LCD5110_WriteString(str);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ffc1 	bl	80017ac <LCD5110_WriteString>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2aaaaaab 	.word	0x2aaaaaab

08001838 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800183e:	f000 fdf7 	bl	8002430 <HAL_Init>
	/* USER CODE BEGIN Init */
	/* USER CODE END Init */
	/* Configure the system clock */
	SystemClock_Config();
 8001842:	f000 f9b1 	bl	8001ba8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001846:	f7ff fc0f 	bl	8001068 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800184a:	f000 fd4d 	bl	80022e8 <MX_USART2_UART_Init>
	MX_SPI2_Init();
 800184e:	f000 fb1d 	bl	8001e8c <MX_SPI2_Init>
	MX_I2C1_Init();
 8001852:	f7ff fcaf 	bl	80011b4 <MX_I2C1_Init>
	MX_TIM10_Init();
 8001856:	f000 fcfb 	bl	8002250 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */
	mpu6050Init(); // Inicializa o sensor
 800185a:	f000 fa19 	bl	8001c90 <mpu6050Init>
	LCD5110_Init(); // Inicializa o display
 800185e:	f7ff ff1d 	bl	800169c <LCD5110_Init>
	LCD5110_clrScr(); // Limpa o display
 8001862:	f7ff fd3d 	bl	80012e0 <LCD5110_clrScr>
	srand(HAL_GetTick()); // Aleatoriza a seed
 8001866:	f000 fe49 	bl	80024fc <HAL_GetTick>
 800186a:	4603      	mov	r3, r0
 800186c:	4618      	mov	r0, r3
 800186e:	f004 fcd9 	bl	8006224 <srand>
	mostrarTelaInicial(); // Exibe a tela inicial do jogo
 8001872:	f7ff fe71 	bl	8001558 <mostrarTelaInicial>
	/* USER CODE END 2 */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		lerBotoes(); // Lê o estado dos botoões de start e stop
 8001876:	f7ff fb9d 	bl	8000fb4 <lerBotoes>
		if (stop && !tela_inicial_mostrada) // Exibe a tela inicial se stop for clicado
 800187a:	4bac      	ldr	r3, [pc, #688]	@ (8001b2c <main+0x2f4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d008      	beq.n	8001894 <main+0x5c>
 8001882:	4bab      	ldr	r3, [pc, #684]	@ (8001b30 <main+0x2f8>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d104      	bne.n	8001894 <main+0x5c>
		{
			mostrarTelaInicial();
 800188a:	f7ff fe65 	bl	8001558 <mostrarTelaInicial>
			tela_inicial_mostrada = 1;
 800188e:	4ba8      	ldr	r3, [pc, #672]	@ (8001b30 <main+0x2f8>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
		}
		if (start && !stop) // Se start for clicado, começa o jogo
 8001894:	4ba7      	ldr	r3, [pc, #668]	@ (8001b34 <main+0x2fc>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0ec      	beq.n	8001876 <main+0x3e>
 800189c:	4ba3      	ldr	r3, [pc, #652]	@ (8001b2c <main+0x2f4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1e8      	bne.n	8001876 <main+0x3e>
		{
			if (!aguardandoMovimento) // exibe as setas para após poder observar o movimento
 80018a4:	4ba4      	ldr	r3, [pc, #656]	@ (8001b38 <main+0x300>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 80b8 	bne.w	8001a1e <main+0x1e6>
			{
				mestre_mandou = rand() % 2; // Lógica do Mestre Mandou
 80018ae:	f004 fce7 	bl	8006280 <rand>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	bfb8      	it	lt
 80018bc:	425b      	neglt	r3, r3
 80018be:	4a9f      	ldr	r2, [pc, #636]	@ (8001b3c <main+0x304>)
 80018c0:	6013      	str	r3, [r2, #0]
				if (mestre_mandou == 0) // caso o número aleatório seja 0
 80018c2:	4b9e      	ldr	r3, [pc, #632]	@ (8001b3c <main+0x304>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d17f      	bne.n	80019ca <main+0x192>
				{
					// NÃO mandei
					HAL_GPIO_WritePin(MESTRE_MANDOU_GPIO_Port, MESTRE_MANDOU_Pin, GPIO_PIN_RESET); // LED FICA APAGADO
 80018ca:	2200      	movs	r2, #0
 80018cc:	2120      	movs	r1, #32
 80018ce:	489c      	ldr	r0, [pc, #624]	@ (8001b40 <main+0x308>)
 80018d0:	f001 f994 	bl	8002bfc <HAL_GPIO_WritePin>
					// Gera nova direção
					do
					{
						direcaoAtual = (Direcao)(rand() % 4); // aleatoriza a seta para ser diferente da anterior
 80018d4:	f004 fcd4 	bl	8006280 <rand>
 80018d8:	4603      	mov	r3, r0
 80018da:	425a      	negs	r2, r3
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	f002 0203 	and.w	r2, r2, #3
 80018e4:	bf58      	it	pl
 80018e6:	4253      	negpl	r3, r2
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b96      	ldr	r3, [pc, #600]	@ (8001b44 <main+0x30c>)
 80018ec:	701a      	strb	r2, [r3, #0]
					} while (direcaoAtual == direcaoAnterior); // caso seja a mesma seta da rodada anterior, faz ela alterar
 80018ee:	4b95      	ldr	r3, [pc, #596]	@ (8001b44 <main+0x30c>)
 80018f0:	781a      	ldrb	r2, [r3, #0]
 80018f2:	4b95      	ldr	r3, [pc, #596]	@ (8001b48 <main+0x310>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d0ec      	beq.n	80018d4 <main+0x9c>
					direcaoAnterior = direcaoAtual;
 80018fa:	4b92      	ldr	r3, [pc, #584]	@ (8001b44 <main+0x30c>)
 80018fc:	781a      	ldrb	r2, [r3, #0]
 80018fe:	4b92      	ldr	r3, [pc, #584]	@ (8001b48 <main+0x310>)
 8001900:	701a      	strb	r2, [r3, #0]
					desenharSeta(direcaoAtual); // Exibe seta
 8001902:	4b90      	ldr	r3, [pc, #576]	@ (8001b44 <main+0x30c>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fd9a 	bl	8001440 <desenharSeta>
					uint32_t tempoInicial = HAL_GetTick();
 800190c:	f000 fdf6 	bl	80024fc <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]
					while (HAL_GetTick() - tempoInicial < 1000) // tempo entre setas
 8001912:	e04d      	b.n	80019b0 <main+0x178>
					{
						mpu6050ReadAccel(&leituraA); // faz a leitura do sensor para observar se o usuário se moveu
 8001914:	488d      	ldr	r0, [pc, #564]	@ (8001b4c <main+0x314>)
 8001916:	f000 fa3b 	bl	8001d90 <mpu6050ReadAccel>
						float ax = leituraA.accelX / 16384.0;
 800191a:	4b8c      	ldr	r3, [pc, #560]	@ (8001b4c <main+0x314>)
 800191c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fe1f 	bl	8000564 <__aeabi_i2d>
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	4b89      	ldr	r3, [pc, #548]	@ (8001b50 <main+0x318>)
 800192c:	f7fe ffae 	bl	800088c <__aeabi_ddiv>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f7ff f956 	bl	8000be8 <__aeabi_d2f>
 800193c:	4603      	mov	r3, r0
 800193e:	60fb      	str	r3, [r7, #12]
						float ay = leituraA.accelY / 16384.0;
 8001940:	4b82      	ldr	r3, [pc, #520]	@ (8001b4c <main+0x314>)
 8001942:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fe0c 	bl	8000564 <__aeabi_i2d>
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	4b7f      	ldr	r3, [pc, #508]	@ (8001b50 <main+0x318>)
 8001952:	f7fe ff9b 	bl	800088c <__aeabi_ddiv>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff f943 	bl	8000be8 <__aeabi_d2f>
 8001962:	4603      	mov	r3, r0
 8001964:	60bb      	str	r3, [r7, #8]
						Direcao mov = detectarMovimento(ax, ay, THRESHOLD); // verifica se o usuário fez um movimento brusco
 8001966:	4b7b      	ldr	r3, [pc, #492]	@ (8001b54 <main+0x31c>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	eeb0 1a67 	vmov.f32	s2, s15
 8001970:	edd7 0a02 	vldr	s1, [r7, #8]
 8001974:	ed97 0a03 	vldr	s0, [r7, #12]
 8001978:	f000 fa48 	bl	8001e0c <detectarMovimento>
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
						if (mov != DIR_NEUTRO)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	2b04      	cmp	r3, #4
 8001984:	d011      	beq.n	80019aa <main+0x172>
						{
							// Movimento foi detectado com LED apagado => erro!
							mostrarResultado(0);
 8001986:	2000      	movs	r0, #0
 8001988:	f7ff fdc2 	bl	8001510 <mostrarResultado>
							acertosSequencia = 0;
 800198c:	4b72      	ldr	r3, [pc, #456]	@ (8001b58 <main+0x320>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
							enviarAcertosSequencia();
 8001992:	f7ff fb4b 	bl	800102c <enviarAcertosSequencia>
							start = 0;
 8001996:	4b67      	ldr	r3, [pc, #412]	@ (8001b34 <main+0x2fc>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
							stop = 1;
 800199c:	4b63      	ldr	r3, [pc, #396]	@ (8001b2c <main+0x2f4>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
							tela_inicial_mostrada = 0;
 80019a2:	4b63      	ldr	r3, [pc, #396]	@ (8001b30 <main+0x2f8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
							break; // sai do while
 80019a8:	e00a      	b.n	80019c0 <main+0x188>
						}
						HAL_Delay(50); // pequena pausa entre leituras
 80019aa:	2032      	movs	r0, #50	@ 0x32
 80019ac:	f000 fdb2 	bl	8002514 <HAL_Delay>
					while (HAL_GetTick() - tempoInicial < 1000) // tempo entre setas
 80019b0:	f000 fda4 	bl	80024fc <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019be:	d3a9      	bcc.n	8001914 <main+0xdc>
					}
					HAL_Delay(500); // pequena espera antes da próxima rodada (opcional)
 80019c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019c4:	f000 fda6 	bl	8002514 <HAL_Delay>
 80019c8:	e0df      	b.n	8001b8a <main+0x352>
				}
				else // CASO MESTRE MANDOU = 1
				{
					HAL_GPIO_WritePin(MESTRE_MANDOU_GPIO_Port, MESTRE_MANDOU_Pin, GPIO_PIN_SET); // LED FICA ACESO
 80019ca:	2201      	movs	r2, #1
 80019cc:	2120      	movs	r1, #32
 80019ce:	485c      	ldr	r0, [pc, #368]	@ (8001b40 <main+0x308>)
 80019d0:	f001 f914 	bl	8002bfc <HAL_GPIO_WritePin>
					// Gera nova direção
					do
					{
						direcaoAtual = (Direcao)(rand() % 4); // aleatoriza uma seta
 80019d4:	f004 fc54 	bl	8006280 <rand>
 80019d8:	4603      	mov	r3, r0
 80019da:	425a      	negs	r2, r3
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	f002 0203 	and.w	r2, r2, #3
 80019e4:	bf58      	it	pl
 80019e6:	4253      	negpl	r3, r2
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b56      	ldr	r3, [pc, #344]	@ (8001b44 <main+0x30c>)
 80019ec:	701a      	strb	r2, [r3, #0]
					} while (direcaoAtual == direcaoAnterior); // faz a seta ser diferente da anterior
 80019ee:	4b55      	ldr	r3, [pc, #340]	@ (8001b44 <main+0x30c>)
 80019f0:	781a      	ldrb	r2, [r3, #0]
 80019f2:	4b55      	ldr	r3, [pc, #340]	@ (8001b48 <main+0x310>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d0ec      	beq.n	80019d4 <main+0x19c>
					direcaoAnterior = direcaoAtual;
 80019fa:	4b52      	ldr	r3, [pc, #328]	@ (8001b44 <main+0x30c>)
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	4b52      	ldr	r3, [pc, #328]	@ (8001b48 <main+0x310>)
 8001a00:	701a      	strb	r2, [r3, #0]
					desenharSeta(direcaoAtual); // desenha a seta
 8001a02:	4b50      	ldr	r3, [pc, #320]	@ (8001b44 <main+0x30c>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fd1a 	bl	8001440 <desenharSeta>
					tempoSeta = HAL_GetTick();
 8001a0c:	f000 fd76 	bl	80024fc <HAL_GetTick>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4a52      	ldr	r2, [pc, #328]	@ (8001b5c <main+0x324>)
 8001a14:	6013      	str	r3, [r2, #0]
					aguardandoMovimento = 1; // espera o movimento do usuário
 8001a16:	4b48      	ldr	r3, [pc, #288]	@ (8001b38 <main+0x300>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e0b5      	b.n	8001b8a <main+0x352>
				}
			}
			else // se o usuário não se mecher, o usuário perde
			{
				// Aguarda movimento por no máximo 2 segundos
				if (HAL_GetTick() - tempoSeta > 2000)
 8001a1e:	f000 fd6d 	bl	80024fc <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b4d      	ldr	r3, [pc, #308]	@ (8001b5c <main+0x324>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001a2e:	d912      	bls.n	8001a56 <main+0x21e>
				{
					// Timeout
					mostrarResultado(0);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff fd6d 	bl	8001510 <mostrarResultado>
					acertosSequencia = 0;
 8001a36:	4b48      	ldr	r3, [pc, #288]	@ (8001b58 <main+0x320>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
					start = 0;
 8001a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b34 <main+0x2fc>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
					stop = 1;
 8001a42:	4b3a      	ldr	r3, [pc, #232]	@ (8001b2c <main+0x2f4>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
					tela_inicial_mostrada = 0;
 8001a48:	4b39      	ldr	r3, [pc, #228]	@ (8001b30 <main+0x2f8>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
					aguardandoMovimento = 0;
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b38 <main+0x300>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	e099      	b.n	8001b8a <main+0x352>
				}
				else if (HAL_GetTick() - tempoSeta > 1000) // só começa a verificar após 1s
 8001a56:	f000 fd51 	bl	80024fc <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b5c <main+0x324>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a66:	f240 8090 	bls.w	8001b8a <main+0x352>
				{
					mpu6050ReadAccel(&leituraA); // faz a leitura do movimento
 8001a6a:	4838      	ldr	r0, [pc, #224]	@ (8001b4c <main+0x314>)
 8001a6c:	f000 f990 	bl	8001d90 <mpu6050ReadAccel>
					float ax = leituraA.accelX / 16384.0;
 8001a70:	4b36      	ldr	r3, [pc, #216]	@ (8001b4c <main+0x314>)
 8001a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fd74 	bl	8000564 <__aeabi_i2d>
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4b33      	ldr	r3, [pc, #204]	@ (8001b50 <main+0x318>)
 8001a82:	f7fe ff03 	bl	800088c <__aeabi_ddiv>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7ff f8ab 	bl	8000be8 <__aeabi_d2f>
 8001a92:	4603      	mov	r3, r0
 8001a94:	61fb      	str	r3, [r7, #28]
					float ay = leituraA.accelY / 16384.0;
 8001a96:	4b2d      	ldr	r3, [pc, #180]	@ (8001b4c <main+0x314>)
 8001a98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fd61 	bl	8000564 <__aeabi_i2d>
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b50 <main+0x318>)
 8001aa8:	f7fe fef0 	bl	800088c <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7ff f898 	bl	8000be8 <__aeabi_d2f>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	61bb      	str	r3, [r7, #24]
					Direcao mov = detectarMovimento(ax, ay, THRESHOLD); // verifica se o movimento é válido
 8001abc:	4b25      	ldr	r3, [pc, #148]	@ (8001b54 <main+0x31c>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	eeb0 1a67 	vmov.f32	s2, s15
 8001ac6:	edd7 0a06 	vldr	s1, [r7, #24]
 8001aca:	ed97 0a07 	vldr	s0, [r7, #28]
 8001ace:	f000 f99d 	bl	8001e0c <detectarMovimento>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	75fb      	strb	r3, [r7, #23]
					if (mov != DIR_NEUTRO)
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d041      	beq.n	8001b60 <main+0x328>
					{
						if (mov == direcaoAtual) // se movimento igual à seta
 8001adc:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <main+0x30c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	7dfa      	ldrb	r2, [r7, #23]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d108      	bne.n	8001af8 <main+0x2c0>
						{
							mostrarResultado(1); // exibe acertou no display
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f7ff fd12 	bl	8001510 <mostrarResultado>
							acertosSequencia++; // aumenta a quantidade de acertos
 8001aec:	4b1a      	ldr	r3, [pc, #104]	@ (8001b58 <main+0x320>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	4a19      	ldr	r2, [pc, #100]	@ (8001b58 <main+0x320>)
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e00e      	b.n	8001b16 <main+0x2de>
						}
						else // se o usuário errou
						{
							mostrarResultado(0); // exibe errou no display
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff fd09 	bl	8001510 <mostrarResultado>
							acertosSequencia = 0; // zera os acertos em sequência
 8001afe:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <main+0x320>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
							start = 0;
 8001b04:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <main+0x2fc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
							stop = 1; // volta a tela inicial do jogo
 8001b0a:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <main+0x2f4>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
							tela_inicial_mostrada = 0;
 8001b10:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <main+0x2f8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
						}
						enviarAcertosSequencia(); // envia a quantidade de acertos
 8001b16:	f7ff fa89 	bl	800102c <enviarAcertosSequencia>
						aguardandoMovimento = 0;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <main+0x300>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500); // Pausa após resposta
 8001b20:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b24:	f000 fcf6 	bl	8002514 <HAL_Delay>
 8001b28:	e02f      	b.n	8001b8a <main+0x352>
 8001b2a:	bf00      	nop
 8001b2c:	20000004 	.word	0x20000004
 8001b30:	20000488 	.word	0x20000488
 8001b34:	20000478 	.word	0x20000478
 8001b38:	20000480 	.word	0x20000480
 8001b3c:	20000484 	.word	0x20000484
 8001b40:	40020400 	.word	0x40020400
 8001b44:	20000008 	.word	0x20000008
 8001b48:	20000009 	.word	0x20000009
 8001b4c:	2000046c 	.word	0x2000046c
 8001b50:	40d00000 	.word	0x40d00000
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000474 	.word	0x20000474
 8001b5c:	2000047c 	.word	0x2000047c
					}
					else
					{
						acertosSequencia = 0; // zera os acertos em sequência
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <main+0x35c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
						start = 0;
 8001b66:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <main+0x360>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
						stop = 1; // volta a tela inicial do jogo
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <main+0x364>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
						tela_inicial_mostrada = 0;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <main+0x368>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
						enviarAcertosSequencia(); // envia a quantidade de acertos
 8001b78:	f7ff fa58 	bl	800102c <enviarAcertosSequencia>
						aguardandoMovimento = 0;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <main+0x36c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500); // Pausa após resposta
 8001b82:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b86:	f000 fcc5 	bl	8002514 <HAL_Delay>
					}
				}
			}
			HAL_Delay(50); // Suavização
 8001b8a:	2032      	movs	r0, #50	@ 0x32
 8001b8c:	f000 fcc2 	bl	8002514 <HAL_Delay>
		lerBotoes(); // Lê o estado dos botoões de start e stop
 8001b90:	e671      	b.n	8001876 <main+0x3e>
 8001b92:	bf00      	nop
 8001b94:	20000474 	.word	0x20000474
 8001b98:	20000478 	.word	0x20000478
 8001b9c:	20000004 	.word	0x20000004
 8001ba0:	20000488 	.word	0x20000488
 8001ba4:	20000480 	.word	0x20000480

08001ba8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b094      	sub	sp, #80	@ 0x50
 8001bac:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	2234      	movs	r2, #52	@ 0x34
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f005 f931 	bl	8006e1e <memset>
 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bbc:	f107 0308 	add.w	r3, r7, #8
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
 /** Configure the main internal regulator output voltage
 */
 __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c7c <SystemClock_Config+0xd4>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	4a29      	ldr	r2, [pc, #164]	@ (8001c7c <SystemClock_Config+0xd4>)
 8001bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bda:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bdc:	4b27      	ldr	r3, [pc, #156]	@ (8001c7c <SystemClock_Config+0xd4>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001be8:	2300      	movs	r3, #0
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <SystemClock_Config+0xd8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001bf4:	4a22      	ldr	r2, [pc, #136]	@ (8001c80 <SystemClock_Config+0xd8>)
 8001bf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <SystemClock_Config+0xd8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 /** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	61fb      	str	r3, [r7, #28]
 RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c10:	2310      	movs	r3, #16
 8001c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c14:	2302      	movs	r3, #2
 8001c16:	637b      	str	r3, [r7, #52]	@ 0x34
 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 RCC_OscInitStruct.PLL.PLLM = 16;
 8001c1c:	2310      	movs	r3, #16
 8001c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 RCC_OscInitStruct.PLL.PLLN = 336;
 8001c20:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001c24:	643b      	str	r3, [r7, #64]	@ 0x40
 RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c26:	2304      	movs	r3, #4
 8001c28:	647b      	str	r3, [r7, #68]	@ 0x44
 RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 RCC_OscInitStruct.PLL.PLLR = 2;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 fb68 	bl	800430c <HAL_RCC_OscConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0x9e>
 {
   Error_Handler();
 8001c42:	f000 f81f 	bl	8001c84 <Error_Handler>
 }
 /** Initializes the CPU, AHB and APB buses clocks
 */
 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c46:	230f      	movs	r3, #15
 8001c48:	60bb      	str	r3, [r7, #8]
                             |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	60fb      	str	r3, [r7, #12]
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c56:	617b      	str	r3, [r7, #20]
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61bb      	str	r3, [r7, #24]
 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	2102      	movs	r1, #2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 f808 	bl	8003c78 <HAL_RCC_ClockConfig>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <SystemClock_Config+0xca>
 {
   Error_Handler();
 8001c6e:	f000 f809 	bl	8001c84 <Error_Handler>
 }
}
 8001c72:	bf00      	nop
 8001c74:	3750      	adds	r7, #80	@ 0x50
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40007000 	.word	0x40007000

08001c84 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c88:	b672      	cpsid	i
}
 8001c8a:	bf00      	nop
 /* USER CODE BEGIN Error_Handler_Debug */
 /* User can add his own implementation to report the HAL error return state */
 __disable_irq();
 while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <Error_Handler+0x8>

08001c90 <mpu6050Init>:
#include "usart.h"
#include "direcao.h"

static uint8_t mpu6050Addr = (0x68 << 1);

void mpu6050Init(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af04      	add	r7, sp, #16
    static const uint8_t gyroConfigReg = 0x1B;
    static unsigned char msgErro[] = "Erro na inicializacao do MPU6050";
    uint8_t check;
    uint8_t data;

    HAL_I2C_Mem_Read(&hi2c1, mpu6050Addr, whoAmIReg, 1, &check, 1, 1000);
 8001c96:	4b35      	ldr	r3, [pc, #212]	@ (8001d6c <mpu6050Init+0xdc>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4b34      	ldr	r3, [pc, #208]	@ (8001d70 <mpu6050Init+0xe0>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	1dfb      	adds	r3, r7, #7
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	4830      	ldr	r0, [pc, #192]	@ (8001d74 <mpu6050Init+0xe4>)
 8001cb4:	f001 f9fa 	bl	80030ac <HAL_I2C_Mem_Read>
    if(check == 0x68) {
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	2b68      	cmp	r3, #104	@ 0x68
 8001cbc:	d14c      	bne.n	8001d58 <mpu6050Init+0xc8>
        data = 0x08;
 8001cbe:	2308      	movs	r3, #8
 8001cc0:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, mpu6050Addr, pwrMgmt1Reg, 1, &data, 1, 1000);
 8001cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d6c <mpu6050Init+0xdc>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d78 <mpu6050Init+0xe8>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	1dbb      	adds	r3, r7, #6
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2301      	movs	r3, #1
 8001cde:	4825      	ldr	r0, [pc, #148]	@ (8001d74 <mpu6050Init+0xe4>)
 8001ce0:	f001 f8ea 	bl	8002eb8 <HAL_I2C_Mem_Write>
        data = 0x06;
 8001ce4:	2306      	movs	r3, #6
 8001ce6:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, mpu6050Addr, configReg, 1, &data, 1, 1000);
 8001ce8:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <mpu6050Init+0xdc>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	4b23      	ldr	r3, [pc, #140]	@ (8001d7c <mpu6050Init+0xec>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf8:	9302      	str	r3, [sp, #8]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	1dbb      	adds	r3, r7, #6
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2301      	movs	r3, #1
 8001d04:	481b      	ldr	r0, [pc, #108]	@ (8001d74 <mpu6050Init+0xe4>)
 8001d06:	f001 f8d7 	bl	8002eb8 <HAL_I2C_Mem_Write>
        data = 0x00;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, mpu6050Addr, accelConfigReg, 1, &data, 1, 1000);
 8001d0e:	4b17      	ldr	r3, [pc, #92]	@ (8001d6c <mpu6050Init+0xdc>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	4619      	mov	r1, r3
 8001d14:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <mpu6050Init+0xf0>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1e:	9302      	str	r3, [sp, #8]
 8001d20:	2301      	movs	r3, #1
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	1dbb      	adds	r3, r7, #6
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2301      	movs	r3, #1
 8001d2a:	4812      	ldr	r0, [pc, #72]	@ (8001d74 <mpu6050Init+0xe4>)
 8001d2c:	f001 f8c4 	bl	8002eb8 <HAL_I2C_Mem_Write>
        data = 0x00;
 8001d30:	2300      	movs	r3, #0
 8001d32:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, mpu6050Addr, gyroConfigReg, 1, &data, 1, 1000);
 8001d34:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <mpu6050Init+0xdc>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <mpu6050Init+0xf4>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d44:	9302      	str	r3, [sp, #8]
 8001d46:	2301      	movs	r3, #1
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	1dbb      	adds	r3, r7, #6
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4808      	ldr	r0, [pc, #32]	@ (8001d74 <mpu6050Init+0xe4>)
 8001d52:	f001 f8b1 	bl	8002eb8 <HAL_I2C_Mem_Write>
    } else {
        HAL_UART_Transmit(&huart2, msgErro, sizeof(msgErro), 100);
    }
}
 8001d56:	e005      	b.n	8001d64 <mpu6050Init+0xd4>
        HAL_UART_Transmit(&huart2, msgErro, sizeof(msgErro), 100);
 8001d58:	2364      	movs	r3, #100	@ 0x64
 8001d5a:	2221      	movs	r2, #33	@ 0x21
 8001d5c:	490a      	ldr	r1, [pc, #40]	@ (8001d88 <mpu6050Init+0xf8>)
 8001d5e:	480b      	ldr	r0, [pc, #44]	@ (8001d8c <mpu6050Init+0xfc>)
 8001d60:	f003 fa98 	bl	8005294 <HAL_UART_Transmit>
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	2000000a 	.word	0x2000000a
 8001d70:	0800924c 	.word	0x0800924c
 8001d74:	20000220 	.word	0x20000220
 8001d78:	0800924d 	.word	0x0800924d
 8001d7c:	0800924e 	.word	0x0800924e
 8001d80:	0800924f 	.word	0x0800924f
 8001d84:	08009250 	.word	0x08009250
 8001d88:	2000000c 	.word	0x2000000c
 8001d8c:	20000530 	.word	0x20000530

08001d90 <mpu6050ReadAccel>:

void mpu6050ReadAccel(leituraAcel *leitura) { // faz um cálculo para poder pegar a direção do movimento
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af04      	add	r7, sp, #16
 8001d96:	6078      	str	r0, [r7, #4]
    static const uint8_t accelXoutHReg = 0x3B;
    uint8_t recData[6];
    HAL_I2C_Mem_Read(&hi2c1, mpu6050Addr, accelXoutHReg, 1, recData, 6, 1000);
 8001d98:	4b19      	ldr	r3, [pc, #100]	@ (8001e00 <mpu6050ReadAccel+0x70>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <mpu6050ReadAccel+0x74>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da8:	9302      	str	r3, [sp, #8]
 8001daa:	2306      	movs	r3, #6
 8001dac:	9301      	str	r3, [sp, #4]
 8001dae:	f107 0308 	add.w	r3, r7, #8
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2301      	movs	r3, #1
 8001db6:	4814      	ldr	r0, [pc, #80]	@ (8001e08 <mpu6050ReadAccel+0x78>)
 8001db8:	f001 f978 	bl	80030ac <HAL_I2C_Mem_Read>
    leitura->accelX = (int16_t)(recData[0] << 8 | recData[1]);
 8001dbc:	7a3b      	ldrb	r3, [r7, #8]
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	b21a      	sxth	r2, r3
 8001dc4:	7a7b      	ldrb	r3, [r7, #9]
 8001dc6:	b21b      	sxth	r3, r3
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	b21a      	sxth	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	801a      	strh	r2, [r3, #0]
    leitura->accelY = (int16_t)(recData[2] << 8 | recData[3]);
 8001dd0:	7abb      	ldrb	r3, [r7, #10]
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	b21a      	sxth	r2, r3
 8001dd8:	7afb      	ldrb	r3, [r7, #11]
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	805a      	strh	r2, [r3, #2]
    leitura->accelZ = (int16_t)(recData[4] << 8 | recData[5]);
 8001de4:	7b3b      	ldrb	r3, [r7, #12]
 8001de6:	b21b      	sxth	r3, r3
 8001de8:	021b      	lsls	r3, r3, #8
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	7b7b      	ldrb	r3, [r7, #13]
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	4313      	orrs	r3, r2
 8001df2:	b21a      	sxth	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	809a      	strh	r2, [r3, #4]
}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	2000000a 	.word	0x2000000a
 8001e04:	08009251 	.word	0x08009251
 8001e08:	20000220 	.word	0x20000220

08001e0c <detectarMovimento>:
    leitura->gyroY = (int16_t) (recData[2] << 8 | recData [3]);
    leitura->gyroZ = (int16_t) (recData[4] << 8 | recData [5]);
}

Direcao detectarMovimento(float ax, float ay, float threshold) // verifica qual foi o movimento e se foi válido
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e16:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e1a:	ed87 1a01 	vstr	s2, [r7, #4]
	if (ay < -threshold) return DIR_ESQUERDA;
 8001e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e22:	eef1 7a67 	vneg.f32	s15, s15
 8001e26:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e32:	d501      	bpl.n	8001e38 <detectarMovimento+0x2c>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e023      	b.n	8001e80 <detectarMovimento+0x74>
	if (ay > threshold) return DIR_DIREITA;
 8001e38:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	dd01      	ble.n	8001e4e <detectarMovimento+0x42>
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e018      	b.n	8001e80 <detectarMovimento+0x74>
	if (ax > threshold) return DIR_BAIXO;
 8001e4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5e:	dd01      	ble.n	8001e64 <detectarMovimento+0x58>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e00d      	b.n	8001e80 <detectarMovimento+0x74>
	if (ax < -threshold) return DIR_CIMA;
 8001e64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e68:	eef1 7a67 	vneg.f32	s15, s15
 8001e6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e78:	d501      	bpl.n	8001e7e <detectarMovimento+0x72>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e000      	b.n	8001e80 <detectarMovimento+0x74>
	return DIR_NEUTRO;
 8001e7e:	2304      	movs	r3, #4
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <MX_SPI2_Init+0x64>)
 8001e92:	4a18      	ldr	r2, [pc, #96]	@ (8001ef4 <MX_SPI2_Init+0x68>)
 8001e94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e96:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <MX_SPI2_Init+0x64>)
 8001e98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e9e:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <MX_SPI2_Init+0x64>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ea4:	4b12      	ldr	r3, [pc, #72]	@ (8001ef0 <MX_SPI2_Init+0x64>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <MX_SPI2_Init+0x64>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <MX_SPI2_Init+0x64>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef0 <MX_SPI2_Init+0x64>)
 8001eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ebc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <MX_SPI2_Init+0x64>)
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <MX_SPI2_Init+0x64>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eca:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <MX_SPI2_Init+0x64>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	@ (8001ef0 <MX_SPI2_Init+0x64>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <MX_SPI2_Init+0x64>)
 8001ed8:	220a      	movs	r2, #10
 8001eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001edc:	4804      	ldr	r0, [pc, #16]	@ (8001ef0 <MX_SPI2_Init+0x64>)
 8001ede:	f002 fcb3 	bl	8004848 <HAL_SPI_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ee8:	f7ff fecc 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	2000048c 	.word	0x2000048c
 8001ef4:	40003800 	.word	0x40003800

08001ef8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	@ 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a28      	ldr	r2, [pc, #160]	@ (8001fb8 <HAL_SPI_MspInit+0xc0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d14a      	bne.n	8001fb0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	4b27      	ldr	r3, [pc, #156]	@ (8001fbc <HAL_SPI_MspInit+0xc4>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	4a26      	ldr	r2, [pc, #152]	@ (8001fbc <HAL_SPI_MspInit+0xc4>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2a:	4b24      	ldr	r3, [pc, #144]	@ (8001fbc <HAL_SPI_MspInit+0xc4>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <HAL_SPI_MspInit+0xc4>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8001fbc <HAL_SPI_MspInit+0xc4>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f46:	4b1d      	ldr	r3, [pc, #116]	@ (8001fbc <HAL_SPI_MspInit+0xc4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <HAL_SPI_MspInit+0xc4>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4a18      	ldr	r2, [pc, #96]	@ (8001fbc <HAL_SPI_MspInit+0xc4>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f62:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <HAL_SPI_MspInit+0xc4>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f7e:	2305      	movs	r3, #5
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	480d      	ldr	r0, [pc, #52]	@ (8001fc0 <HAL_SPI_MspInit+0xc8>)
 8001f8a:	f000 fc8b 	bl	80028a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f8e:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fa0:	2305      	movs	r3, #5
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4806      	ldr	r0, [pc, #24]	@ (8001fc4 <HAL_SPI_MspInit+0xcc>)
 8001fac:	f000 fc7a 	bl	80028a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3728      	adds	r7, #40	@ 0x28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40003800 	.word	0x40003800
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40020400 	.word	0x40020400

08001fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <HAL_MspInit+0x4c>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8002014 <HAL_MspInit+0x4c>)
 8001fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fde:	4b0d      	ldr	r3, [pc, #52]	@ (8002014 <HAL_MspInit+0x4c>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <HAL_MspInit+0x4c>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	4a08      	ldr	r2, [pc, #32]	@ (8002014 <HAL_MspInit+0x4c>)
 8001ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_MspInit+0x4c>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002006:	2007      	movs	r0, #7
 8002008:	f000 fb78 	bl	80026fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40023800 	.word	0x40023800

08002018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <NMI_Handler+0x4>

08002020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <HardFault_Handler+0x4>

08002028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <MemManage_Handler+0x4>

08002030 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <UsageFault_Handler+0x4>

08002040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800206e:	f000 fa31 	bl	80024d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800207e:	f002 fedc 	bl	8004e3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200004e8 	.word	0x200004e8

0800208c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002090:	4802      	ldr	r0, [pc, #8]	@ (800209c <USART2_IRQHandler+0x10>)
 8002092:	f003 f98b 	bl	80053ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000530 	.word	0x20000530

080020a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return 1;
 80020a4:	2301      	movs	r3, #1
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <_kill>:

int _kill(int pid, int sig)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ba:	f004 ff03 	bl	8006ec4 <__errno>
 80020be:	4603      	mov	r3, r0
 80020c0:	2216      	movs	r2, #22
 80020c2:	601a      	str	r2, [r3, #0]
  return -1;
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_exit>:

void _exit (int status)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ffe7 	bl	80020b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020e2:	bf00      	nop
 80020e4:	e7fd      	b.n	80020e2 <_exit+0x12>

080020e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	e00a      	b.n	800210e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020f8:	f3af 8000 	nop.w
 80020fc:	4601      	mov	r1, r0
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	60ba      	str	r2, [r7, #8]
 8002104:	b2ca      	uxtb	r2, r1
 8002106:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	3301      	adds	r3, #1
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	429a      	cmp	r2, r3
 8002114:	dbf0      	blt.n	80020f8 <_read+0x12>
  }

  return len;
 8002116:	687b      	ldr	r3, [r7, #4]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	e009      	b.n	8002146 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	60ba      	str	r2, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3301      	adds	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	429a      	cmp	r2, r3
 800214c:	dbf1      	blt.n	8002132 <_write+0x12>
  }
  return len;
 800214e:	687b      	ldr	r3, [r7, #4]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <_close>:

int _close(int file)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002180:	605a      	str	r2, [r3, #4]
  return 0;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <_isatty>:

int _isatty(int file)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002198:	2301      	movs	r3, #1
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c8:	4a14      	ldr	r2, [pc, #80]	@ (800221c <_sbrk+0x5c>)
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <_sbrk+0x60>)
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021d4:	4b13      	ldr	r3, [pc, #76]	@ (8002224 <_sbrk+0x64>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d102      	bne.n	80021e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021dc:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <_sbrk+0x64>)
 80021de:	4a12      	ldr	r2, [pc, #72]	@ (8002228 <_sbrk+0x68>)
 80021e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021e2:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d207      	bcs.n	8002200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021f0:	f004 fe68 	bl	8006ec4 <__errno>
 80021f4:	4603      	mov	r3, r0
 80021f6:	220c      	movs	r2, #12
 80021f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
 80021fe:	e009      	b.n	8002214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002200:	4b08      	ldr	r3, [pc, #32]	@ (8002224 <_sbrk+0x64>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002206:	4b07      	ldr	r3, [pc, #28]	@ (8002224 <_sbrk+0x64>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	4a05      	ldr	r2, [pc, #20]	@ (8002224 <_sbrk+0x64>)
 8002210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002212:	68fb      	ldr	r3, [r7, #12]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20020000 	.word	0x20020000
 8002220:	00000400 	.word	0x00000400
 8002224:	200004e4 	.word	0x200004e4
 8002228:	200006c8 	.word	0x200006c8

0800222c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002230:	4b06      	ldr	r3, [pc, #24]	@ (800224c <SystemInit+0x20>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002236:	4a05      	ldr	r2, [pc, #20]	@ (800224c <SystemInit+0x20>)
 8002238:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800223c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002254:	4b0e      	ldr	r3, [pc, #56]	@ (8002290 <MX_TIM10_Init+0x40>)
 8002256:	4a0f      	ldr	r2, [pc, #60]	@ (8002294 <MX_TIM10_Init+0x44>)
 8002258:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2499;
 800225a:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <MX_TIM10_Init+0x40>)
 800225c:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8002260:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002262:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <MX_TIM10_Init+0x40>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8399;
 8002268:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <MX_TIM10_Init+0x40>)
 800226a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800226e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002270:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <MX_TIM10_Init+0x40>)
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002276:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <MX_TIM10_Init+0x40>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800227c:	4804      	ldr	r0, [pc, #16]	@ (8002290 <MX_TIM10_Init+0x40>)
 800227e:	f002 fd8d 	bl	8004d9c <HAL_TIM_Base_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002288:	f7ff fcfc 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	200004e8 	.word	0x200004e8
 8002294:	40014400 	.word	0x40014400

08002298 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0e      	ldr	r2, [pc, #56]	@ (80022e0 <HAL_TIM_Base_MspInit+0x48>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d115      	bne.n	80022d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b0d      	ldr	r3, [pc, #52]	@ (80022e4 <HAL_TIM_Base_MspInit+0x4c>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b2:	4a0c      	ldr	r2, [pc, #48]	@ (80022e4 <HAL_TIM_Base_MspInit+0x4c>)
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ba:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <HAL_TIM_Base_MspInit+0x4c>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	2019      	movs	r0, #25
 80022cc:	f000 fa21 	bl	8002712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022d0:	2019      	movs	r0, #25
 80022d2:	f000 fa3a 	bl	800274a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40014400 	.word	0x40014400
 80022e4:	40023800 	.word	0x40023800

080022e8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <MX_USART2_UART_Init+0x4c>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	@ (8002338 <MX_USART2_UART_Init+0x50>)
 80022f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022f2:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <MX_USART2_UART_Init+0x4c>)
 80022f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <MX_USART2_UART_Init+0x4c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002300:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <MX_USART2_UART_Init+0x4c>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <MX_USART2_UART_Init+0x4c>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800230c:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <MX_USART2_UART_Init+0x4c>)
 800230e:	220c      	movs	r2, #12
 8002310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002312:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <MX_USART2_UART_Init+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002318:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <MX_USART2_UART_Init+0x4c>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800231e:	4805      	ldr	r0, [pc, #20]	@ (8002334 <MX_USART2_UART_Init+0x4c>)
 8002320:	f002 ff68 	bl	80051f4 <HAL_UART_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800232a:	f7ff fcab 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000530 	.word	0x20000530
 8002338:	40004400 	.word	0x40004400

0800233c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	@ 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1d      	ldr	r2, [pc, #116]	@ (80023d0 <HAL_UART_MspInit+0x94>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d133      	bne.n	80023c6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	4b1c      	ldr	r3, [pc, #112]	@ (80023d4 <HAL_UART_MspInit+0x98>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	4a1b      	ldr	r2, [pc, #108]	@ (80023d4 <HAL_UART_MspInit+0x98>)
 8002368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800236c:	6413      	str	r3, [r2, #64]	@ 0x40
 800236e:	4b19      	ldr	r3, [pc, #100]	@ (80023d4 <HAL_UART_MspInit+0x98>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <HAL_UART_MspInit+0x98>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	4a14      	ldr	r2, [pc, #80]	@ (80023d4 <HAL_UART_MspInit+0x98>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6313      	str	r3, [r2, #48]	@ 0x30
 800238a:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <HAL_UART_MspInit+0x98>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002396:	230c      	movs	r3, #12
 8002398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023a6:	2307      	movs	r3, #7
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4619      	mov	r1, r3
 80023b0:	4809      	ldr	r0, [pc, #36]	@ (80023d8 <HAL_UART_MspInit+0x9c>)
 80023b2:	f000 fa77 	bl	80028a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	2026      	movs	r0, #38	@ 0x26
 80023bc:	f000 f9a9 	bl	8002712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023c0:	2026      	movs	r0, #38	@ 0x26
 80023c2:	f000 f9c2 	bl	800274a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023c6:	bf00      	nop
 80023c8:	3728      	adds	r7, #40	@ 0x28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40004400 	.word	0x40004400
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40020000 	.word	0x40020000

080023dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002414 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023e0:	f7ff ff24 	bl	800222c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023e4:	480c      	ldr	r0, [pc, #48]	@ (8002418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023e6:	490d      	ldr	r1, [pc, #52]	@ (800241c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023ec:	e002      	b.n	80023f4 <LoopCopyDataInit>

080023ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f2:	3304      	adds	r3, #4

080023f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f8:	d3f9      	bcc.n	80023ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002400:	e001      	b.n	8002406 <LoopFillZerobss>

08002402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002404:	3204      	adds	r2, #4

08002406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002408:	d3fb      	bcc.n	8002402 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800240a:	f004 fd61 	bl	8006ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800240e:	f7ff fa13 	bl	8001838 <main>
  bx  lr    
 8002412:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800241c:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002420:	0800964c 	.word	0x0800964c
  ldr r2, =_sbss
 8002424:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002428:	200006c8 	.word	0x200006c8

0800242c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800242c:	e7fe      	b.n	800242c <ADC_IRQHandler>
	...

08002430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002434:	4b0e      	ldr	r3, [pc, #56]	@ (8002470 <HAL_Init+0x40>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0d      	ldr	r2, [pc, #52]	@ (8002470 <HAL_Init+0x40>)
 800243a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800243e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002440:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <HAL_Init+0x40>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0a      	ldr	r2, [pc, #40]	@ (8002470 <HAL_Init+0x40>)
 8002446:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800244a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800244c:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a07      	ldr	r2, [pc, #28]	@ (8002470 <HAL_Init+0x40>)
 8002452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002458:	2003      	movs	r0, #3
 800245a:	f000 f94f 	bl	80026fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800245e:	2000      	movs	r0, #0
 8002460:	f000 f808 	bl	8002474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002464:	f7ff fdb0 	bl	8001fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023c00 	.word	0x40023c00

08002474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800247c:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <HAL_InitTick+0x54>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b12      	ldr	r3, [pc, #72]	@ (80024cc <HAL_InitTick+0x58>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800248a:	fbb3 f3f1 	udiv	r3, r3, r1
 800248e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f967 	bl	8002766 <HAL_SYSTICK_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e00e      	b.n	80024c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b0f      	cmp	r3, #15
 80024a6:	d80a      	bhi.n	80024be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a8:	2200      	movs	r2, #0
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f000 f92f 	bl	8002712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b4:	4a06      	ldr	r2, [pc, #24]	@ (80024d0 <HAL_InitTick+0x5c>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000030 	.word	0x20000030
 80024cc:	20000038 	.word	0x20000038
 80024d0:	20000034 	.word	0x20000034

080024d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_IncTick+0x20>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <HAL_IncTick+0x24>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a04      	ldr	r2, [pc, #16]	@ (80024f8 <HAL_IncTick+0x24>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000038 	.word	0x20000038
 80024f8:	20000578 	.word	0x20000578

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	@ (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000578 	.word	0x20000578

08002514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff ffee 	bl	80024fc <HAL_GetTick>
 8002520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d005      	beq.n	800253a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800252e:	4b0a      	ldr	r3, [pc, #40]	@ (8002558 <HAL_Delay+0x44>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800253a:	bf00      	nop
 800253c:	f7ff ffde 	bl	80024fc <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	429a      	cmp	r2, r3
 800254a:	d8f7      	bhi.n	800253c <HAL_Delay+0x28>
  {
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000038 	.word	0x20000038

0800255c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002578:	4013      	ands	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002584:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800258c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258e:	4a04      	ldr	r2, [pc, #16]	@ (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	60d3      	str	r3, [r2, #12]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a8:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <__NVIC_GetPriorityGrouping+0x18>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	f003 0307 	and.w	r3, r3, #7
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	db0b      	blt.n	80025ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	f003 021f 	and.w	r2, r3, #31
 80025d8:	4907      	ldr	r1, [pc, #28]	@ (80025f8 <__NVIC_EnableIRQ+0x38>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	2001      	movs	r0, #1
 80025e2:	fa00 f202 	lsl.w	r2, r0, r2
 80025e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000e100 	.word	0xe000e100

080025fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db0a      	blt.n	8002626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	490c      	ldr	r1, [pc, #48]	@ (8002648 <__NVIC_SetPriority+0x4c>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	440b      	add	r3, r1
 8002620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002624:	e00a      	b.n	800263c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4908      	ldr	r1, [pc, #32]	@ (800264c <__NVIC_SetPriority+0x50>)
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	3b04      	subs	r3, #4
 8002634:	0112      	lsls	r2, r2, #4
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	440b      	add	r3, r1
 800263a:	761a      	strb	r2, [r3, #24]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000e100 	.word	0xe000e100
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	@ 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f1c3 0307 	rsb	r3, r3, #7
 800266a:	2b04      	cmp	r3, #4
 800266c:	bf28      	it	cs
 800266e:	2304      	movcs	r3, #4
 8002670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3304      	adds	r3, #4
 8002676:	2b06      	cmp	r3, #6
 8002678:	d902      	bls.n	8002680 <NVIC_EncodePriority+0x30>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3b03      	subs	r3, #3
 800267e:	e000      	b.n	8002682 <NVIC_EncodePriority+0x32>
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	f04f 32ff 	mov.w	r2, #4294967295
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	401a      	ands	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	43d9      	mvns	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	4313      	orrs	r3, r2
         );
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3724      	adds	r7, #36	@ 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026c8:	d301      	bcc.n	80026ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ca:	2301      	movs	r3, #1
 80026cc:	e00f      	b.n	80026ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ce:	4a0a      	ldr	r2, [pc, #40]	@ (80026f8 <SysTick_Config+0x40>)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d6:	210f      	movs	r1, #15
 80026d8:	f04f 30ff 	mov.w	r0, #4294967295
 80026dc:	f7ff ff8e 	bl	80025fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e0:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <SysTick_Config+0x40>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e6:	4b04      	ldr	r3, [pc, #16]	@ (80026f8 <SysTick_Config+0x40>)
 80026e8:	2207      	movs	r2, #7
 80026ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	e000e010 	.word	0xe000e010

080026fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ff29 	bl	800255c <__NVIC_SetPriorityGrouping>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002712:	b580      	push	{r7, lr}
 8002714:	b086      	sub	sp, #24
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002724:	f7ff ff3e 	bl	80025a4 <__NVIC_GetPriorityGrouping>
 8002728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	6978      	ldr	r0, [r7, #20]
 8002730:	f7ff ff8e 	bl	8002650 <NVIC_EncodePriority>
 8002734:	4602      	mov	r2, r0
 8002736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff5d 	bl	80025fc <__NVIC_SetPriority>
}
 8002742:	bf00      	nop
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff31 	bl	80025c0 <__NVIC_EnableIRQ>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff ffa2 	bl	80026b8 <SysTick_Config>
 8002774:	4603      	mov	r3, r0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800278c:	f7ff feb6 	bl	80024fc <HAL_GetTick>
 8002790:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d008      	beq.n	80027b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2280      	movs	r2, #128	@ 0x80
 80027a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e052      	b.n	8002856 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0216 	bic.w	r2, r2, #22
 80027be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d103      	bne.n	80027e0 <HAL_DMA_Abort+0x62>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d007      	beq.n	80027f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0208 	bic.w	r2, r2, #8
 80027ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002800:	e013      	b.n	800282a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002802:	f7ff fe7b 	bl	80024fc <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b05      	cmp	r3, #5
 800280e:	d90c      	bls.n	800282a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2203      	movs	r2, #3
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e015      	b.n	8002856 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1e4      	bne.n	8002802 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283c:	223f      	movs	r2, #63	@ 0x3f
 800283e:	409a      	lsls	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d004      	beq.n	800287c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2280      	movs	r2, #128	@ 0x80
 8002876:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e00c      	b.n	8002896 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2205      	movs	r2, #5
 8002880:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	@ 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	e165      	b.n	8002b8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	429a      	cmp	r2, r3
 80028da:	f040 8154 	bne.w	8002b86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d005      	beq.n	80028f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d130      	bne.n	8002958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	2203      	movs	r2, #3
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800292c:	2201      	movs	r2, #1
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	f003 0201 	and.w	r2, r3, #1
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b03      	cmp	r3, #3
 8002962:	d017      	beq.n	8002994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d123      	bne.n	80029e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	08da      	lsrs	r2, r3, #3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3208      	adds	r2, #8
 80029a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	220f      	movs	r2, #15
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	08da      	lsrs	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3208      	adds	r2, #8
 80029e2:	69b9      	ldr	r1, [r7, #24]
 80029e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2203      	movs	r2, #3
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0203 	and.w	r2, r3, #3
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80ae 	beq.w	8002b86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ba4 <HAL_GPIO_Init+0x300>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	4a5c      	ldr	r2, [pc, #368]	@ (8002ba4 <HAL_GPIO_Init+0x300>)
 8002a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a3a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ba4 <HAL_GPIO_Init+0x300>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a46:	4a58      	ldr	r2, [pc, #352]	@ (8002ba8 <HAL_GPIO_Init+0x304>)
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	089b      	lsrs	r3, r3, #2
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	220f      	movs	r2, #15
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4f      	ldr	r2, [pc, #316]	@ (8002bac <HAL_GPIO_Init+0x308>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d025      	beq.n	8002abe <HAL_GPIO_Init+0x21a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4e      	ldr	r2, [pc, #312]	@ (8002bb0 <HAL_GPIO_Init+0x30c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d01f      	beq.n	8002aba <HAL_GPIO_Init+0x216>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4d      	ldr	r2, [pc, #308]	@ (8002bb4 <HAL_GPIO_Init+0x310>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d019      	beq.n	8002ab6 <HAL_GPIO_Init+0x212>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4c      	ldr	r2, [pc, #304]	@ (8002bb8 <HAL_GPIO_Init+0x314>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d013      	beq.n	8002ab2 <HAL_GPIO_Init+0x20e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002bbc <HAL_GPIO_Init+0x318>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00d      	beq.n	8002aae <HAL_GPIO_Init+0x20a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4a      	ldr	r2, [pc, #296]	@ (8002bc0 <HAL_GPIO_Init+0x31c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d007      	beq.n	8002aaa <HAL_GPIO_Init+0x206>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a49      	ldr	r2, [pc, #292]	@ (8002bc4 <HAL_GPIO_Init+0x320>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <HAL_GPIO_Init+0x202>
 8002aa2:	2306      	movs	r3, #6
 8002aa4:	e00c      	b.n	8002ac0 <HAL_GPIO_Init+0x21c>
 8002aa6:	2307      	movs	r3, #7
 8002aa8:	e00a      	b.n	8002ac0 <HAL_GPIO_Init+0x21c>
 8002aaa:	2305      	movs	r3, #5
 8002aac:	e008      	b.n	8002ac0 <HAL_GPIO_Init+0x21c>
 8002aae:	2304      	movs	r3, #4
 8002ab0:	e006      	b.n	8002ac0 <HAL_GPIO_Init+0x21c>
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e004      	b.n	8002ac0 <HAL_GPIO_Init+0x21c>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e002      	b.n	8002ac0 <HAL_GPIO_Init+0x21c>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <HAL_GPIO_Init+0x21c>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	f002 0203 	and.w	r2, r2, #3
 8002ac6:	0092      	lsls	r2, r2, #2
 8002ac8:	4093      	lsls	r3, r2
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ad0:	4935      	ldr	r1, [pc, #212]	@ (8002ba8 <HAL_GPIO_Init+0x304>)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ade:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc8 <HAL_GPIO_Init+0x324>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b02:	4a31      	ldr	r2, [pc, #196]	@ (8002bc8 <HAL_GPIO_Init+0x324>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b08:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc8 <HAL_GPIO_Init+0x324>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b2c:	4a26      	ldr	r2, [pc, #152]	@ (8002bc8 <HAL_GPIO_Init+0x324>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b32:	4b25      	ldr	r3, [pc, #148]	@ (8002bc8 <HAL_GPIO_Init+0x324>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b56:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc8 <HAL_GPIO_Init+0x324>)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc8 <HAL_GPIO_Init+0x324>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b80:	4a11      	ldr	r2, [pc, #68]	@ (8002bc8 <HAL_GPIO_Init+0x324>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b0f      	cmp	r3, #15
 8002b90:	f67f ae96 	bls.w	80028c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	3724      	adds	r7, #36	@ 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40013800 	.word	0x40013800
 8002bac:	40020000 	.word	0x40020000
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	40020800 	.word	0x40020800
 8002bb8:	40020c00 	.word	0x40020c00
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40021400 	.word	0x40021400
 8002bc4:	40021800 	.word	0x40021800
 8002bc8:	40013c00 	.word	0x40013c00

08002bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	887b      	ldrh	r3, [r7, #2]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	e001      	b.n	8002bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bea:	2300      	movs	r3, #0
 8002bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	807b      	strh	r3, [r7, #2]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c0c:	787b      	ldrb	r3, [r7, #1]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c18:	e003      	b.n	8002c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c1a:	887b      	ldrh	r3, [r7, #2]
 8002c1c:	041a      	lsls	r2, r3, #16
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	619a      	str	r2, [r3, #24]
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e12b      	b.n	8002e9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe fada 	bl	8001210 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	@ 0x24
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c94:	f001 f8e2 	bl	8003e5c <HAL_RCC_GetPCLK1Freq>
 8002c98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a81      	ldr	r2, [pc, #516]	@ (8002ea4 <HAL_I2C_Init+0x274>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d807      	bhi.n	8002cb4 <HAL_I2C_Init+0x84>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a80      	ldr	r2, [pc, #512]	@ (8002ea8 <HAL_I2C_Init+0x278>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	bf94      	ite	ls
 8002cac:	2301      	movls	r3, #1
 8002cae:	2300      	movhi	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	e006      	b.n	8002cc2 <HAL_I2C_Init+0x92>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a7d      	ldr	r2, [pc, #500]	@ (8002eac <HAL_I2C_Init+0x27c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	bf94      	ite	ls
 8002cbc:	2301      	movls	r3, #1
 8002cbe:	2300      	movhi	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0e7      	b.n	8002e9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a78      	ldr	r2, [pc, #480]	@ (8002eb0 <HAL_I2C_Init+0x280>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0c9b      	lsrs	r3, r3, #18
 8002cd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a6a      	ldr	r2, [pc, #424]	@ (8002ea4 <HAL_I2C_Init+0x274>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d802      	bhi.n	8002d04 <HAL_I2C_Init+0xd4>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3301      	adds	r3, #1
 8002d02:	e009      	b.n	8002d18 <HAL_I2C_Init+0xe8>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	4a69      	ldr	r2, [pc, #420]	@ (8002eb4 <HAL_I2C_Init+0x284>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	3301      	adds	r3, #1
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	495c      	ldr	r1, [pc, #368]	@ (8002ea4 <HAL_I2C_Init+0x274>)
 8002d34:	428b      	cmp	r3, r1
 8002d36:	d819      	bhi.n	8002d6c <HAL_I2C_Init+0x13c>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e59      	subs	r1, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d46:	1c59      	adds	r1, r3, #1
 8002d48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_I2C_Init+0x138>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1e59      	subs	r1, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d60:	3301      	adds	r3, #1
 8002d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d66:	e051      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	e04f      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d111      	bne.n	8002d98 <HAL_I2C_Init+0x168>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e58      	subs	r0, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e012      	b.n	8002dbe <HAL_I2C_Init+0x18e>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e58      	subs	r0, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	0099      	lsls	r1, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Init+0x196>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e022      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10e      	bne.n	8002dec <HAL_I2C_Init+0x1bc>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1e58      	subs	r0, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6859      	ldr	r1, [r3, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	440b      	add	r3, r1
 8002ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dea:	e00f      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1e58      	subs	r0, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	0099      	lsls	r1, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	6809      	ldr	r1, [r1, #0]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6911      	ldr	r1, [r2, #16]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	4311      	orrs	r1, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	000186a0 	.word	0x000186a0
 8002ea8:	001e847f 	.word	0x001e847f
 8002eac:	003d08ff 	.word	0x003d08ff
 8002eb0:	431bde83 	.word	0x431bde83
 8002eb4:	10624dd3 	.word	0x10624dd3

08002eb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	4608      	mov	r0, r1
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	817b      	strh	r3, [r7, #10]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	813b      	strh	r3, [r7, #8]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ed2:	f7ff fb13 	bl	80024fc <HAL_GetTick>
 8002ed6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	f040 80d9 	bne.w	8003098 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	2319      	movs	r3, #25
 8002eec:	2201      	movs	r2, #1
 8002eee:	496d      	ldr	r1, [pc, #436]	@ (80030a4 <HAL_I2C_Mem_Write+0x1ec>)
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fc8b 	bl	800380c <I2C_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002efc:	2302      	movs	r3, #2
 8002efe:	e0cc      	b.n	800309a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_I2C_Mem_Write+0x56>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e0c5      	b.n	800309a <HAL_I2C_Mem_Write+0x1e2>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d007      	beq.n	8002f34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2221      	movs	r2, #33	@ 0x21
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2240      	movs	r2, #64	@ 0x40
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a3a      	ldr	r2, [r7, #32]
 8002f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4a4d      	ldr	r2, [pc, #308]	@ (80030a8 <HAL_I2C_Mem_Write+0x1f0>)
 8002f74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f76:	88f8      	ldrh	r0, [r7, #6]
 8002f78:	893a      	ldrh	r2, [r7, #8]
 8002f7a:	8979      	ldrh	r1, [r7, #10]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	9301      	str	r3, [sp, #4]
 8002f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	4603      	mov	r3, r0
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 fac2 	bl	8003510 <I2C_RequestMemoryWrite>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d052      	beq.n	8003038 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e081      	b.n	800309a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fd50 	bl	8003a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d107      	bne.n	8002fbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e06b      	b.n	800309a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	781a      	ldrb	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d11b      	bne.n	8003038 <HAL_I2C_Mem_Write+0x180>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003004:	2b00      	cmp	r3, #0
 8003006:	d017      	beq.n	8003038 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	781a      	ldrb	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1aa      	bne.n	8002f96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fd43 	bl	8003ad0 <I2C_WaitOnBTFFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00d      	beq.n	800306c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003054:	2b04      	cmp	r3, #4
 8003056:	d107      	bne.n	8003068 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003066:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e016      	b.n	800309a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800307a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	e000      	b.n	800309a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003098:	2302      	movs	r3, #2
  }
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	00100002 	.word	0x00100002
 80030a8:	ffff0000 	.word	0xffff0000

080030ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08c      	sub	sp, #48	@ 0x30
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	4608      	mov	r0, r1
 80030b6:	4611      	mov	r1, r2
 80030b8:	461a      	mov	r2, r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	817b      	strh	r3, [r7, #10]
 80030be:	460b      	mov	r3, r1
 80030c0:	813b      	strh	r3, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030c6:	f7ff fa19 	bl	80024fc <HAL_GetTick>
 80030ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	f040 8214 	bne.w	8003502 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	2319      	movs	r3, #25
 80030e0:	2201      	movs	r2, #1
 80030e2:	497b      	ldr	r1, [pc, #492]	@ (80032d0 <HAL_I2C_Mem_Read+0x224>)
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fb91 	bl	800380c <I2C_WaitOnFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80030f0:	2302      	movs	r3, #2
 80030f2:	e207      	b.n	8003504 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_I2C_Mem_Read+0x56>
 80030fe:	2302      	movs	r3, #2
 8003100:	e200      	b.n	8003504 <HAL_I2C_Mem_Read+0x458>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b01      	cmp	r3, #1
 8003116:	d007      	beq.n	8003128 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003136:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2222      	movs	r2, #34	@ 0x22
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2240      	movs	r2, #64	@ 0x40
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003152:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003158:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4a5b      	ldr	r2, [pc, #364]	@ (80032d4 <HAL_I2C_Mem_Read+0x228>)
 8003168:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800316a:	88f8      	ldrh	r0, [r7, #6]
 800316c:	893a      	ldrh	r2, [r7, #8]
 800316e:	8979      	ldrh	r1, [r7, #10]
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	4603      	mov	r3, r0
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 fa5e 	bl	800363c <I2C_RequestMemoryRead>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e1bc      	b.n	8003504 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318e:	2b00      	cmp	r3, #0
 8003190:	d113      	bne.n	80031ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003192:	2300      	movs	r3, #0
 8003194:	623b      	str	r3, [r7, #32]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	623b      	str	r3, [r7, #32]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	623b      	str	r3, [r7, #32]
 80031a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	e190      	b.n	80034dc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d11b      	bne.n	80031fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	61fb      	str	r3, [r7, #28]
 80031e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e170      	b.n	80034dc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d11b      	bne.n	800323a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003210:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003220:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	e150      	b.n	80034dc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003250:	e144      	b.n	80034dc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003256:	2b03      	cmp	r3, #3
 8003258:	f200 80f1 	bhi.w	800343e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003260:	2b01      	cmp	r3, #1
 8003262:	d123      	bne.n	80032ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003266:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 fc79 	bl	8003b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e145      	b.n	8003504 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032aa:	e117      	b.n	80034dc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d14e      	bne.n	8003352 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ba:	2200      	movs	r2, #0
 80032bc:	4906      	ldr	r1, [pc, #24]	@ (80032d8 <HAL_I2C_Mem_Read+0x22c>)
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 faa4 	bl	800380c <I2C_WaitOnFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e11a      	b.n	8003504 <HAL_I2C_Mem_Read+0x458>
 80032ce:	bf00      	nop
 80032d0:	00100002 	.word	0x00100002
 80032d4:	ffff0000 	.word	0xffff0000
 80032d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003350:	e0c4      	b.n	80034dc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003358:	2200      	movs	r2, #0
 800335a:	496c      	ldr	r1, [pc, #432]	@ (800350c <HAL_I2C_Mem_Read+0x460>)
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 fa55 	bl	800380c <I2C_WaitOnFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0cb      	b.n	8003504 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800337a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b4:	2200      	movs	r2, #0
 80033b6:	4955      	ldr	r1, [pc, #340]	@ (800350c <HAL_I2C_Mem_Read+0x460>)
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 fa27 	bl	800380c <I2C_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e09d      	b.n	8003504 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800343c:	e04e      	b.n	80034dc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800343e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003440:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fb8c 	bl	8003b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e058      	b.n	8003504 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b04      	cmp	r3, #4
 8003490:	d124      	bne.n	80034dc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003496:	2b03      	cmp	r3, #3
 8003498:	d107      	bne.n	80034aa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034a8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f47f aeb6 	bne.w	8003252 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	e000      	b.n	8003504 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003502:	2302      	movs	r3, #2
  }
}
 8003504:	4618      	mov	r0, r3
 8003506:	3728      	adds	r7, #40	@ 0x28
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	00010004 	.word	0x00010004

08003510 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	4608      	mov	r0, r1
 800351a:	4611      	mov	r1, r2
 800351c:	461a      	mov	r2, r3
 800351e:	4603      	mov	r3, r0
 8003520:	817b      	strh	r3, [r7, #10]
 8003522:	460b      	mov	r3, r1
 8003524:	813b      	strh	r3, [r7, #8]
 8003526:	4613      	mov	r3, r2
 8003528:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003538:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	2200      	movs	r2, #0
 8003542:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f960 	bl	800380c <I2C_WaitOnFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00d      	beq.n	800356e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800355c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003560:	d103      	bne.n	800356a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003568:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e05f      	b.n	800362e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800356e:	897b      	ldrh	r3, [r7, #10]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800357c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	6a3a      	ldr	r2, [r7, #32]
 8003582:	492d      	ldr	r1, [pc, #180]	@ (8003638 <I2C_RequestMemoryWrite+0x128>)
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f9bb 	bl	8003900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e04c      	b.n	800362e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ac:	6a39      	ldr	r1, [r7, #32]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 fa46 	bl	8003a40 <I2C_WaitOnTXEFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d107      	bne.n	80035d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e02b      	b.n	800362e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d105      	bne.n	80035e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035dc:	893b      	ldrh	r3, [r7, #8]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	611a      	str	r2, [r3, #16]
 80035e6:	e021      	b.n	800362c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035e8:	893b      	ldrh	r3, [r7, #8]
 80035ea:	0a1b      	lsrs	r3, r3, #8
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f8:	6a39      	ldr	r1, [r7, #32]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fa20 	bl	8003a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00d      	beq.n	8003622 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	2b04      	cmp	r3, #4
 800360c:	d107      	bne.n	800361e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800361c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e005      	b.n	800362e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003622:	893b      	ldrh	r3, [r7, #8]
 8003624:	b2da      	uxtb	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	00010002 	.word	0x00010002

0800363c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	461a      	mov	r2, r3
 800364a:	4603      	mov	r3, r0
 800364c:	817b      	strh	r3, [r7, #10]
 800364e:	460b      	mov	r3, r1
 8003650:	813b      	strh	r3, [r7, #8]
 8003652:	4613      	mov	r3, r2
 8003654:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003664:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003674:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	2200      	movs	r2, #0
 800367e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f8c2 	bl	800380c <I2C_WaitOnFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00d      	beq.n	80036aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800369c:	d103      	bne.n	80036a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e0aa      	b.n	8003800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036aa:	897b      	ldrh	r3, [r7, #10]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	6a3a      	ldr	r2, [r7, #32]
 80036be:	4952      	ldr	r1, [pc, #328]	@ (8003808 <I2C_RequestMemoryRead+0x1cc>)
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f91d 	bl	8003900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e097      	b.n	8003800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e8:	6a39      	ldr	r1, [r7, #32]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f9a8 	bl	8003a40 <I2C_WaitOnTXEFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d107      	bne.n	800370e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800370c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e076      	b.n	8003800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d105      	bne.n	8003724 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003718:	893b      	ldrh	r3, [r7, #8]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	611a      	str	r2, [r3, #16]
 8003722:	e021      	b.n	8003768 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003724:	893b      	ldrh	r3, [r7, #8]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	b29b      	uxth	r3, r3
 800372a:	b2da      	uxtb	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003734:	6a39      	ldr	r1, [r7, #32]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f982 	bl	8003a40 <I2C_WaitOnTXEFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00d      	beq.n	800375e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003746:	2b04      	cmp	r3, #4
 8003748:	d107      	bne.n	800375a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003758:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e050      	b.n	8003800 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800375e:	893b      	ldrh	r3, [r7, #8]
 8003760:	b2da      	uxtb	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800376a:	6a39      	ldr	r1, [r7, #32]
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f967 	bl	8003a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00d      	beq.n	8003794 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	2b04      	cmp	r3, #4
 800377e:	d107      	bne.n	8003790 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800378e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e035      	b.n	8003800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f82b 	bl	800380c <I2C_WaitOnFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00d      	beq.n	80037d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ca:	d103      	bne.n	80037d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e013      	b.n	8003800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037d8:	897b      	ldrh	r3, [r7, #10]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	6a3a      	ldr	r2, [r7, #32]
 80037ec:	4906      	ldr	r1, [pc, #24]	@ (8003808 <I2C_RequestMemoryRead+0x1cc>)
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f886 	bl	8003900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	00010002 	.word	0x00010002

0800380c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800381c:	e048      	b.n	80038b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d044      	beq.n	80038b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003826:	f7fe fe69 	bl	80024fc <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d139      	bne.n	80038b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	0c1b      	lsrs	r3, r3, #16
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	d10d      	bne.n	8003862 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	43da      	mvns	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	4013      	ands	r3, r2
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	461a      	mov	r2, r3
 8003860:	e00c      	b.n	800387c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	43da      	mvns	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4013      	ands	r3, r2
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	bf0c      	ite	eq
 8003874:	2301      	moveq	r3, #1
 8003876:	2300      	movne	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	429a      	cmp	r2, r3
 8003880:	d116      	bne.n	80038b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389c:	f043 0220 	orr.w	r2, r3, #32
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e023      	b.n	80038f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	0c1b      	lsrs	r3, r3, #16
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d10d      	bne.n	80038d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	43da      	mvns	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	4013      	ands	r3, r2
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	e00c      	b.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	43da      	mvns	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4013      	ands	r3, r2
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf0c      	ite	eq
 80038e8:	2301      	moveq	r3, #1
 80038ea:	2300      	movne	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d093      	beq.n	800381e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800390e:	e071      	b.n	80039f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800391e:	d123      	bne.n	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800392e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003938:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003954:	f043 0204 	orr.w	r2, r3, #4
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e067      	b.n	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396e:	d041      	beq.n	80039f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003970:	f7fe fdc4 	bl	80024fc <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	429a      	cmp	r2, r3
 800397e:	d302      	bcc.n	8003986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d136      	bne.n	80039f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d10c      	bne.n	80039aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	43da      	mvns	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4013      	ands	r3, r2
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bf14      	ite	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	2300      	moveq	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	e00b      	b.n	80039c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	43da      	mvns	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4013      	ands	r3, r2
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d016      	beq.n	80039f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e021      	b.n	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	0c1b      	lsrs	r3, r3, #16
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d10c      	bne.n	8003a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	43da      	mvns	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bf14      	ite	ne
 8003a10:	2301      	movne	r3, #1
 8003a12:	2300      	moveq	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	e00b      	b.n	8003a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4013      	ands	r3, r2
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bf14      	ite	ne
 8003a2a:	2301      	movne	r3, #1
 8003a2c:	2300      	moveq	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f47f af6d 	bne.w	8003910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a4c:	e034      	b.n	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f8e3 	bl	8003c1a <I2C_IsAcknowledgeFailed>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e034      	b.n	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d028      	beq.n	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a66:	f7fe fd49 	bl	80024fc <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d302      	bcc.n	8003a7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d11d      	bne.n	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a86:	2b80      	cmp	r3, #128	@ 0x80
 8003a88:	d016      	beq.n	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa4:	f043 0220 	orr.w	r2, r3, #32
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e007      	b.n	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac2:	2b80      	cmp	r3, #128	@ 0x80
 8003ac4:	d1c3      	bne.n	8003a4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003adc:	e034      	b.n	8003b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f89b 	bl	8003c1a <I2C_IsAcknowledgeFailed>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e034      	b.n	8003b58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d028      	beq.n	8003b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af6:	f7fe fd01 	bl	80024fc <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d302      	bcc.n	8003b0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d11d      	bne.n	8003b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d016      	beq.n	8003b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	f043 0220 	orr.w	r2, r3, #32
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e007      	b.n	8003b58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d1c3      	bne.n	8003ade <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b6c:	e049      	b.n	8003c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d119      	bne.n	8003bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0210 	mvn.w	r2, #16
 8003b84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e030      	b.n	8003c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb0:	f7fe fca4 	bl	80024fc <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d302      	bcc.n	8003bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d11d      	bne.n	8003c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd0:	2b40      	cmp	r3, #64	@ 0x40
 8003bd2:	d016      	beq.n	8003c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	f043 0220 	orr.w	r2, r3, #32
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e007      	b.n	8003c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0c:	2b40      	cmp	r3, #64	@ 0x40
 8003c0e:	d1ae      	bne.n	8003b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c30:	d11b      	bne.n	8003c6a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c3a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	f043 0204 	orr.w	r2, r3, #4
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0cc      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c8c:	4b68      	ldr	r3, [pc, #416]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 030f 	and.w	r3, r3, #15
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d90c      	bls.n	8003cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b65      	ldr	r3, [pc, #404]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	4b63      	ldr	r3, [pc, #396]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0b8      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d020      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ccc:	4b59      	ldr	r3, [pc, #356]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4a58      	ldr	r2, [pc, #352]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce4:	4b53      	ldr	r3, [pc, #332]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4a52      	ldr	r2, [pc, #328]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf0:	4b50      	ldr	r3, [pc, #320]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	494d      	ldr	r1, [pc, #308]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d044      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d16:	4b47      	ldr	r3, [pc, #284]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d119      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e07f      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d003      	beq.n	8003d36 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d36:	4b3f      	ldr	r3, [pc, #252]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e06f      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d46:	4b3b      	ldr	r3, [pc, #236]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e067      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d56:	4b37      	ldr	r3, [pc, #220]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f023 0203 	bic.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4934      	ldr	r1, [pc, #208]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d68:	f7fe fbc8 	bl	80024fc <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d70:	f7fe fbc4 	bl	80024fc <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e04f      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	4b2b      	ldr	r3, [pc, #172]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 020c 	and.w	r2, r3, #12
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d1eb      	bne.n	8003d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d98:	4b25      	ldr	r3, [pc, #148]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 030f 	and.w	r3, r3, #15
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d20c      	bcs.n	8003dc0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b22      	ldr	r3, [pc, #136]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b20      	ldr	r3, [pc, #128]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e032      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dcc:	4b19      	ldr	r3, [pc, #100]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4916      	ldr	r1, [pc, #88]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dea:	4b12      	ldr	r3, [pc, #72]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	490e      	ldr	r1, [pc, #56]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dfe:	f000 f855 	bl	8003eac <HAL_RCC_GetSysClockFreq>
 8003e02:	4602      	mov	r2, r0
 8003e04:	4b0b      	ldr	r3, [pc, #44]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	091b      	lsrs	r3, r3, #4
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	490a      	ldr	r1, [pc, #40]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003e10:	5ccb      	ldrb	r3, [r1, r3]
 8003e12:	fa22 f303 	lsr.w	r3, r2, r3
 8003e16:	4a09      	ldr	r2, [pc, #36]	@ (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e1a:	4b09      	ldr	r3, [pc, #36]	@ (8003e40 <HAL_RCC_ClockConfig+0x1c8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe fb28 	bl	8002474 <HAL_InitTick>

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40023c00 	.word	0x40023c00
 8003e34:	40023800 	.word	0x40023800
 8003e38:	08009254 	.word	0x08009254
 8003e3c:	20000030 	.word	0x20000030
 8003e40:	20000034 	.word	0x20000034

08003e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e48:	4b03      	ldr	r3, [pc, #12]	@ (8003e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000030 	.word	0x20000030

08003e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e60:	f7ff fff0 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003e64:	4602      	mov	r2, r0
 8003e66:	4b05      	ldr	r3, [pc, #20]	@ (8003e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	0a9b      	lsrs	r3, r3, #10
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	4903      	ldr	r1, [pc, #12]	@ (8003e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e72:	5ccb      	ldrb	r3, [r1, r3]
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	08009264 	.word	0x08009264

08003e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e88:	f7ff ffdc 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	0b5b      	lsrs	r3, r3, #13
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	4903      	ldr	r1, [pc, #12]	@ (8003ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e9a:	5ccb      	ldrb	r3, [r1, r3]
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	08009264 	.word	0x08009264

08003eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb0:	b0ae      	sub	sp, #184	@ 0xb8
 8003eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed2:	4bcb      	ldr	r3, [pc, #812]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	2b0c      	cmp	r3, #12
 8003edc:	f200 8206 	bhi.w	80042ec <HAL_RCC_GetSysClockFreq+0x440>
 8003ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003f1d 	.word	0x08003f1d
 8003eec:	080042ed 	.word	0x080042ed
 8003ef0:	080042ed 	.word	0x080042ed
 8003ef4:	080042ed 	.word	0x080042ed
 8003ef8:	08003f25 	.word	0x08003f25
 8003efc:	080042ed 	.word	0x080042ed
 8003f00:	080042ed 	.word	0x080042ed
 8003f04:	080042ed 	.word	0x080042ed
 8003f08:	08003f2d 	.word	0x08003f2d
 8003f0c:	080042ed 	.word	0x080042ed
 8003f10:	080042ed 	.word	0x080042ed
 8003f14:	080042ed 	.word	0x080042ed
 8003f18:	0800411d 	.word	0x0800411d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f1c:	4bb9      	ldr	r3, [pc, #740]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f22:	e1e7      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f24:	4bb8      	ldr	r3, [pc, #736]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f2a:	e1e3      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f2c:	4bb4      	ldr	r3, [pc, #720]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f38:	4bb1      	ldr	r3, [pc, #708]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d071      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f44:	4bae      	ldr	r3, [pc, #696]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	099b      	lsrs	r3, r3, #6
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f50:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	462b      	mov	r3, r5
 8003f6e:	f04f 0000 	mov.w	r0, #0
 8003f72:	f04f 0100 	mov.w	r1, #0
 8003f76:	0159      	lsls	r1, r3, #5
 8003f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f7c:	0150      	lsls	r0, r2, #5
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4621      	mov	r1, r4
 8003f84:	1a51      	subs	r1, r2, r1
 8003f86:	6439      	str	r1, [r7, #64]	@ 0x40
 8003f88:	4629      	mov	r1, r5
 8003f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003f9c:	4649      	mov	r1, r9
 8003f9e:	018b      	lsls	r3, r1, #6
 8003fa0:	4641      	mov	r1, r8
 8003fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fa6:	4641      	mov	r1, r8
 8003fa8:	018a      	lsls	r2, r1, #6
 8003faa:	4641      	mov	r1, r8
 8003fac:	1a51      	subs	r1, r2, r1
 8003fae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fb0:	4649      	mov	r1, r9
 8003fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	00cb      	lsls	r3, r1, #3
 8003fc8:	4641      	mov	r1, r8
 8003fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fce:	4641      	mov	r1, r8
 8003fd0:	00ca      	lsls	r2, r1, #3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4622      	mov	r2, r4
 8003fda:	189b      	adds	r3, r3, r2
 8003fdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fde:	462b      	mov	r3, r5
 8003fe0:	460a      	mov	r2, r1
 8003fe2:	eb42 0303 	adc.w	r3, r2, r3
 8003fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	024b      	lsls	r3, r1, #9
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ffe:	4621      	mov	r1, r4
 8004000:	024a      	lsls	r2, r1, #9
 8004002:	4610      	mov	r0, r2
 8004004:	4619      	mov	r1, r3
 8004006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800400a:	2200      	movs	r2, #0
 800400c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004010:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004014:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004018:	f7fc fe36 	bl	8000c88 <__aeabi_uldivmod>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4613      	mov	r3, r2
 8004022:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004026:	e067      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004028:	4b75      	ldr	r3, [pc, #468]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x354>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	099b      	lsrs	r3, r3, #6
 800402e:	2200      	movs	r2, #0
 8004030:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004034:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004038:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800403c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004040:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004042:	2300      	movs	r3, #0
 8004044:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004046:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800404a:	4622      	mov	r2, r4
 800404c:	462b      	mov	r3, r5
 800404e:	f04f 0000 	mov.w	r0, #0
 8004052:	f04f 0100 	mov.w	r1, #0
 8004056:	0159      	lsls	r1, r3, #5
 8004058:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800405c:	0150      	lsls	r0, r2, #5
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4621      	mov	r1, r4
 8004064:	1a51      	subs	r1, r2, r1
 8004066:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004068:	4629      	mov	r1, r5
 800406a:	eb63 0301 	sbc.w	r3, r3, r1
 800406e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800407c:	4649      	mov	r1, r9
 800407e:	018b      	lsls	r3, r1, #6
 8004080:	4641      	mov	r1, r8
 8004082:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004086:	4641      	mov	r1, r8
 8004088:	018a      	lsls	r2, r1, #6
 800408a:	4641      	mov	r1, r8
 800408c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004090:	4649      	mov	r1, r9
 8004092:	eb63 0b01 	sbc.w	fp, r3, r1
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040aa:	4692      	mov	sl, r2
 80040ac:	469b      	mov	fp, r3
 80040ae:	4623      	mov	r3, r4
 80040b0:	eb1a 0303 	adds.w	r3, sl, r3
 80040b4:	623b      	str	r3, [r7, #32]
 80040b6:	462b      	mov	r3, r5
 80040b8:	eb4b 0303 	adc.w	r3, fp, r3
 80040bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80040ca:	4629      	mov	r1, r5
 80040cc:	028b      	lsls	r3, r1, #10
 80040ce:	4621      	mov	r1, r4
 80040d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040d4:	4621      	mov	r1, r4
 80040d6:	028a      	lsls	r2, r1, #10
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040e0:	2200      	movs	r2, #0
 80040e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80040e4:	677a      	str	r2, [r7, #116]	@ 0x74
 80040e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80040ea:	f7fc fdcd 	bl	8000c88 <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4613      	mov	r3, r2
 80040f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040f8:	4b41      	ldr	r3, [pc, #260]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x354>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	3301      	adds	r3, #1
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800410a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800410e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004112:	fbb2 f3f3 	udiv	r3, r2, r3
 8004116:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800411a:	e0eb      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800411c:	4b38      	ldr	r3, [pc, #224]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x354>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004124:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004128:	4b35      	ldr	r3, [pc, #212]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x354>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d06b      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004134:	4b32      	ldr	r3, [pc, #200]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x354>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	099b      	lsrs	r3, r3, #6
 800413a:	2200      	movs	r2, #0
 800413c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800413e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004140:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004146:	663b      	str	r3, [r7, #96]	@ 0x60
 8004148:	2300      	movs	r3, #0
 800414a:	667b      	str	r3, [r7, #100]	@ 0x64
 800414c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004150:	4622      	mov	r2, r4
 8004152:	462b      	mov	r3, r5
 8004154:	f04f 0000 	mov.w	r0, #0
 8004158:	f04f 0100 	mov.w	r1, #0
 800415c:	0159      	lsls	r1, r3, #5
 800415e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004162:	0150      	lsls	r0, r2, #5
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4621      	mov	r1, r4
 800416a:	1a51      	subs	r1, r2, r1
 800416c:	61b9      	str	r1, [r7, #24]
 800416e:	4629      	mov	r1, r5
 8004170:	eb63 0301 	sbc.w	r3, r3, r1
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004182:	4659      	mov	r1, fp
 8004184:	018b      	lsls	r3, r1, #6
 8004186:	4651      	mov	r1, sl
 8004188:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800418c:	4651      	mov	r1, sl
 800418e:	018a      	lsls	r2, r1, #6
 8004190:	4651      	mov	r1, sl
 8004192:	ebb2 0801 	subs.w	r8, r2, r1
 8004196:	4659      	mov	r1, fp
 8004198:	eb63 0901 	sbc.w	r9, r3, r1
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041b0:	4690      	mov	r8, r2
 80041b2:	4699      	mov	r9, r3
 80041b4:	4623      	mov	r3, r4
 80041b6:	eb18 0303 	adds.w	r3, r8, r3
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	462b      	mov	r3, r5
 80041be:	eb49 0303 	adc.w	r3, r9, r3
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80041d0:	4629      	mov	r1, r5
 80041d2:	024b      	lsls	r3, r1, #9
 80041d4:	4621      	mov	r1, r4
 80041d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041da:	4621      	mov	r1, r4
 80041dc:	024a      	lsls	r2, r1, #9
 80041de:	4610      	mov	r0, r2
 80041e0:	4619      	mov	r1, r3
 80041e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041e6:	2200      	movs	r2, #0
 80041e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80041ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80041f0:	f7fc fd4a 	bl	8000c88 <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4613      	mov	r3, r2
 80041fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041fe:	e065      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0x420>
 8004200:	40023800 	.word	0x40023800
 8004204:	00f42400 	.word	0x00f42400
 8004208:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420c:	4b3d      	ldr	r3, [pc, #244]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x458>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	099b      	lsrs	r3, r3, #6
 8004212:	2200      	movs	r2, #0
 8004214:	4618      	mov	r0, r3
 8004216:	4611      	mov	r1, r2
 8004218:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800421c:	653b      	str	r3, [r7, #80]	@ 0x50
 800421e:	2300      	movs	r3, #0
 8004220:	657b      	str	r3, [r7, #84]	@ 0x54
 8004222:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004226:	4642      	mov	r2, r8
 8004228:	464b      	mov	r3, r9
 800422a:	f04f 0000 	mov.w	r0, #0
 800422e:	f04f 0100 	mov.w	r1, #0
 8004232:	0159      	lsls	r1, r3, #5
 8004234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004238:	0150      	lsls	r0, r2, #5
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4641      	mov	r1, r8
 8004240:	1a51      	subs	r1, r2, r1
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	4649      	mov	r1, r9
 8004246:	eb63 0301 	sbc.w	r3, r3, r1
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004258:	4659      	mov	r1, fp
 800425a:	018b      	lsls	r3, r1, #6
 800425c:	4651      	mov	r1, sl
 800425e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004262:	4651      	mov	r1, sl
 8004264:	018a      	lsls	r2, r1, #6
 8004266:	4651      	mov	r1, sl
 8004268:	1a54      	subs	r4, r2, r1
 800426a:	4659      	mov	r1, fp
 800426c:	eb63 0501 	sbc.w	r5, r3, r1
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	00eb      	lsls	r3, r5, #3
 800427a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800427e:	00e2      	lsls	r2, r4, #3
 8004280:	4614      	mov	r4, r2
 8004282:	461d      	mov	r5, r3
 8004284:	4643      	mov	r3, r8
 8004286:	18e3      	adds	r3, r4, r3
 8004288:	603b      	str	r3, [r7, #0]
 800428a:	464b      	mov	r3, r9
 800428c:	eb45 0303 	adc.w	r3, r5, r3
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800429e:	4629      	mov	r1, r5
 80042a0:	028b      	lsls	r3, r1, #10
 80042a2:	4621      	mov	r1, r4
 80042a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042a8:	4621      	mov	r1, r4
 80042aa:	028a      	lsls	r2, r1, #10
 80042ac:	4610      	mov	r0, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042b4:	2200      	movs	r2, #0
 80042b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80042ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042be:	f7fc fce3 	bl	8000c88 <__aeabi_uldivmod>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4613      	mov	r3, r2
 80042c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80042cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x458>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	0f1b      	lsrs	r3, r3, #28
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80042da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042ea:	e003      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042ec:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x45c>)
 80042ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	37b8      	adds	r7, #184	@ 0xb8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800
 8004308:	00f42400 	.word	0x00f42400

0800430c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e28d      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 8083 	beq.w	8004432 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800432c:	4b94      	ldr	r3, [pc, #592]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 030c 	and.w	r3, r3, #12
 8004334:	2b04      	cmp	r3, #4
 8004336:	d019      	beq.n	800436c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004338:	4b91      	ldr	r3, [pc, #580]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004340:	2b08      	cmp	r3, #8
 8004342:	d106      	bne.n	8004352 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004344:	4b8e      	ldr	r3, [pc, #568]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800434c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004350:	d00c      	beq.n	800436c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004352:	4b8b      	ldr	r3, [pc, #556]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800435a:	2b0c      	cmp	r3, #12
 800435c:	d112      	bne.n	8004384 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800435e:	4b88      	ldr	r3, [pc, #544]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004366:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800436a:	d10b      	bne.n	8004384 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436c:	4b84      	ldr	r3, [pc, #528]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d05b      	beq.n	8004430 <HAL_RCC_OscConfig+0x124>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d157      	bne.n	8004430 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e25a      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800438c:	d106      	bne.n	800439c <HAL_RCC_OscConfig+0x90>
 800438e:	4b7c      	ldr	r3, [pc, #496]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a7b      	ldr	r2, [pc, #492]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 8004394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	e01d      	b.n	80043d8 <HAL_RCC_OscConfig+0xcc>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCC_OscConfig+0xb4>
 80043a6:	4b76      	ldr	r3, [pc, #472]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a75      	ldr	r2, [pc, #468]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 80043ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	4b73      	ldr	r3, [pc, #460]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a72      	ldr	r2, [pc, #456]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e00b      	b.n	80043d8 <HAL_RCC_OscConfig+0xcc>
 80043c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 80043c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	4b6c      	ldr	r3, [pc, #432]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a6b      	ldr	r2, [pc, #428]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 80043d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d013      	beq.n	8004408 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fe f88c 	bl	80024fc <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e8:	f7fe f888 	bl	80024fc <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	@ 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e21f      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	4b61      	ldr	r3, [pc, #388]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0xdc>
 8004406:	e014      	b.n	8004432 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fe f878 	bl	80024fc <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004410:	f7fe f874 	bl	80024fc <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	@ 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e20b      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004422:	4b57      	ldr	r3, [pc, #348]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x104>
 800442e:	e000      	b.n	8004432 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d06f      	beq.n	800451e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800443e:	4b50      	ldr	r3, [pc, #320]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b00      	cmp	r3, #0
 8004448:	d017      	beq.n	800447a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800444a:	4b4d      	ldr	r3, [pc, #308]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004452:	2b08      	cmp	r3, #8
 8004454:	d105      	bne.n	8004462 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004456:	4b4a      	ldr	r3, [pc, #296]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004462:	4b47      	ldr	r3, [pc, #284]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800446a:	2b0c      	cmp	r3, #12
 800446c:	d11c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446e:	4b44      	ldr	r3, [pc, #272]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d116      	bne.n	80044a8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447a:	4b41      	ldr	r3, [pc, #260]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <HAL_RCC_OscConfig+0x186>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d001      	beq.n	8004492 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e1d3      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004492:	4b3b      	ldr	r3, [pc, #236]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4937      	ldr	r1, [pc, #220]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a6:	e03a      	b.n	800451e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d020      	beq.n	80044f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b0:	4b34      	ldr	r3, [pc, #208]	@ (8004584 <HAL_RCC_OscConfig+0x278>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b6:	f7fe f821 	bl	80024fc <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044be:	f7fe f81d 	bl	80024fc <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e1b4      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044dc:	4b28      	ldr	r3, [pc, #160]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	4925      	ldr	r1, [pc, #148]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	600b      	str	r3, [r1, #0]
 80044f0:	e015      	b.n	800451e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f2:	4b24      	ldr	r3, [pc, #144]	@ (8004584 <HAL_RCC_OscConfig+0x278>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fe f800 	bl	80024fc <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004500:	f7fd fffc 	bl	80024fc <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e193      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004512:	4b1b      	ldr	r3, [pc, #108]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d036      	beq.n	8004598 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d016      	beq.n	8004560 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004532:	4b15      	ldr	r3, [pc, #84]	@ (8004588 <HAL_RCC_OscConfig+0x27c>)
 8004534:	2201      	movs	r2, #1
 8004536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fd ffe0 	bl	80024fc <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004540:	f7fd ffdc 	bl	80024fc <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e173      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004552:	4b0b      	ldr	r3, [pc, #44]	@ (8004580 <HAL_RCC_OscConfig+0x274>)
 8004554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0x234>
 800455e:	e01b      	b.n	8004598 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004560:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <HAL_RCC_OscConfig+0x27c>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004566:	f7fd ffc9 	bl	80024fc <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800456c:	e00e      	b.n	800458c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800456e:	f7fd ffc5 	bl	80024fc <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d907      	bls.n	800458c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e15c      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
 8004580:	40023800 	.word	0x40023800
 8004584:	42470000 	.word	0x42470000
 8004588:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800458c:	4b8a      	ldr	r3, [pc, #552]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 800458e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1ea      	bne.n	800456e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8097 	beq.w	80046d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045a6:	2300      	movs	r3, #0
 80045a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045aa:	4b83      	ldr	r3, [pc, #524]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10f      	bne.n	80045d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	4b7f      	ldr	r3, [pc, #508]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	4a7e      	ldr	r2, [pc, #504]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80045c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045c6:	4b7c      	ldr	r3, [pc, #496]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d2:	2301      	movs	r3, #1
 80045d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d6:	4b79      	ldr	r3, [pc, #484]	@ (80047bc <HAL_RCC_OscConfig+0x4b0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d118      	bne.n	8004614 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045e2:	4b76      	ldr	r3, [pc, #472]	@ (80047bc <HAL_RCC_OscConfig+0x4b0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a75      	ldr	r2, [pc, #468]	@ (80047bc <HAL_RCC_OscConfig+0x4b0>)
 80045e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ee:	f7fd ff85 	bl	80024fc <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f6:	f7fd ff81 	bl	80024fc <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e118      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004608:	4b6c      	ldr	r3, [pc, #432]	@ (80047bc <HAL_RCC_OscConfig+0x4b0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0f0      	beq.n	80045f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d106      	bne.n	800462a <HAL_RCC_OscConfig+0x31e>
 800461c:	4b66      	ldr	r3, [pc, #408]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 800461e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004620:	4a65      	ldr	r2, [pc, #404]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	6713      	str	r3, [r2, #112]	@ 0x70
 8004628:	e01c      	b.n	8004664 <HAL_RCC_OscConfig+0x358>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b05      	cmp	r3, #5
 8004630:	d10c      	bne.n	800464c <HAL_RCC_OscConfig+0x340>
 8004632:	4b61      	ldr	r3, [pc, #388]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004636:	4a60      	ldr	r2, [pc, #384]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 8004638:	f043 0304 	orr.w	r3, r3, #4
 800463c:	6713      	str	r3, [r2, #112]	@ 0x70
 800463e:	4b5e      	ldr	r3, [pc, #376]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004642:	4a5d      	ldr	r2, [pc, #372]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	6713      	str	r3, [r2, #112]	@ 0x70
 800464a:	e00b      	b.n	8004664 <HAL_RCC_OscConfig+0x358>
 800464c:	4b5a      	ldr	r3, [pc, #360]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004650:	4a59      	ldr	r2, [pc, #356]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 8004652:	f023 0301 	bic.w	r3, r3, #1
 8004656:	6713      	str	r3, [r2, #112]	@ 0x70
 8004658:	4b57      	ldr	r3, [pc, #348]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465c:	4a56      	ldr	r2, [pc, #344]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 800465e:	f023 0304 	bic.w	r3, r3, #4
 8004662:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d015      	beq.n	8004698 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466c:	f7fd ff46 	bl	80024fc <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004672:	e00a      	b.n	800468a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004674:	f7fd ff42 	bl	80024fc <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e0d7      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468a:	4b4b      	ldr	r3, [pc, #300]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0ee      	beq.n	8004674 <HAL_RCC_OscConfig+0x368>
 8004696:	e014      	b.n	80046c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004698:	f7fd ff30 	bl	80024fc <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469e:	e00a      	b.n	80046b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a0:	f7fd ff2c 	bl	80024fc <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e0c1      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b6:	4b40      	ldr	r3, [pc, #256]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1ee      	bne.n	80046a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d105      	bne.n	80046d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c8:	4b3b      	ldr	r3, [pc, #236]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	4a3a      	ldr	r2, [pc, #232]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80046ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80ad 	beq.w	8004838 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046de:	4b36      	ldr	r3, [pc, #216]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 030c 	and.w	r3, r3, #12
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d060      	beq.n	80047ac <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d145      	bne.n	800477e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b33      	ldr	r3, [pc, #204]	@ (80047c0 <HAL_RCC_OscConfig+0x4b4>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fd ff00 	bl	80024fc <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004700:	f7fd fefc 	bl	80024fc <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e093      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	4b29      	ldr	r3, [pc, #164]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69da      	ldr	r2, [r3, #28]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	019b      	lsls	r3, r3, #6
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004734:	085b      	lsrs	r3, r3, #1
 8004736:	3b01      	subs	r3, #1
 8004738:	041b      	lsls	r3, r3, #16
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004740:	061b      	lsls	r3, r3, #24
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004748:	071b      	lsls	r3, r3, #28
 800474a:	491b      	ldr	r1, [pc, #108]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 800474c:	4313      	orrs	r3, r2
 800474e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004750:	4b1b      	ldr	r3, [pc, #108]	@ (80047c0 <HAL_RCC_OscConfig+0x4b4>)
 8004752:	2201      	movs	r2, #1
 8004754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004756:	f7fd fed1 	bl	80024fc <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475e:	f7fd fecd 	bl	80024fc <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e064      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004770:	4b11      	ldr	r3, [pc, #68]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_RCC_OscConfig+0x452>
 800477c:	e05c      	b.n	8004838 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477e:	4b10      	ldr	r3, [pc, #64]	@ (80047c0 <HAL_RCC_OscConfig+0x4b4>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fd feba 	bl	80024fc <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478c:	f7fd feb6 	bl	80024fc <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e04d      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x480>
 80047aa:	e045      	b.n	8004838 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d107      	bne.n	80047c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e040      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40007000 	.word	0x40007000
 80047c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004844 <HAL_RCC_OscConfig+0x538>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d030      	beq.n	8004834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d129      	bne.n	8004834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d122      	bne.n	8004834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047f4:	4013      	ands	r3, r2
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d119      	bne.n	8004834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	3b01      	subs	r3, #1
 800480e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d10f      	bne.n	8004834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004820:	429a      	cmp	r2, r3
 8004822:	d107      	bne.n	8004834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800

08004848 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e07b      	b.n	8004952 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485e:	2b00      	cmp	r3, #0
 8004860:	d108      	bne.n	8004874 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800486a:	d009      	beq.n	8004880 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	61da      	str	r2, [r3, #28]
 8004872:	e005      	b.n	8004880 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fd fb2c 	bl	8001ef8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004904:	ea42 0103 	orr.w	r1, r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	0c1b      	lsrs	r3, r3, #16
 800491e:	f003 0104 	and.w	r1, r3, #4
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	f003 0210 	and.w	r2, r3, #16
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004940:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b088      	sub	sp, #32
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	4613      	mov	r3, r2
 8004968:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800496a:	f7fd fdc7 	bl	80024fc <HAL_GetTick>
 800496e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	d001      	beq.n	8004984 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004980:	2302      	movs	r3, #2
 8004982:	e12a      	b.n	8004bda <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_SPI_Transmit+0x36>
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e122      	b.n	8004bda <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_SPI_Transmit+0x48>
 800499e:	2302      	movs	r3, #2
 80049a0:	e11b      	b.n	8004bda <HAL_SPI_Transmit+0x280>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2203      	movs	r2, #3
 80049ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	88fa      	ldrh	r2, [r7, #6]
 80049c2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	88fa      	ldrh	r2, [r7, #6]
 80049c8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049f0:	d10f      	bne.n	8004a12 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1c:	2b40      	cmp	r3, #64	@ 0x40
 8004a1e:	d007      	beq.n	8004a30 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a38:	d152      	bne.n	8004ae0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <HAL_SPI_Transmit+0xee>
 8004a42:	8b7b      	ldrh	r3, [r7, #26]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d145      	bne.n	8004ad4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4c:	881a      	ldrh	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a58:	1c9a      	adds	r2, r3, #2
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a6c:	e032      	b.n	8004ad4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d112      	bne.n	8004aa2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a80:	881a      	ldrh	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8c:	1c9a      	adds	r2, r3, #2
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004aa0:	e018      	b.n	8004ad4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aa2:	f7fd fd2b 	bl	80024fc <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d803      	bhi.n	8004aba <HAL_SPI_Transmit+0x160>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab8:	d102      	bne.n	8004ac0 <HAL_SPI_Transmit+0x166>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d109      	bne.n	8004ad4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e082      	b.n	8004bda <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1c7      	bne.n	8004a6e <HAL_SPI_Transmit+0x114>
 8004ade:	e053      	b.n	8004b88 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <HAL_SPI_Transmit+0x194>
 8004ae8:	8b7b      	ldrh	r3, [r7, #26]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d147      	bne.n	8004b7e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	330c      	adds	r3, #12
 8004af8:	7812      	ldrb	r2, [r2, #0]
 8004afa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b14:	e033      	b.n	8004b7e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d113      	bne.n	8004b4c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	7812      	ldrb	r2, [r2, #0]
 8004b30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004b4a:	e018      	b.n	8004b7e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b4c:	f7fd fcd6 	bl	80024fc <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d803      	bhi.n	8004b64 <HAL_SPI_Transmit+0x20a>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b62:	d102      	bne.n	8004b6a <HAL_SPI_Transmit+0x210>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d109      	bne.n	8004b7e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e02d      	b.n	8004bda <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1c6      	bne.n	8004b16 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	6839      	ldr	r1, [r7, #0]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f8b1 	bl	8004cf4 <SPI_EndRxTxTransaction>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10a      	bne.n	8004bbc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
  }
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bf4:	f7fd fc82 	bl	80024fc <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	4413      	add	r3, r2
 8004c02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c04:	f7fd fc7a 	bl	80024fc <HAL_GetTick>
 8004c08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c0a:	4b39      	ldr	r3, [pc, #228]	@ (8004cf0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	015b      	lsls	r3, r3, #5
 8004c10:	0d1b      	lsrs	r3, r3, #20
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	fb02 f303 	mul.w	r3, r2, r3
 8004c18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c1a:	e055      	b.n	8004cc8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c22:	d051      	beq.n	8004cc8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c24:	f7fd fc6a 	bl	80024fc <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d902      	bls.n	8004c3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d13d      	bne.n	8004cb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c52:	d111      	bne.n	8004c78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c5c:	d004      	beq.n	8004c68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c66:	d107      	bne.n	8004c78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c80:	d10f      	bne.n	8004ca2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ca0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e018      	b.n	8004ce8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d102      	bne.n	8004cc2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61fb      	str	r3, [r7, #28]
 8004cc0:	e002      	b.n	8004cc8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2301      	moveq	r3, #1
 8004cda:	2300      	movne	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d19a      	bne.n	8004c1c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3720      	adds	r7, #32
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000030 	.word	0x20000030

08004cf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af02      	add	r7, sp, #8
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2201      	movs	r2, #1
 8004d08:	2102      	movs	r1, #2
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7ff ff6a 	bl	8004be4 <SPI_WaitFlagStateUntilTimeout>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d1a:	f043 0220 	orr.w	r2, r3, #32
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e032      	b.n	8004d8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d26:	4b1b      	ldr	r3, [pc, #108]	@ (8004d94 <SPI_EndRxTxTransaction+0xa0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d98 <SPI_EndRxTxTransaction+0xa4>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	0d5b      	lsrs	r3, r3, #21
 8004d32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d44:	d112      	bne.n	8004d6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2180      	movs	r1, #128	@ 0x80
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f7ff ff47 	bl	8004be4 <SPI_WaitFlagStateUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d016      	beq.n	8004d8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d60:	f043 0220 	orr.w	r2, r3, #32
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e00f      	b.n	8004d8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d82:	2b80      	cmp	r3, #128	@ 0x80
 8004d84:	d0f2      	beq.n	8004d6c <SPI_EndRxTxTransaction+0x78>
 8004d86:	e000      	b.n	8004d8a <SPI_EndRxTxTransaction+0x96>
        break;
 8004d88:	bf00      	nop
  }

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000030 	.word	0x20000030
 8004d98:	165e9f81 	.word	0x165e9f81

08004d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e041      	b.n	8004e32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fd fa68 	bl	8002298 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	f000 f950 	bl	8005080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d020      	beq.n	8004e9e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01b      	beq.n	8004e9e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f06f 0202 	mvn.w	r2, #2
 8004e6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f8dc 	bl	8005042 <HAL_TIM_IC_CaptureCallback>
 8004e8a:	e005      	b.n	8004e98 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f8ce 	bl	800502e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f8df 	bl	8005056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d020      	beq.n	8004eea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01b      	beq.n	8004eea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f06f 0204 	mvn.w	r2, #4
 8004eba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f8b6 	bl	8005042 <HAL_TIM_IC_CaptureCallback>
 8004ed6:	e005      	b.n	8004ee4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f8a8 	bl	800502e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f8b9 	bl	8005056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d020      	beq.n	8004f36 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01b      	beq.n	8004f36 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f06f 0208 	mvn.w	r2, #8
 8004f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2204      	movs	r2, #4
 8004f0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f890 	bl	8005042 <HAL_TIM_IC_CaptureCallback>
 8004f22:	e005      	b.n	8004f30 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f882 	bl	800502e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f893 	bl	8005056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d020      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f003 0310 	and.w	r3, r3, #16
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d01b      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f06f 0210 	mvn.w	r2, #16
 8004f52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2208      	movs	r2, #8
 8004f58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f86a 	bl	8005042 <HAL_TIM_IC_CaptureCallback>
 8004f6e:	e005      	b.n	8004f7c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f85c 	bl	800502e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f86d 	bl	8005056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00c      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f06f 0201 	mvn.w	r2, #1
 8004f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f83a 	bl	800501a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00c      	beq.n	8004fca <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d007      	beq.n	8004fca <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f90b 	bl	80051e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00c      	beq.n	8004fee <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d007      	beq.n	8004fee <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f83e 	bl	800506a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f003 0320 	and.w	r3, r3, #32
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00c      	beq.n	8005012 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d007      	beq.n	8005012 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f06f 0220 	mvn.w	r2, #32
 800500a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f8dd 	bl	80051cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005012:	bf00      	nop
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a43      	ldr	r2, [pc, #268]	@ (80051a0 <TIM_Base_SetConfig+0x120>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d013      	beq.n	80050c0 <TIM_Base_SetConfig+0x40>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800509e:	d00f      	beq.n	80050c0 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a40      	ldr	r2, [pc, #256]	@ (80051a4 <TIM_Base_SetConfig+0x124>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00b      	beq.n	80050c0 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a3f      	ldr	r2, [pc, #252]	@ (80051a8 <TIM_Base_SetConfig+0x128>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d007      	beq.n	80050c0 <TIM_Base_SetConfig+0x40>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a3e      	ldr	r2, [pc, #248]	@ (80051ac <TIM_Base_SetConfig+0x12c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_Base_SetConfig+0x40>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a3d      	ldr	r2, [pc, #244]	@ (80051b0 <TIM_Base_SetConfig+0x130>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d108      	bne.n	80050d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a32      	ldr	r2, [pc, #200]	@ (80051a0 <TIM_Base_SetConfig+0x120>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d02b      	beq.n	8005132 <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e0:	d027      	beq.n	8005132 <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a2f      	ldr	r2, [pc, #188]	@ (80051a4 <TIM_Base_SetConfig+0x124>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d023      	beq.n	8005132 <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2e      	ldr	r2, [pc, #184]	@ (80051a8 <TIM_Base_SetConfig+0x128>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d01f      	beq.n	8005132 <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a2d      	ldr	r2, [pc, #180]	@ (80051ac <TIM_Base_SetConfig+0x12c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d01b      	beq.n	8005132 <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a2c      	ldr	r2, [pc, #176]	@ (80051b0 <TIM_Base_SetConfig+0x130>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d017      	beq.n	8005132 <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a2b      	ldr	r2, [pc, #172]	@ (80051b4 <TIM_Base_SetConfig+0x134>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d013      	beq.n	8005132 <TIM_Base_SetConfig+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a2a      	ldr	r2, [pc, #168]	@ (80051b8 <TIM_Base_SetConfig+0x138>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00f      	beq.n	8005132 <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a29      	ldr	r2, [pc, #164]	@ (80051bc <TIM_Base_SetConfig+0x13c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00b      	beq.n	8005132 <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a28      	ldr	r2, [pc, #160]	@ (80051c0 <TIM_Base_SetConfig+0x140>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d007      	beq.n	8005132 <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a27      	ldr	r2, [pc, #156]	@ (80051c4 <TIM_Base_SetConfig+0x144>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d003      	beq.n	8005132 <TIM_Base_SetConfig+0xb2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a26      	ldr	r2, [pc, #152]	@ (80051c8 <TIM_Base_SetConfig+0x148>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d108      	bne.n	8005144 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a0e      	ldr	r2, [pc, #56]	@ (80051a0 <TIM_Base_SetConfig+0x120>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <TIM_Base_SetConfig+0xf2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a10      	ldr	r2, [pc, #64]	@ (80051b0 <TIM_Base_SetConfig+0x130>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d103      	bne.n	800517a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f043 0204 	orr.w	r2, r3, #4
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	601a      	str	r2, [r3, #0]
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40010000 	.word	0x40010000
 80051a4:	40000400 	.word	0x40000400
 80051a8:	40000800 	.word	0x40000800
 80051ac:	40000c00 	.word	0x40000c00
 80051b0:	40010400 	.word	0x40010400
 80051b4:	40014000 	.word	0x40014000
 80051b8:	40014400 	.word	0x40014400
 80051bc:	40014800 	.word	0x40014800
 80051c0:	40001800 	.word	0x40001800
 80051c4:	40001c00 	.word	0x40001c00
 80051c8:	40002000 	.word	0x40002000

080051cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e042      	b.n	800528c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fd f88e 	bl	800233c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2224      	movs	r2, #36	@ 0x24
 8005224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fd7f 	bl	8005d3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800524c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695a      	ldr	r2, [r3, #20]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800525c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800526c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	@ 0x28
 8005298:	af02      	add	r7, sp, #8
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	4613      	mov	r3, r2
 80052a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d175      	bne.n	80053a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_UART_Transmit+0x2c>
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e06e      	b.n	80053a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2221      	movs	r2, #33	@ 0x21
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052d2:	f7fd f913 	bl	80024fc <HAL_GetTick>
 80052d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	88fa      	ldrh	r2, [r7, #6]
 80052dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	88fa      	ldrh	r2, [r7, #6]
 80052e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ec:	d108      	bne.n	8005300 <HAL_UART_Transmit+0x6c>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d104      	bne.n	8005300 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	e003      	b.n	8005308 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005304:	2300      	movs	r3, #0
 8005306:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005308:	e02e      	b.n	8005368 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2200      	movs	r2, #0
 8005312:	2180      	movs	r1, #128	@ 0x80
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 fb1d 	bl	8005954 <UART_WaitOnFlagUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e03a      	b.n	80053a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10b      	bne.n	800534a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	461a      	mov	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005340:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	3302      	adds	r3, #2
 8005346:	61bb      	str	r3, [r7, #24]
 8005348:	e007      	b.n	800535a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	781a      	ldrb	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	3301      	adds	r3, #1
 8005358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800535e:	b29b      	uxth	r3, r3
 8005360:	3b01      	subs	r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1cb      	bne.n	800530a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2200      	movs	r2, #0
 800537a:	2140      	movs	r1, #64	@ 0x40
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 fae9 	bl	8005954 <UART_WaitOnFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e006      	b.n	80053a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	e000      	b.n	80053a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80053a0:	2302      	movs	r3, #2
  }
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3720      	adds	r7, #32
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b0ba      	sub	sp, #232	@ 0xe8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80053d8:	2300      	movs	r3, #0
 80053da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80053ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10f      	bne.n	8005412 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d009      	beq.n	8005412 <HAL_UART_IRQHandler+0x66>
 80053fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fbd7 	bl	8005bbe <UART_Receive_IT>
      return;
 8005410:	e273      	b.n	80058fa <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 80de 	beq.w	80055d8 <HAL_UART_IRQHandler+0x22c>
 800541c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d106      	bne.n	8005436 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800542c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 80d1 	beq.w	80055d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_UART_IRQHandler+0xae>
 8005442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544a:	2b00      	cmp	r3, #0
 800544c:	d005      	beq.n	800545a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005452:	f043 0201 	orr.w	r2, r3, #1
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800545a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <HAL_UART_IRQHandler+0xd2>
 8005466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005476:	f043 0202 	orr.w	r2, r3, #2
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800547e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00b      	beq.n	80054a2 <HAL_UART_IRQHandler+0xf6>
 800548a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549a:	f043 0204 	orr.w	r2, r3, #4
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d011      	beq.n	80054d2 <HAL_UART_IRQHandler+0x126>
 80054ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d105      	bne.n	80054c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d005      	beq.n	80054d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ca:	f043 0208 	orr.w	r2, r3, #8
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 820a 	beq.w	80058f0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d008      	beq.n	80054fa <HAL_UART_IRQHandler+0x14e>
 80054e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fb62 	bl	8005bbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005504:	2b40      	cmp	r3, #64	@ 0x40
 8005506:	bf0c      	ite	eq
 8005508:	2301      	moveq	r3, #1
 800550a:	2300      	movne	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d103      	bne.n	8005526 <HAL_UART_IRQHandler+0x17a>
 800551e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005522:	2b00      	cmp	r3, #0
 8005524:	d04f      	beq.n	80055c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fa6d 	bl	8005a06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005536:	2b40      	cmp	r3, #64	@ 0x40
 8005538:	d141      	bne.n	80055be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3314      	adds	r3, #20
 8005540:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005550:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005554:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3314      	adds	r3, #20
 8005562:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005566:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800556a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800557e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1d9      	bne.n	800553a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d013      	beq.n	80055b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005592:	4a8a      	ldr	r2, [pc, #552]	@ (80057bc <HAL_UART_IRQHandler+0x410>)
 8005594:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559a:	4618      	mov	r0, r3
 800559c:	f7fd f95f 	bl	800285e <HAL_DMA_Abort_IT>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d016      	beq.n	80055d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055b0:	4610      	mov	r0, r2
 80055b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b4:	e00e      	b.n	80055d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f9b6 	bl	8005928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055bc:	e00a      	b.n	80055d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f9b2 	bl	8005928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c4:	e006      	b.n	80055d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f9ae 	bl	8005928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055d2:	e18d      	b.n	80058f0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d4:	bf00      	nop
    return;
 80055d6:	e18b      	b.n	80058f0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055dc:	2b01      	cmp	r3, #1
 80055de:	f040 8167 	bne.w	80058b0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e6:	f003 0310 	and.w	r3, r3, #16
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 8160 	beq.w	80058b0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80055f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8159 	beq.w	80058b0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055fe:	2300      	movs	r3, #0
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561e:	2b40      	cmp	r3, #64	@ 0x40
 8005620:	f040 80ce 	bne.w	80057c0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005630:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80a9 	beq.w	800578c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800563e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005642:	429a      	cmp	r2, r3
 8005644:	f080 80a2 	bcs.w	800578c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800564e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800565a:	f000 8088 	beq.w	800576e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	330c      	adds	r3, #12
 8005664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005674:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800567c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	330c      	adds	r3, #12
 8005686:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800568a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800568e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005696:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1d9      	bne.n	800565e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3314      	adds	r3, #20
 80056b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056bc:	f023 0301 	bic.w	r3, r3, #1
 80056c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3314      	adds	r3, #20
 80056ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e1      	bne.n	80056aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3314      	adds	r3, #20
 80056ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3314      	adds	r3, #20
 8005706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800570a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800570c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005710:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e3      	bne.n	80056e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	330c      	adds	r3, #12
 8005732:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800573c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800573e:	f023 0310 	bic.w	r3, r3, #16
 8005742:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	330c      	adds	r3, #12
 800574c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005750:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005752:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005756:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800575e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e3      	bne.n	800572c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005768:	4618      	mov	r0, r3
 800576a:	f7fd f808 	bl	800277e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800577c:	b29b      	uxth	r3, r3
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	b29b      	uxth	r3, r3
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f8d9 	bl	800593c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800578a:	e0b3      	b.n	80058f4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005790:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005794:	429a      	cmp	r2, r3
 8005796:	f040 80ad 	bne.w	80058f4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057a4:	f040 80a6 	bne.w	80058f4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057b2:	4619      	mov	r1, r3
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f8c1 	bl	800593c <HAL_UARTEx_RxEventCallback>
      return;
 80057ba:	e09b      	b.n	80058f4 <HAL_UART_IRQHandler+0x548>
 80057bc:	08005acd 	.word	0x08005acd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 808e 	beq.w	80058f8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80057dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 8089 	beq.w	80058f8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	330c      	adds	r3, #12
 80057ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800580a:	647a      	str	r2, [r7, #68]	@ 0x44
 800580c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005810:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e3      	bne.n	80057e6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3314      	adds	r3, #20
 8005824:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	623b      	str	r3, [r7, #32]
   return(result);
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	f023 0301 	bic.w	r3, r3, #1
 8005834:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3314      	adds	r3, #20
 800583e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005842:	633a      	str	r2, [r7, #48]	@ 0x30
 8005844:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e3      	bne.n	800581e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	330c      	adds	r3, #12
 800586a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	60fb      	str	r3, [r7, #12]
   return(result);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0310 	bic.w	r3, r3, #16
 800587a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	330c      	adds	r3, #12
 8005884:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005888:	61fa      	str	r2, [r7, #28]
 800588a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	69b9      	ldr	r1, [r7, #24]
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	617b      	str	r3, [r7, #20]
   return(result);
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e3      	bne.n	8005864 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f847 	bl	800593c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058ae:	e023      	b.n	80058f8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d009      	beq.n	80058d0 <HAL_UART_IRQHandler+0x524>
 80058bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f910 	bl	8005aee <UART_Transmit_IT>
    return;
 80058ce:	e014      	b.n	80058fa <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00e      	beq.n	80058fa <HAL_UART_IRQHandler+0x54e>
 80058dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d008      	beq.n	80058fa <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f950 	bl	8005b8e <UART_EndTransmit_IT>
    return;
 80058ee:	e004      	b.n	80058fa <HAL_UART_IRQHandler+0x54e>
    return;
 80058f0:	bf00      	nop
 80058f2:	e002      	b.n	80058fa <HAL_UART_IRQHandler+0x54e>
      return;
 80058f4:	bf00      	nop
 80058f6:	e000      	b.n	80058fa <HAL_UART_IRQHandler+0x54e>
      return;
 80058f8:	bf00      	nop
  }
}
 80058fa:	37e8      	adds	r7, #232	@ 0xe8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	4613      	mov	r3, r2
 8005962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005964:	e03b      	b.n	80059de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596c:	d037      	beq.n	80059de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596e:	f7fc fdc5 	bl	80024fc <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	6a3a      	ldr	r2, [r7, #32]
 800597a:	429a      	cmp	r2, r3
 800597c:	d302      	bcc.n	8005984 <UART_WaitOnFlagUntilTimeout+0x30>
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e03a      	b.n	80059fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	d023      	beq.n	80059de <UART_WaitOnFlagUntilTimeout+0x8a>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b80      	cmp	r3, #128	@ 0x80
 800599a:	d020      	beq.n	80059de <UART_WaitOnFlagUntilTimeout+0x8a>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b40      	cmp	r3, #64	@ 0x40
 80059a0:	d01d      	beq.n	80059de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d116      	bne.n	80059de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f81d 	bl	8005a06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2208      	movs	r2, #8
 80059d0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e00f      	b.n	80059fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4013      	ands	r3, r2
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	bf0c      	ite	eq
 80059ee:	2301      	moveq	r3, #1
 80059f0:	2300      	movne	r3, #0
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	79fb      	ldrb	r3, [r7, #7]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d0b4      	beq.n	8005966 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b095      	sub	sp, #84	@ 0x54
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	330c      	adds	r3, #12
 8005a14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1e5      	bne.n	8005a0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3314      	adds	r3, #20
 8005a48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	f023 0301 	bic.w	r3, r3, #1
 8005a58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3314      	adds	r3, #20
 8005a60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1e5      	bne.n	8005a42 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d119      	bne.n	8005ab2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	330c      	adds	r3, #12
 8005a84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	e853 3f00 	ldrex	r3, [r3]
 8005a8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f023 0310 	bic.w	r3, r3, #16
 8005a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a9e:	61ba      	str	r2, [r7, #24]
 8005aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	6979      	ldr	r1, [r7, #20]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e5      	bne.n	8005a7e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ac0:	bf00      	nop
 8005ac2:	3754      	adds	r7, #84	@ 0x54
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f7ff ff21 	bl	8005928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ae6:	bf00      	nop
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b085      	sub	sp, #20
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b21      	cmp	r3, #33	@ 0x21
 8005b00:	d13e      	bne.n	8005b80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b0a:	d114      	bne.n	8005b36 <UART_Transmit_IT+0x48>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d110      	bne.n	8005b36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	1c9a      	adds	r2, r3, #2
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	621a      	str	r2, [r3, #32]
 8005b34:	e008      	b.n	8005b48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	1c59      	adds	r1, r3, #1
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6211      	str	r1, [r2, #32]
 8005b40:	781a      	ldrb	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	4619      	mov	r1, r3
 8005b56:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10f      	bne.n	8005b7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e000      	b.n	8005b82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b80:	2302      	movs	r3, #2
  }
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b082      	sub	sp, #8
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ba4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff fea6 	bl	8005900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b08c      	sub	sp, #48	@ 0x30
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b22      	cmp	r3, #34	@ 0x22
 8005bd8:	f040 80aa 	bne.w	8005d30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be4:	d115      	bne.n	8005c12 <UART_Receive_IT+0x54>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d111      	bne.n	8005c12 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0a:	1c9a      	adds	r2, r3, #2
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c10:	e024      	b.n	8005c5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c20:	d007      	beq.n	8005c32 <UART_Receive_IT+0x74>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10a      	bne.n	8005c40 <UART_Receive_IT+0x82>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	e008      	b.n	8005c52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d15d      	bne.n	8005d2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0220 	bic.w	r2, r2, #32
 8005c7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695a      	ldr	r2, [r3, #20]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0201 	bic.w	r2, r2, #1
 8005c9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d135      	bne.n	8005d22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	613b      	str	r3, [r7, #16]
   return(result);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f023 0310 	bic.w	r3, r3, #16
 8005cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	330c      	adds	r3, #12
 8005cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cdc:	623a      	str	r2, [r7, #32]
 8005cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	69f9      	ldr	r1, [r7, #28]
 8005ce2:	6a3a      	ldr	r2, [r7, #32]
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e5      	bne.n	8005cbc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0310 	and.w	r3, r3, #16
 8005cfa:	2b10      	cmp	r3, #16
 8005cfc:	d10a      	bne.n	8005d14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff fe0e 	bl	800593c <HAL_UARTEx_RxEventCallback>
 8005d20:	e002      	b.n	8005d28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff fdf6 	bl	8005914 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e002      	b.n	8005d32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e000      	b.n	8005d32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d30:	2302      	movs	r3, #2
  }
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3730      	adds	r7, #48	@ 0x30
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d40:	b0c0      	sub	sp, #256	@ 0x100
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d58:	68d9      	ldr	r1, [r3, #12]
 8005d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	ea40 0301 	orr.w	r3, r0, r1
 8005d64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d94:	f021 010c 	bic.w	r1, r1, #12
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005da2:	430b      	orrs	r3, r1
 8005da4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db6:	6999      	ldr	r1, [r3, #24]
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	ea40 0301 	orr.w	r3, r0, r1
 8005dc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	4b8f      	ldr	r3, [pc, #572]	@ (8006008 <UART_SetConfig+0x2cc>)
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d005      	beq.n	8005ddc <UART_SetConfig+0xa0>
 8005dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b8d      	ldr	r3, [pc, #564]	@ (800600c <UART_SetConfig+0x2d0>)
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d104      	bne.n	8005de6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ddc:	f7fe f852 	bl	8003e84 <HAL_RCC_GetPCLK2Freq>
 8005de0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005de4:	e003      	b.n	8005dee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005de6:	f7fe f839 	bl	8003e5c <HAL_RCC_GetPCLK1Freq>
 8005dea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005df8:	f040 810c 	bne.w	8006014 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e00:	2200      	movs	r2, #0
 8005e02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e0e:	4622      	mov	r2, r4
 8005e10:	462b      	mov	r3, r5
 8005e12:	1891      	adds	r1, r2, r2
 8005e14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e16:	415b      	adcs	r3, r3
 8005e18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e1e:	4621      	mov	r1, r4
 8005e20:	eb12 0801 	adds.w	r8, r2, r1
 8005e24:	4629      	mov	r1, r5
 8005e26:	eb43 0901 	adc.w	r9, r3, r1
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	f04f 0300 	mov.w	r3, #0
 8005e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e3e:	4690      	mov	r8, r2
 8005e40:	4699      	mov	r9, r3
 8005e42:	4623      	mov	r3, r4
 8005e44:	eb18 0303 	adds.w	r3, r8, r3
 8005e48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e4c:	462b      	mov	r3, r5
 8005e4e:	eb49 0303 	adc.w	r3, r9, r3
 8005e52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	18db      	adds	r3, r3, r3
 8005e6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e70:	4613      	mov	r3, r2
 8005e72:	eb42 0303 	adc.w	r3, r2, r3
 8005e76:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e80:	f7fa ff02 	bl	8000c88 <__aeabi_uldivmod>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4b61      	ldr	r3, [pc, #388]	@ (8006010 <UART_SetConfig+0x2d4>)
 8005e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	011c      	lsls	r4, r3, #4
 8005e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ea0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ea4:	4642      	mov	r2, r8
 8005ea6:	464b      	mov	r3, r9
 8005ea8:	1891      	adds	r1, r2, r2
 8005eaa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005eac:	415b      	adcs	r3, r3
 8005eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005eb4:	4641      	mov	r1, r8
 8005eb6:	eb12 0a01 	adds.w	sl, r2, r1
 8005eba:	4649      	mov	r1, r9
 8005ebc:	eb43 0b01 	adc.w	fp, r3, r1
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ecc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ed4:	4692      	mov	sl, r2
 8005ed6:	469b      	mov	fp, r3
 8005ed8:	4643      	mov	r3, r8
 8005eda:	eb1a 0303 	adds.w	r3, sl, r3
 8005ede:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ee2:	464b      	mov	r3, r9
 8005ee4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ee8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ef8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005efc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f00:	460b      	mov	r3, r1
 8005f02:	18db      	adds	r3, r3, r3
 8005f04:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f06:	4613      	mov	r3, r2
 8005f08:	eb42 0303 	adc.w	r3, r2, r3
 8005f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f16:	f7fa feb7 	bl	8000c88 <__aeabi_uldivmod>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4611      	mov	r1, r2
 8005f20:	4b3b      	ldr	r3, [pc, #236]	@ (8006010 <UART_SetConfig+0x2d4>)
 8005f22:	fba3 2301 	umull	r2, r3, r3, r1
 8005f26:	095b      	lsrs	r3, r3, #5
 8005f28:	2264      	movs	r2, #100	@ 0x64
 8005f2a:	fb02 f303 	mul.w	r3, r2, r3
 8005f2e:	1acb      	subs	r3, r1, r3
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f36:	4b36      	ldr	r3, [pc, #216]	@ (8006010 <UART_SetConfig+0x2d4>)
 8005f38:	fba3 2302 	umull	r2, r3, r3, r2
 8005f3c:	095b      	lsrs	r3, r3, #5
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f44:	441c      	add	r4, r3
 8005f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f58:	4642      	mov	r2, r8
 8005f5a:	464b      	mov	r3, r9
 8005f5c:	1891      	adds	r1, r2, r2
 8005f5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f60:	415b      	adcs	r3, r3
 8005f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f68:	4641      	mov	r1, r8
 8005f6a:	1851      	adds	r1, r2, r1
 8005f6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f6e:	4649      	mov	r1, r9
 8005f70:	414b      	adcs	r3, r1
 8005f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f80:	4659      	mov	r1, fp
 8005f82:	00cb      	lsls	r3, r1, #3
 8005f84:	4651      	mov	r1, sl
 8005f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f8a:	4651      	mov	r1, sl
 8005f8c:	00ca      	lsls	r2, r1, #3
 8005f8e:	4610      	mov	r0, r2
 8005f90:	4619      	mov	r1, r3
 8005f92:	4603      	mov	r3, r0
 8005f94:	4642      	mov	r2, r8
 8005f96:	189b      	adds	r3, r3, r2
 8005f98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	460a      	mov	r2, r1
 8005fa0:	eb42 0303 	adc.w	r3, r2, r3
 8005fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fb4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	18db      	adds	r3, r3, r3
 8005fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	eb42 0303 	adc.w	r3, r2, r3
 8005fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005fd2:	f7fa fe59 	bl	8000c88 <__aeabi_uldivmod>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4b0d      	ldr	r3, [pc, #52]	@ (8006010 <UART_SetConfig+0x2d4>)
 8005fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	2164      	movs	r1, #100	@ 0x64
 8005fe4:	fb01 f303 	mul.w	r3, r1, r3
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	3332      	adds	r3, #50	@ 0x32
 8005fee:	4a08      	ldr	r2, [pc, #32]	@ (8006010 <UART_SetConfig+0x2d4>)
 8005ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	f003 0207 	and.w	r2, r3, #7
 8005ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4422      	add	r2, r4
 8006002:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006004:	e106      	b.n	8006214 <UART_SetConfig+0x4d8>
 8006006:	bf00      	nop
 8006008:	40011000 	.word	0x40011000
 800600c:	40011400 	.word	0x40011400
 8006010:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006018:	2200      	movs	r2, #0
 800601a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800601e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006022:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006026:	4642      	mov	r2, r8
 8006028:	464b      	mov	r3, r9
 800602a:	1891      	adds	r1, r2, r2
 800602c:	6239      	str	r1, [r7, #32]
 800602e:	415b      	adcs	r3, r3
 8006030:	627b      	str	r3, [r7, #36]	@ 0x24
 8006032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006036:	4641      	mov	r1, r8
 8006038:	1854      	adds	r4, r2, r1
 800603a:	4649      	mov	r1, r9
 800603c:	eb43 0501 	adc.w	r5, r3, r1
 8006040:	f04f 0200 	mov.w	r2, #0
 8006044:	f04f 0300 	mov.w	r3, #0
 8006048:	00eb      	lsls	r3, r5, #3
 800604a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800604e:	00e2      	lsls	r2, r4, #3
 8006050:	4614      	mov	r4, r2
 8006052:	461d      	mov	r5, r3
 8006054:	4643      	mov	r3, r8
 8006056:	18e3      	adds	r3, r4, r3
 8006058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800605c:	464b      	mov	r3, r9
 800605e:	eb45 0303 	adc.w	r3, r5, r3
 8006062:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006072:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006082:	4629      	mov	r1, r5
 8006084:	008b      	lsls	r3, r1, #2
 8006086:	4621      	mov	r1, r4
 8006088:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800608c:	4621      	mov	r1, r4
 800608e:	008a      	lsls	r2, r1, #2
 8006090:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006094:	f7fa fdf8 	bl	8000c88 <__aeabi_uldivmod>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4b60      	ldr	r3, [pc, #384]	@ (8006220 <UART_SetConfig+0x4e4>)
 800609e:	fba3 2302 	umull	r2, r3, r3, r2
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	011c      	lsls	r4, r3, #4
 80060a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060b8:	4642      	mov	r2, r8
 80060ba:	464b      	mov	r3, r9
 80060bc:	1891      	adds	r1, r2, r2
 80060be:	61b9      	str	r1, [r7, #24]
 80060c0:	415b      	adcs	r3, r3
 80060c2:	61fb      	str	r3, [r7, #28]
 80060c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060c8:	4641      	mov	r1, r8
 80060ca:	1851      	adds	r1, r2, r1
 80060cc:	6139      	str	r1, [r7, #16]
 80060ce:	4649      	mov	r1, r9
 80060d0:	414b      	adcs	r3, r1
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060e0:	4659      	mov	r1, fp
 80060e2:	00cb      	lsls	r3, r1, #3
 80060e4:	4651      	mov	r1, sl
 80060e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ea:	4651      	mov	r1, sl
 80060ec:	00ca      	lsls	r2, r1, #3
 80060ee:	4610      	mov	r0, r2
 80060f0:	4619      	mov	r1, r3
 80060f2:	4603      	mov	r3, r0
 80060f4:	4642      	mov	r2, r8
 80060f6:	189b      	adds	r3, r3, r2
 80060f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060fc:	464b      	mov	r3, r9
 80060fe:	460a      	mov	r2, r1
 8006100:	eb42 0303 	adc.w	r3, r2, r3
 8006104:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006112:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	f04f 0300 	mov.w	r3, #0
 800611c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006120:	4649      	mov	r1, r9
 8006122:	008b      	lsls	r3, r1, #2
 8006124:	4641      	mov	r1, r8
 8006126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800612a:	4641      	mov	r1, r8
 800612c:	008a      	lsls	r2, r1, #2
 800612e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006132:	f7fa fda9 	bl	8000c88 <__aeabi_uldivmod>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4611      	mov	r1, r2
 800613c:	4b38      	ldr	r3, [pc, #224]	@ (8006220 <UART_SetConfig+0x4e4>)
 800613e:	fba3 2301 	umull	r2, r3, r3, r1
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	2264      	movs	r2, #100	@ 0x64
 8006146:	fb02 f303 	mul.w	r3, r2, r3
 800614a:	1acb      	subs	r3, r1, r3
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	3332      	adds	r3, #50	@ 0x32
 8006150:	4a33      	ldr	r2, [pc, #204]	@ (8006220 <UART_SetConfig+0x4e4>)
 8006152:	fba2 2303 	umull	r2, r3, r2, r3
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800615c:	441c      	add	r4, r3
 800615e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006162:	2200      	movs	r2, #0
 8006164:	673b      	str	r3, [r7, #112]	@ 0x70
 8006166:	677a      	str	r2, [r7, #116]	@ 0x74
 8006168:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800616c:	4642      	mov	r2, r8
 800616e:	464b      	mov	r3, r9
 8006170:	1891      	adds	r1, r2, r2
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	415b      	adcs	r3, r3
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800617c:	4641      	mov	r1, r8
 800617e:	1851      	adds	r1, r2, r1
 8006180:	6039      	str	r1, [r7, #0]
 8006182:	4649      	mov	r1, r9
 8006184:	414b      	adcs	r3, r1
 8006186:	607b      	str	r3, [r7, #4]
 8006188:	f04f 0200 	mov.w	r2, #0
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006194:	4659      	mov	r1, fp
 8006196:	00cb      	lsls	r3, r1, #3
 8006198:	4651      	mov	r1, sl
 800619a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800619e:	4651      	mov	r1, sl
 80061a0:	00ca      	lsls	r2, r1, #3
 80061a2:	4610      	mov	r0, r2
 80061a4:	4619      	mov	r1, r3
 80061a6:	4603      	mov	r3, r0
 80061a8:	4642      	mov	r2, r8
 80061aa:	189b      	adds	r3, r3, r2
 80061ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061ae:	464b      	mov	r3, r9
 80061b0:	460a      	mov	r2, r1
 80061b2:	eb42 0303 	adc.w	r3, r2, r3
 80061b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80061c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061d0:	4649      	mov	r1, r9
 80061d2:	008b      	lsls	r3, r1, #2
 80061d4:	4641      	mov	r1, r8
 80061d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061da:	4641      	mov	r1, r8
 80061dc:	008a      	lsls	r2, r1, #2
 80061de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061e2:	f7fa fd51 	bl	8000c88 <__aeabi_uldivmod>
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
 80061ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006220 <UART_SetConfig+0x4e4>)
 80061ec:	fba3 1302 	umull	r1, r3, r3, r2
 80061f0:	095b      	lsrs	r3, r3, #5
 80061f2:	2164      	movs	r1, #100	@ 0x64
 80061f4:	fb01 f303 	mul.w	r3, r1, r3
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	3332      	adds	r3, #50	@ 0x32
 80061fe:	4a08      	ldr	r2, [pc, #32]	@ (8006220 <UART_SetConfig+0x4e4>)
 8006200:	fba2 2303 	umull	r2, r3, r2, r3
 8006204:	095b      	lsrs	r3, r3, #5
 8006206:	f003 020f 	and.w	r2, r3, #15
 800620a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4422      	add	r2, r4
 8006212:	609a      	str	r2, [r3, #8]
}
 8006214:	bf00      	nop
 8006216:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800621a:	46bd      	mov	sp, r7
 800621c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006220:	51eb851f 	.word	0x51eb851f

08006224 <srand>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4b10      	ldr	r3, [pc, #64]	@ (8006268 <srand+0x44>)
 8006228:	681d      	ldr	r5, [r3, #0]
 800622a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800622c:	4604      	mov	r4, r0
 800622e:	b9b3      	cbnz	r3, 800625e <srand+0x3a>
 8006230:	2018      	movs	r0, #24
 8006232:	f001 fd37 	bl	8007ca4 <malloc>
 8006236:	4602      	mov	r2, r0
 8006238:	6328      	str	r0, [r5, #48]	@ 0x30
 800623a:	b920      	cbnz	r0, 8006246 <srand+0x22>
 800623c:	4b0b      	ldr	r3, [pc, #44]	@ (800626c <srand+0x48>)
 800623e:	480c      	ldr	r0, [pc, #48]	@ (8006270 <srand+0x4c>)
 8006240:	2146      	movs	r1, #70	@ 0x46
 8006242:	f000 fe6d 	bl	8006f20 <__assert_func>
 8006246:	490b      	ldr	r1, [pc, #44]	@ (8006274 <srand+0x50>)
 8006248:	4b0b      	ldr	r3, [pc, #44]	@ (8006278 <srand+0x54>)
 800624a:	e9c0 1300 	strd	r1, r3, [r0]
 800624e:	4b0b      	ldr	r3, [pc, #44]	@ (800627c <srand+0x58>)
 8006250:	6083      	str	r3, [r0, #8]
 8006252:	230b      	movs	r3, #11
 8006254:	8183      	strh	r3, [r0, #12]
 8006256:	2100      	movs	r1, #0
 8006258:	2001      	movs	r0, #1
 800625a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800625e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006260:	2200      	movs	r2, #0
 8006262:	611c      	str	r4, [r3, #16]
 8006264:	615a      	str	r2, [r3, #20]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	20000048 	.word	0x20000048
 800626c:	0800926c 	.word	0x0800926c
 8006270:	08009283 	.word	0x08009283
 8006274:	abcd330e 	.word	0xabcd330e
 8006278:	e66d1234 	.word	0xe66d1234
 800627c:	0005deec 	.word	0x0005deec

08006280 <rand>:
 8006280:	4b16      	ldr	r3, [pc, #88]	@ (80062dc <rand+0x5c>)
 8006282:	b510      	push	{r4, lr}
 8006284:	681c      	ldr	r4, [r3, #0]
 8006286:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006288:	b9b3      	cbnz	r3, 80062b8 <rand+0x38>
 800628a:	2018      	movs	r0, #24
 800628c:	f001 fd0a 	bl	8007ca4 <malloc>
 8006290:	4602      	mov	r2, r0
 8006292:	6320      	str	r0, [r4, #48]	@ 0x30
 8006294:	b920      	cbnz	r0, 80062a0 <rand+0x20>
 8006296:	4b12      	ldr	r3, [pc, #72]	@ (80062e0 <rand+0x60>)
 8006298:	4812      	ldr	r0, [pc, #72]	@ (80062e4 <rand+0x64>)
 800629a:	2152      	movs	r1, #82	@ 0x52
 800629c:	f000 fe40 	bl	8006f20 <__assert_func>
 80062a0:	4911      	ldr	r1, [pc, #68]	@ (80062e8 <rand+0x68>)
 80062a2:	4b12      	ldr	r3, [pc, #72]	@ (80062ec <rand+0x6c>)
 80062a4:	e9c0 1300 	strd	r1, r3, [r0]
 80062a8:	4b11      	ldr	r3, [pc, #68]	@ (80062f0 <rand+0x70>)
 80062aa:	6083      	str	r3, [r0, #8]
 80062ac:	230b      	movs	r3, #11
 80062ae:	8183      	strh	r3, [r0, #12]
 80062b0:	2100      	movs	r1, #0
 80062b2:	2001      	movs	r0, #1
 80062b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80062b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80062ba:	480e      	ldr	r0, [pc, #56]	@ (80062f4 <rand+0x74>)
 80062bc:	690b      	ldr	r3, [r1, #16]
 80062be:	694c      	ldr	r4, [r1, #20]
 80062c0:	4a0d      	ldr	r2, [pc, #52]	@ (80062f8 <rand+0x78>)
 80062c2:	4358      	muls	r0, r3
 80062c4:	fb02 0004 	mla	r0, r2, r4, r0
 80062c8:	fba3 3202 	umull	r3, r2, r3, r2
 80062cc:	3301      	adds	r3, #1
 80062ce:	eb40 0002 	adc.w	r0, r0, r2
 80062d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80062d6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80062da:	bd10      	pop	{r4, pc}
 80062dc:	20000048 	.word	0x20000048
 80062e0:	0800926c 	.word	0x0800926c
 80062e4:	08009283 	.word	0x08009283
 80062e8:	abcd330e 	.word	0xabcd330e
 80062ec:	e66d1234 	.word	0xe66d1234
 80062f0:	0005deec 	.word	0x0005deec
 80062f4:	5851f42d 	.word	0x5851f42d
 80062f8:	4c957f2d 	.word	0x4c957f2d

080062fc <__cvt>:
 80062fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006300:	ec57 6b10 	vmov	r6, r7, d0
 8006304:	2f00      	cmp	r7, #0
 8006306:	460c      	mov	r4, r1
 8006308:	4619      	mov	r1, r3
 800630a:	463b      	mov	r3, r7
 800630c:	bfbb      	ittet	lt
 800630e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006312:	461f      	movlt	r7, r3
 8006314:	2300      	movge	r3, #0
 8006316:	232d      	movlt	r3, #45	@ 0x2d
 8006318:	700b      	strb	r3, [r1, #0]
 800631a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800631c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006320:	4691      	mov	r9, r2
 8006322:	f023 0820 	bic.w	r8, r3, #32
 8006326:	bfbc      	itt	lt
 8006328:	4632      	movlt	r2, r6
 800632a:	4616      	movlt	r6, r2
 800632c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006330:	d005      	beq.n	800633e <__cvt+0x42>
 8006332:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006336:	d100      	bne.n	800633a <__cvt+0x3e>
 8006338:	3401      	adds	r4, #1
 800633a:	2102      	movs	r1, #2
 800633c:	e000      	b.n	8006340 <__cvt+0x44>
 800633e:	2103      	movs	r1, #3
 8006340:	ab03      	add	r3, sp, #12
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	ab02      	add	r3, sp, #8
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	ec47 6b10 	vmov	d0, r6, r7
 800634c:	4653      	mov	r3, sl
 800634e:	4622      	mov	r2, r4
 8006350:	f000 fe8e 	bl	8007070 <_dtoa_r>
 8006354:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006358:	4605      	mov	r5, r0
 800635a:	d119      	bne.n	8006390 <__cvt+0x94>
 800635c:	f019 0f01 	tst.w	r9, #1
 8006360:	d00e      	beq.n	8006380 <__cvt+0x84>
 8006362:	eb00 0904 	add.w	r9, r0, r4
 8006366:	2200      	movs	r2, #0
 8006368:	2300      	movs	r3, #0
 800636a:	4630      	mov	r0, r6
 800636c:	4639      	mov	r1, r7
 800636e:	f7fa fbcb 	bl	8000b08 <__aeabi_dcmpeq>
 8006372:	b108      	cbz	r0, 8006378 <__cvt+0x7c>
 8006374:	f8cd 900c 	str.w	r9, [sp, #12]
 8006378:	2230      	movs	r2, #48	@ 0x30
 800637a:	9b03      	ldr	r3, [sp, #12]
 800637c:	454b      	cmp	r3, r9
 800637e:	d31e      	bcc.n	80063be <__cvt+0xc2>
 8006380:	9b03      	ldr	r3, [sp, #12]
 8006382:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006384:	1b5b      	subs	r3, r3, r5
 8006386:	4628      	mov	r0, r5
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	b004      	add	sp, #16
 800638c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006390:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006394:	eb00 0904 	add.w	r9, r0, r4
 8006398:	d1e5      	bne.n	8006366 <__cvt+0x6a>
 800639a:	7803      	ldrb	r3, [r0, #0]
 800639c:	2b30      	cmp	r3, #48	@ 0x30
 800639e:	d10a      	bne.n	80063b6 <__cvt+0xba>
 80063a0:	2200      	movs	r2, #0
 80063a2:	2300      	movs	r3, #0
 80063a4:	4630      	mov	r0, r6
 80063a6:	4639      	mov	r1, r7
 80063a8:	f7fa fbae 	bl	8000b08 <__aeabi_dcmpeq>
 80063ac:	b918      	cbnz	r0, 80063b6 <__cvt+0xba>
 80063ae:	f1c4 0401 	rsb	r4, r4, #1
 80063b2:	f8ca 4000 	str.w	r4, [sl]
 80063b6:	f8da 3000 	ldr.w	r3, [sl]
 80063ba:	4499      	add	r9, r3
 80063bc:	e7d3      	b.n	8006366 <__cvt+0x6a>
 80063be:	1c59      	adds	r1, r3, #1
 80063c0:	9103      	str	r1, [sp, #12]
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	e7d9      	b.n	800637a <__cvt+0x7e>

080063c6 <__exponent>:
 80063c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063c8:	2900      	cmp	r1, #0
 80063ca:	bfba      	itte	lt
 80063cc:	4249      	neglt	r1, r1
 80063ce:	232d      	movlt	r3, #45	@ 0x2d
 80063d0:	232b      	movge	r3, #43	@ 0x2b
 80063d2:	2909      	cmp	r1, #9
 80063d4:	7002      	strb	r2, [r0, #0]
 80063d6:	7043      	strb	r3, [r0, #1]
 80063d8:	dd29      	ble.n	800642e <__exponent+0x68>
 80063da:	f10d 0307 	add.w	r3, sp, #7
 80063de:	461d      	mov	r5, r3
 80063e0:	270a      	movs	r7, #10
 80063e2:	461a      	mov	r2, r3
 80063e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80063e8:	fb07 1416 	mls	r4, r7, r6, r1
 80063ec:	3430      	adds	r4, #48	@ 0x30
 80063ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 80063f2:	460c      	mov	r4, r1
 80063f4:	2c63      	cmp	r4, #99	@ 0x63
 80063f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80063fa:	4631      	mov	r1, r6
 80063fc:	dcf1      	bgt.n	80063e2 <__exponent+0x1c>
 80063fe:	3130      	adds	r1, #48	@ 0x30
 8006400:	1e94      	subs	r4, r2, #2
 8006402:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006406:	1c41      	adds	r1, r0, #1
 8006408:	4623      	mov	r3, r4
 800640a:	42ab      	cmp	r3, r5
 800640c:	d30a      	bcc.n	8006424 <__exponent+0x5e>
 800640e:	f10d 0309 	add.w	r3, sp, #9
 8006412:	1a9b      	subs	r3, r3, r2
 8006414:	42ac      	cmp	r4, r5
 8006416:	bf88      	it	hi
 8006418:	2300      	movhi	r3, #0
 800641a:	3302      	adds	r3, #2
 800641c:	4403      	add	r3, r0
 800641e:	1a18      	subs	r0, r3, r0
 8006420:	b003      	add	sp, #12
 8006422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006424:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006428:	f801 6f01 	strb.w	r6, [r1, #1]!
 800642c:	e7ed      	b.n	800640a <__exponent+0x44>
 800642e:	2330      	movs	r3, #48	@ 0x30
 8006430:	3130      	adds	r1, #48	@ 0x30
 8006432:	7083      	strb	r3, [r0, #2]
 8006434:	70c1      	strb	r1, [r0, #3]
 8006436:	1d03      	adds	r3, r0, #4
 8006438:	e7f1      	b.n	800641e <__exponent+0x58>
	...

0800643c <_printf_float>:
 800643c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006440:	b08d      	sub	sp, #52	@ 0x34
 8006442:	460c      	mov	r4, r1
 8006444:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006448:	4616      	mov	r6, r2
 800644a:	461f      	mov	r7, r3
 800644c:	4605      	mov	r5, r0
 800644e:	f000 fcef 	bl	8006e30 <_localeconv_r>
 8006452:	6803      	ldr	r3, [r0, #0]
 8006454:	9304      	str	r3, [sp, #16]
 8006456:	4618      	mov	r0, r3
 8006458:	f7f9 ff2a 	bl	80002b0 <strlen>
 800645c:	2300      	movs	r3, #0
 800645e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006460:	f8d8 3000 	ldr.w	r3, [r8]
 8006464:	9005      	str	r0, [sp, #20]
 8006466:	3307      	adds	r3, #7
 8006468:	f023 0307 	bic.w	r3, r3, #7
 800646c:	f103 0208 	add.w	r2, r3, #8
 8006470:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006474:	f8d4 b000 	ldr.w	fp, [r4]
 8006478:	f8c8 2000 	str.w	r2, [r8]
 800647c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006480:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006484:	9307      	str	r3, [sp, #28]
 8006486:	f8cd 8018 	str.w	r8, [sp, #24]
 800648a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800648e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006492:	4b9c      	ldr	r3, [pc, #624]	@ (8006704 <_printf_float+0x2c8>)
 8006494:	f04f 32ff 	mov.w	r2, #4294967295
 8006498:	f7fa fb68 	bl	8000b6c <__aeabi_dcmpun>
 800649c:	bb70      	cbnz	r0, 80064fc <_printf_float+0xc0>
 800649e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064a2:	4b98      	ldr	r3, [pc, #608]	@ (8006704 <_printf_float+0x2c8>)
 80064a4:	f04f 32ff 	mov.w	r2, #4294967295
 80064a8:	f7fa fb42 	bl	8000b30 <__aeabi_dcmple>
 80064ac:	bb30      	cbnz	r0, 80064fc <_printf_float+0xc0>
 80064ae:	2200      	movs	r2, #0
 80064b0:	2300      	movs	r3, #0
 80064b2:	4640      	mov	r0, r8
 80064b4:	4649      	mov	r1, r9
 80064b6:	f7fa fb31 	bl	8000b1c <__aeabi_dcmplt>
 80064ba:	b110      	cbz	r0, 80064c2 <_printf_float+0x86>
 80064bc:	232d      	movs	r3, #45	@ 0x2d
 80064be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064c2:	4a91      	ldr	r2, [pc, #580]	@ (8006708 <_printf_float+0x2cc>)
 80064c4:	4b91      	ldr	r3, [pc, #580]	@ (800670c <_printf_float+0x2d0>)
 80064c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80064ca:	bf8c      	ite	hi
 80064cc:	4690      	movhi	r8, r2
 80064ce:	4698      	movls	r8, r3
 80064d0:	2303      	movs	r3, #3
 80064d2:	6123      	str	r3, [r4, #16]
 80064d4:	f02b 0304 	bic.w	r3, fp, #4
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	f04f 0900 	mov.w	r9, #0
 80064de:	9700      	str	r7, [sp, #0]
 80064e0:	4633      	mov	r3, r6
 80064e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80064e4:	4621      	mov	r1, r4
 80064e6:	4628      	mov	r0, r5
 80064e8:	f000 f9d2 	bl	8006890 <_printf_common>
 80064ec:	3001      	adds	r0, #1
 80064ee:	f040 808d 	bne.w	800660c <_printf_float+0x1d0>
 80064f2:	f04f 30ff 	mov.w	r0, #4294967295
 80064f6:	b00d      	add	sp, #52	@ 0x34
 80064f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fc:	4642      	mov	r2, r8
 80064fe:	464b      	mov	r3, r9
 8006500:	4640      	mov	r0, r8
 8006502:	4649      	mov	r1, r9
 8006504:	f7fa fb32 	bl	8000b6c <__aeabi_dcmpun>
 8006508:	b140      	cbz	r0, 800651c <_printf_float+0xe0>
 800650a:	464b      	mov	r3, r9
 800650c:	2b00      	cmp	r3, #0
 800650e:	bfbc      	itt	lt
 8006510:	232d      	movlt	r3, #45	@ 0x2d
 8006512:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006516:	4a7e      	ldr	r2, [pc, #504]	@ (8006710 <_printf_float+0x2d4>)
 8006518:	4b7e      	ldr	r3, [pc, #504]	@ (8006714 <_printf_float+0x2d8>)
 800651a:	e7d4      	b.n	80064c6 <_printf_float+0x8a>
 800651c:	6863      	ldr	r3, [r4, #4]
 800651e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006522:	9206      	str	r2, [sp, #24]
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	d13b      	bne.n	80065a0 <_printf_float+0x164>
 8006528:	2306      	movs	r3, #6
 800652a:	6063      	str	r3, [r4, #4]
 800652c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006530:	2300      	movs	r3, #0
 8006532:	6022      	str	r2, [r4, #0]
 8006534:	9303      	str	r3, [sp, #12]
 8006536:	ab0a      	add	r3, sp, #40	@ 0x28
 8006538:	e9cd a301 	strd	sl, r3, [sp, #4]
 800653c:	ab09      	add	r3, sp, #36	@ 0x24
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	6861      	ldr	r1, [r4, #4]
 8006542:	ec49 8b10 	vmov	d0, r8, r9
 8006546:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800654a:	4628      	mov	r0, r5
 800654c:	f7ff fed6 	bl	80062fc <__cvt>
 8006550:	9b06      	ldr	r3, [sp, #24]
 8006552:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006554:	2b47      	cmp	r3, #71	@ 0x47
 8006556:	4680      	mov	r8, r0
 8006558:	d129      	bne.n	80065ae <_printf_float+0x172>
 800655a:	1cc8      	adds	r0, r1, #3
 800655c:	db02      	blt.n	8006564 <_printf_float+0x128>
 800655e:	6863      	ldr	r3, [r4, #4]
 8006560:	4299      	cmp	r1, r3
 8006562:	dd41      	ble.n	80065e8 <_printf_float+0x1ac>
 8006564:	f1aa 0a02 	sub.w	sl, sl, #2
 8006568:	fa5f fa8a 	uxtb.w	sl, sl
 800656c:	3901      	subs	r1, #1
 800656e:	4652      	mov	r2, sl
 8006570:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006574:	9109      	str	r1, [sp, #36]	@ 0x24
 8006576:	f7ff ff26 	bl	80063c6 <__exponent>
 800657a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800657c:	1813      	adds	r3, r2, r0
 800657e:	2a01      	cmp	r2, #1
 8006580:	4681      	mov	r9, r0
 8006582:	6123      	str	r3, [r4, #16]
 8006584:	dc02      	bgt.n	800658c <_printf_float+0x150>
 8006586:	6822      	ldr	r2, [r4, #0]
 8006588:	07d2      	lsls	r2, r2, #31
 800658a:	d501      	bpl.n	8006590 <_printf_float+0x154>
 800658c:	3301      	adds	r3, #1
 800658e:	6123      	str	r3, [r4, #16]
 8006590:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0a2      	beq.n	80064de <_printf_float+0xa2>
 8006598:	232d      	movs	r3, #45	@ 0x2d
 800659a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800659e:	e79e      	b.n	80064de <_printf_float+0xa2>
 80065a0:	9a06      	ldr	r2, [sp, #24]
 80065a2:	2a47      	cmp	r2, #71	@ 0x47
 80065a4:	d1c2      	bne.n	800652c <_printf_float+0xf0>
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1c0      	bne.n	800652c <_printf_float+0xf0>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e7bd      	b.n	800652a <_printf_float+0xee>
 80065ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80065b2:	d9db      	bls.n	800656c <_printf_float+0x130>
 80065b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80065b8:	d118      	bne.n	80065ec <_printf_float+0x1b0>
 80065ba:	2900      	cmp	r1, #0
 80065bc:	6863      	ldr	r3, [r4, #4]
 80065be:	dd0b      	ble.n	80065d8 <_printf_float+0x19c>
 80065c0:	6121      	str	r1, [r4, #16]
 80065c2:	b913      	cbnz	r3, 80065ca <_printf_float+0x18e>
 80065c4:	6822      	ldr	r2, [r4, #0]
 80065c6:	07d0      	lsls	r0, r2, #31
 80065c8:	d502      	bpl.n	80065d0 <_printf_float+0x194>
 80065ca:	3301      	adds	r3, #1
 80065cc:	440b      	add	r3, r1
 80065ce:	6123      	str	r3, [r4, #16]
 80065d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80065d2:	f04f 0900 	mov.w	r9, #0
 80065d6:	e7db      	b.n	8006590 <_printf_float+0x154>
 80065d8:	b913      	cbnz	r3, 80065e0 <_printf_float+0x1a4>
 80065da:	6822      	ldr	r2, [r4, #0]
 80065dc:	07d2      	lsls	r2, r2, #31
 80065de:	d501      	bpl.n	80065e4 <_printf_float+0x1a8>
 80065e0:	3302      	adds	r3, #2
 80065e2:	e7f4      	b.n	80065ce <_printf_float+0x192>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e7f2      	b.n	80065ce <_printf_float+0x192>
 80065e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80065ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065ee:	4299      	cmp	r1, r3
 80065f0:	db05      	blt.n	80065fe <_printf_float+0x1c2>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	6121      	str	r1, [r4, #16]
 80065f6:	07d8      	lsls	r0, r3, #31
 80065f8:	d5ea      	bpl.n	80065d0 <_printf_float+0x194>
 80065fa:	1c4b      	adds	r3, r1, #1
 80065fc:	e7e7      	b.n	80065ce <_printf_float+0x192>
 80065fe:	2900      	cmp	r1, #0
 8006600:	bfd4      	ite	le
 8006602:	f1c1 0202 	rsble	r2, r1, #2
 8006606:	2201      	movgt	r2, #1
 8006608:	4413      	add	r3, r2
 800660a:	e7e0      	b.n	80065ce <_printf_float+0x192>
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	055a      	lsls	r2, r3, #21
 8006610:	d407      	bmi.n	8006622 <_printf_float+0x1e6>
 8006612:	6923      	ldr	r3, [r4, #16]
 8006614:	4642      	mov	r2, r8
 8006616:	4631      	mov	r1, r6
 8006618:	4628      	mov	r0, r5
 800661a:	47b8      	blx	r7
 800661c:	3001      	adds	r0, #1
 800661e:	d12b      	bne.n	8006678 <_printf_float+0x23c>
 8006620:	e767      	b.n	80064f2 <_printf_float+0xb6>
 8006622:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006626:	f240 80dd 	bls.w	80067e4 <_printf_float+0x3a8>
 800662a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800662e:	2200      	movs	r2, #0
 8006630:	2300      	movs	r3, #0
 8006632:	f7fa fa69 	bl	8000b08 <__aeabi_dcmpeq>
 8006636:	2800      	cmp	r0, #0
 8006638:	d033      	beq.n	80066a2 <_printf_float+0x266>
 800663a:	4a37      	ldr	r2, [pc, #220]	@ (8006718 <_printf_float+0x2dc>)
 800663c:	2301      	movs	r3, #1
 800663e:	4631      	mov	r1, r6
 8006640:	4628      	mov	r0, r5
 8006642:	47b8      	blx	r7
 8006644:	3001      	adds	r0, #1
 8006646:	f43f af54 	beq.w	80064f2 <_printf_float+0xb6>
 800664a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800664e:	4543      	cmp	r3, r8
 8006650:	db02      	blt.n	8006658 <_printf_float+0x21c>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	07d8      	lsls	r0, r3, #31
 8006656:	d50f      	bpl.n	8006678 <_printf_float+0x23c>
 8006658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800665c:	4631      	mov	r1, r6
 800665e:	4628      	mov	r0, r5
 8006660:	47b8      	blx	r7
 8006662:	3001      	adds	r0, #1
 8006664:	f43f af45 	beq.w	80064f2 <_printf_float+0xb6>
 8006668:	f04f 0900 	mov.w	r9, #0
 800666c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006670:	f104 0a1a 	add.w	sl, r4, #26
 8006674:	45c8      	cmp	r8, r9
 8006676:	dc09      	bgt.n	800668c <_printf_float+0x250>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	079b      	lsls	r3, r3, #30
 800667c:	f100 8103 	bmi.w	8006886 <_printf_float+0x44a>
 8006680:	68e0      	ldr	r0, [r4, #12]
 8006682:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006684:	4298      	cmp	r0, r3
 8006686:	bfb8      	it	lt
 8006688:	4618      	movlt	r0, r3
 800668a:	e734      	b.n	80064f6 <_printf_float+0xba>
 800668c:	2301      	movs	r3, #1
 800668e:	4652      	mov	r2, sl
 8006690:	4631      	mov	r1, r6
 8006692:	4628      	mov	r0, r5
 8006694:	47b8      	blx	r7
 8006696:	3001      	adds	r0, #1
 8006698:	f43f af2b 	beq.w	80064f2 <_printf_float+0xb6>
 800669c:	f109 0901 	add.w	r9, r9, #1
 80066a0:	e7e8      	b.n	8006674 <_printf_float+0x238>
 80066a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	dc39      	bgt.n	800671c <_printf_float+0x2e0>
 80066a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006718 <_printf_float+0x2dc>)
 80066aa:	2301      	movs	r3, #1
 80066ac:	4631      	mov	r1, r6
 80066ae:	4628      	mov	r0, r5
 80066b0:	47b8      	blx	r7
 80066b2:	3001      	adds	r0, #1
 80066b4:	f43f af1d 	beq.w	80064f2 <_printf_float+0xb6>
 80066b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80066bc:	ea59 0303 	orrs.w	r3, r9, r3
 80066c0:	d102      	bne.n	80066c8 <_printf_float+0x28c>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	07d9      	lsls	r1, r3, #31
 80066c6:	d5d7      	bpl.n	8006678 <_printf_float+0x23c>
 80066c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066cc:	4631      	mov	r1, r6
 80066ce:	4628      	mov	r0, r5
 80066d0:	47b8      	blx	r7
 80066d2:	3001      	adds	r0, #1
 80066d4:	f43f af0d 	beq.w	80064f2 <_printf_float+0xb6>
 80066d8:	f04f 0a00 	mov.w	sl, #0
 80066dc:	f104 0b1a 	add.w	fp, r4, #26
 80066e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066e2:	425b      	negs	r3, r3
 80066e4:	4553      	cmp	r3, sl
 80066e6:	dc01      	bgt.n	80066ec <_printf_float+0x2b0>
 80066e8:	464b      	mov	r3, r9
 80066ea:	e793      	b.n	8006614 <_printf_float+0x1d8>
 80066ec:	2301      	movs	r3, #1
 80066ee:	465a      	mov	r2, fp
 80066f0:	4631      	mov	r1, r6
 80066f2:	4628      	mov	r0, r5
 80066f4:	47b8      	blx	r7
 80066f6:	3001      	adds	r0, #1
 80066f8:	f43f aefb 	beq.w	80064f2 <_printf_float+0xb6>
 80066fc:	f10a 0a01 	add.w	sl, sl, #1
 8006700:	e7ee      	b.n	80066e0 <_printf_float+0x2a4>
 8006702:	bf00      	nop
 8006704:	7fefffff 	.word	0x7fefffff
 8006708:	080092df 	.word	0x080092df
 800670c:	080092db 	.word	0x080092db
 8006710:	080092e7 	.word	0x080092e7
 8006714:	080092e3 	.word	0x080092e3
 8006718:	080092eb 	.word	0x080092eb
 800671c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800671e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006722:	4553      	cmp	r3, sl
 8006724:	bfa8      	it	ge
 8006726:	4653      	movge	r3, sl
 8006728:	2b00      	cmp	r3, #0
 800672a:	4699      	mov	r9, r3
 800672c:	dc36      	bgt.n	800679c <_printf_float+0x360>
 800672e:	f04f 0b00 	mov.w	fp, #0
 8006732:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006736:	f104 021a 	add.w	r2, r4, #26
 800673a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800673c:	9306      	str	r3, [sp, #24]
 800673e:	eba3 0309 	sub.w	r3, r3, r9
 8006742:	455b      	cmp	r3, fp
 8006744:	dc31      	bgt.n	80067aa <_printf_float+0x36e>
 8006746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006748:	459a      	cmp	sl, r3
 800674a:	dc3a      	bgt.n	80067c2 <_printf_float+0x386>
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	07da      	lsls	r2, r3, #31
 8006750:	d437      	bmi.n	80067c2 <_printf_float+0x386>
 8006752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006754:	ebaa 0903 	sub.w	r9, sl, r3
 8006758:	9b06      	ldr	r3, [sp, #24]
 800675a:	ebaa 0303 	sub.w	r3, sl, r3
 800675e:	4599      	cmp	r9, r3
 8006760:	bfa8      	it	ge
 8006762:	4699      	movge	r9, r3
 8006764:	f1b9 0f00 	cmp.w	r9, #0
 8006768:	dc33      	bgt.n	80067d2 <_printf_float+0x396>
 800676a:	f04f 0800 	mov.w	r8, #0
 800676e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006772:	f104 0b1a 	add.w	fp, r4, #26
 8006776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006778:	ebaa 0303 	sub.w	r3, sl, r3
 800677c:	eba3 0309 	sub.w	r3, r3, r9
 8006780:	4543      	cmp	r3, r8
 8006782:	f77f af79 	ble.w	8006678 <_printf_float+0x23c>
 8006786:	2301      	movs	r3, #1
 8006788:	465a      	mov	r2, fp
 800678a:	4631      	mov	r1, r6
 800678c:	4628      	mov	r0, r5
 800678e:	47b8      	blx	r7
 8006790:	3001      	adds	r0, #1
 8006792:	f43f aeae 	beq.w	80064f2 <_printf_float+0xb6>
 8006796:	f108 0801 	add.w	r8, r8, #1
 800679a:	e7ec      	b.n	8006776 <_printf_float+0x33a>
 800679c:	4642      	mov	r2, r8
 800679e:	4631      	mov	r1, r6
 80067a0:	4628      	mov	r0, r5
 80067a2:	47b8      	blx	r7
 80067a4:	3001      	adds	r0, #1
 80067a6:	d1c2      	bne.n	800672e <_printf_float+0x2f2>
 80067a8:	e6a3      	b.n	80064f2 <_printf_float+0xb6>
 80067aa:	2301      	movs	r3, #1
 80067ac:	4631      	mov	r1, r6
 80067ae:	4628      	mov	r0, r5
 80067b0:	9206      	str	r2, [sp, #24]
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	f43f ae9c 	beq.w	80064f2 <_printf_float+0xb6>
 80067ba:	9a06      	ldr	r2, [sp, #24]
 80067bc:	f10b 0b01 	add.w	fp, fp, #1
 80067c0:	e7bb      	b.n	800673a <_printf_float+0x2fe>
 80067c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067c6:	4631      	mov	r1, r6
 80067c8:	4628      	mov	r0, r5
 80067ca:	47b8      	blx	r7
 80067cc:	3001      	adds	r0, #1
 80067ce:	d1c0      	bne.n	8006752 <_printf_float+0x316>
 80067d0:	e68f      	b.n	80064f2 <_printf_float+0xb6>
 80067d2:	9a06      	ldr	r2, [sp, #24]
 80067d4:	464b      	mov	r3, r9
 80067d6:	4442      	add	r2, r8
 80067d8:	4631      	mov	r1, r6
 80067da:	4628      	mov	r0, r5
 80067dc:	47b8      	blx	r7
 80067de:	3001      	adds	r0, #1
 80067e0:	d1c3      	bne.n	800676a <_printf_float+0x32e>
 80067e2:	e686      	b.n	80064f2 <_printf_float+0xb6>
 80067e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067e8:	f1ba 0f01 	cmp.w	sl, #1
 80067ec:	dc01      	bgt.n	80067f2 <_printf_float+0x3b6>
 80067ee:	07db      	lsls	r3, r3, #31
 80067f0:	d536      	bpl.n	8006860 <_printf_float+0x424>
 80067f2:	2301      	movs	r3, #1
 80067f4:	4642      	mov	r2, r8
 80067f6:	4631      	mov	r1, r6
 80067f8:	4628      	mov	r0, r5
 80067fa:	47b8      	blx	r7
 80067fc:	3001      	adds	r0, #1
 80067fe:	f43f ae78 	beq.w	80064f2 <_printf_float+0xb6>
 8006802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	f43f ae70 	beq.w	80064f2 <_printf_float+0xb6>
 8006812:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006816:	2200      	movs	r2, #0
 8006818:	2300      	movs	r3, #0
 800681a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800681e:	f7fa f973 	bl	8000b08 <__aeabi_dcmpeq>
 8006822:	b9c0      	cbnz	r0, 8006856 <_printf_float+0x41a>
 8006824:	4653      	mov	r3, sl
 8006826:	f108 0201 	add.w	r2, r8, #1
 800682a:	4631      	mov	r1, r6
 800682c:	4628      	mov	r0, r5
 800682e:	47b8      	blx	r7
 8006830:	3001      	adds	r0, #1
 8006832:	d10c      	bne.n	800684e <_printf_float+0x412>
 8006834:	e65d      	b.n	80064f2 <_printf_float+0xb6>
 8006836:	2301      	movs	r3, #1
 8006838:	465a      	mov	r2, fp
 800683a:	4631      	mov	r1, r6
 800683c:	4628      	mov	r0, r5
 800683e:	47b8      	blx	r7
 8006840:	3001      	adds	r0, #1
 8006842:	f43f ae56 	beq.w	80064f2 <_printf_float+0xb6>
 8006846:	f108 0801 	add.w	r8, r8, #1
 800684a:	45d0      	cmp	r8, sl
 800684c:	dbf3      	blt.n	8006836 <_printf_float+0x3fa>
 800684e:	464b      	mov	r3, r9
 8006850:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006854:	e6df      	b.n	8006616 <_printf_float+0x1da>
 8006856:	f04f 0800 	mov.w	r8, #0
 800685a:	f104 0b1a 	add.w	fp, r4, #26
 800685e:	e7f4      	b.n	800684a <_printf_float+0x40e>
 8006860:	2301      	movs	r3, #1
 8006862:	4642      	mov	r2, r8
 8006864:	e7e1      	b.n	800682a <_printf_float+0x3ee>
 8006866:	2301      	movs	r3, #1
 8006868:	464a      	mov	r2, r9
 800686a:	4631      	mov	r1, r6
 800686c:	4628      	mov	r0, r5
 800686e:	47b8      	blx	r7
 8006870:	3001      	adds	r0, #1
 8006872:	f43f ae3e 	beq.w	80064f2 <_printf_float+0xb6>
 8006876:	f108 0801 	add.w	r8, r8, #1
 800687a:	68e3      	ldr	r3, [r4, #12]
 800687c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800687e:	1a5b      	subs	r3, r3, r1
 8006880:	4543      	cmp	r3, r8
 8006882:	dcf0      	bgt.n	8006866 <_printf_float+0x42a>
 8006884:	e6fc      	b.n	8006680 <_printf_float+0x244>
 8006886:	f04f 0800 	mov.w	r8, #0
 800688a:	f104 0919 	add.w	r9, r4, #25
 800688e:	e7f4      	b.n	800687a <_printf_float+0x43e>

08006890 <_printf_common>:
 8006890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006894:	4616      	mov	r6, r2
 8006896:	4698      	mov	r8, r3
 8006898:	688a      	ldr	r2, [r1, #8]
 800689a:	690b      	ldr	r3, [r1, #16]
 800689c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068a0:	4293      	cmp	r3, r2
 80068a2:	bfb8      	it	lt
 80068a4:	4613      	movlt	r3, r2
 80068a6:	6033      	str	r3, [r6, #0]
 80068a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068ac:	4607      	mov	r7, r0
 80068ae:	460c      	mov	r4, r1
 80068b0:	b10a      	cbz	r2, 80068b6 <_printf_common+0x26>
 80068b2:	3301      	adds	r3, #1
 80068b4:	6033      	str	r3, [r6, #0]
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	0699      	lsls	r1, r3, #26
 80068ba:	bf42      	ittt	mi
 80068bc:	6833      	ldrmi	r3, [r6, #0]
 80068be:	3302      	addmi	r3, #2
 80068c0:	6033      	strmi	r3, [r6, #0]
 80068c2:	6825      	ldr	r5, [r4, #0]
 80068c4:	f015 0506 	ands.w	r5, r5, #6
 80068c8:	d106      	bne.n	80068d8 <_printf_common+0x48>
 80068ca:	f104 0a19 	add.w	sl, r4, #25
 80068ce:	68e3      	ldr	r3, [r4, #12]
 80068d0:	6832      	ldr	r2, [r6, #0]
 80068d2:	1a9b      	subs	r3, r3, r2
 80068d4:	42ab      	cmp	r3, r5
 80068d6:	dc26      	bgt.n	8006926 <_printf_common+0x96>
 80068d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068dc:	6822      	ldr	r2, [r4, #0]
 80068de:	3b00      	subs	r3, #0
 80068e0:	bf18      	it	ne
 80068e2:	2301      	movne	r3, #1
 80068e4:	0692      	lsls	r2, r2, #26
 80068e6:	d42b      	bmi.n	8006940 <_printf_common+0xb0>
 80068e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068ec:	4641      	mov	r1, r8
 80068ee:	4638      	mov	r0, r7
 80068f0:	47c8      	blx	r9
 80068f2:	3001      	adds	r0, #1
 80068f4:	d01e      	beq.n	8006934 <_printf_common+0xa4>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	6922      	ldr	r2, [r4, #16]
 80068fa:	f003 0306 	and.w	r3, r3, #6
 80068fe:	2b04      	cmp	r3, #4
 8006900:	bf02      	ittt	eq
 8006902:	68e5      	ldreq	r5, [r4, #12]
 8006904:	6833      	ldreq	r3, [r6, #0]
 8006906:	1aed      	subeq	r5, r5, r3
 8006908:	68a3      	ldr	r3, [r4, #8]
 800690a:	bf0c      	ite	eq
 800690c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006910:	2500      	movne	r5, #0
 8006912:	4293      	cmp	r3, r2
 8006914:	bfc4      	itt	gt
 8006916:	1a9b      	subgt	r3, r3, r2
 8006918:	18ed      	addgt	r5, r5, r3
 800691a:	2600      	movs	r6, #0
 800691c:	341a      	adds	r4, #26
 800691e:	42b5      	cmp	r5, r6
 8006920:	d11a      	bne.n	8006958 <_printf_common+0xc8>
 8006922:	2000      	movs	r0, #0
 8006924:	e008      	b.n	8006938 <_printf_common+0xa8>
 8006926:	2301      	movs	r3, #1
 8006928:	4652      	mov	r2, sl
 800692a:	4641      	mov	r1, r8
 800692c:	4638      	mov	r0, r7
 800692e:	47c8      	blx	r9
 8006930:	3001      	adds	r0, #1
 8006932:	d103      	bne.n	800693c <_printf_common+0xac>
 8006934:	f04f 30ff 	mov.w	r0, #4294967295
 8006938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800693c:	3501      	adds	r5, #1
 800693e:	e7c6      	b.n	80068ce <_printf_common+0x3e>
 8006940:	18e1      	adds	r1, r4, r3
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	2030      	movs	r0, #48	@ 0x30
 8006946:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800694a:	4422      	add	r2, r4
 800694c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006950:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006954:	3302      	adds	r3, #2
 8006956:	e7c7      	b.n	80068e8 <_printf_common+0x58>
 8006958:	2301      	movs	r3, #1
 800695a:	4622      	mov	r2, r4
 800695c:	4641      	mov	r1, r8
 800695e:	4638      	mov	r0, r7
 8006960:	47c8      	blx	r9
 8006962:	3001      	adds	r0, #1
 8006964:	d0e6      	beq.n	8006934 <_printf_common+0xa4>
 8006966:	3601      	adds	r6, #1
 8006968:	e7d9      	b.n	800691e <_printf_common+0x8e>
	...

0800696c <_printf_i>:
 800696c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006970:	7e0f      	ldrb	r7, [r1, #24]
 8006972:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006974:	2f78      	cmp	r7, #120	@ 0x78
 8006976:	4691      	mov	r9, r2
 8006978:	4680      	mov	r8, r0
 800697a:	460c      	mov	r4, r1
 800697c:	469a      	mov	sl, r3
 800697e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006982:	d807      	bhi.n	8006994 <_printf_i+0x28>
 8006984:	2f62      	cmp	r7, #98	@ 0x62
 8006986:	d80a      	bhi.n	800699e <_printf_i+0x32>
 8006988:	2f00      	cmp	r7, #0
 800698a:	f000 80d1 	beq.w	8006b30 <_printf_i+0x1c4>
 800698e:	2f58      	cmp	r7, #88	@ 0x58
 8006990:	f000 80b8 	beq.w	8006b04 <_printf_i+0x198>
 8006994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006998:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800699c:	e03a      	b.n	8006a14 <_printf_i+0xa8>
 800699e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069a2:	2b15      	cmp	r3, #21
 80069a4:	d8f6      	bhi.n	8006994 <_printf_i+0x28>
 80069a6:	a101      	add	r1, pc, #4	@ (adr r1, 80069ac <_printf_i+0x40>)
 80069a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069ac:	08006a05 	.word	0x08006a05
 80069b0:	08006a19 	.word	0x08006a19
 80069b4:	08006995 	.word	0x08006995
 80069b8:	08006995 	.word	0x08006995
 80069bc:	08006995 	.word	0x08006995
 80069c0:	08006995 	.word	0x08006995
 80069c4:	08006a19 	.word	0x08006a19
 80069c8:	08006995 	.word	0x08006995
 80069cc:	08006995 	.word	0x08006995
 80069d0:	08006995 	.word	0x08006995
 80069d4:	08006995 	.word	0x08006995
 80069d8:	08006b17 	.word	0x08006b17
 80069dc:	08006a43 	.word	0x08006a43
 80069e0:	08006ad1 	.word	0x08006ad1
 80069e4:	08006995 	.word	0x08006995
 80069e8:	08006995 	.word	0x08006995
 80069ec:	08006b39 	.word	0x08006b39
 80069f0:	08006995 	.word	0x08006995
 80069f4:	08006a43 	.word	0x08006a43
 80069f8:	08006995 	.word	0x08006995
 80069fc:	08006995 	.word	0x08006995
 8006a00:	08006ad9 	.word	0x08006ad9
 8006a04:	6833      	ldr	r3, [r6, #0]
 8006a06:	1d1a      	adds	r2, r3, #4
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6032      	str	r2, [r6, #0]
 8006a0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a14:	2301      	movs	r3, #1
 8006a16:	e09c      	b.n	8006b52 <_printf_i+0x1e6>
 8006a18:	6833      	ldr	r3, [r6, #0]
 8006a1a:	6820      	ldr	r0, [r4, #0]
 8006a1c:	1d19      	adds	r1, r3, #4
 8006a1e:	6031      	str	r1, [r6, #0]
 8006a20:	0606      	lsls	r6, r0, #24
 8006a22:	d501      	bpl.n	8006a28 <_printf_i+0xbc>
 8006a24:	681d      	ldr	r5, [r3, #0]
 8006a26:	e003      	b.n	8006a30 <_printf_i+0xc4>
 8006a28:	0645      	lsls	r5, r0, #25
 8006a2a:	d5fb      	bpl.n	8006a24 <_printf_i+0xb8>
 8006a2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a30:	2d00      	cmp	r5, #0
 8006a32:	da03      	bge.n	8006a3c <_printf_i+0xd0>
 8006a34:	232d      	movs	r3, #45	@ 0x2d
 8006a36:	426d      	negs	r5, r5
 8006a38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a3c:	4858      	ldr	r0, [pc, #352]	@ (8006ba0 <_printf_i+0x234>)
 8006a3e:	230a      	movs	r3, #10
 8006a40:	e011      	b.n	8006a66 <_printf_i+0xfa>
 8006a42:	6821      	ldr	r1, [r4, #0]
 8006a44:	6833      	ldr	r3, [r6, #0]
 8006a46:	0608      	lsls	r0, r1, #24
 8006a48:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a4c:	d402      	bmi.n	8006a54 <_printf_i+0xe8>
 8006a4e:	0649      	lsls	r1, r1, #25
 8006a50:	bf48      	it	mi
 8006a52:	b2ad      	uxthmi	r5, r5
 8006a54:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a56:	4852      	ldr	r0, [pc, #328]	@ (8006ba0 <_printf_i+0x234>)
 8006a58:	6033      	str	r3, [r6, #0]
 8006a5a:	bf14      	ite	ne
 8006a5c:	230a      	movne	r3, #10
 8006a5e:	2308      	moveq	r3, #8
 8006a60:	2100      	movs	r1, #0
 8006a62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a66:	6866      	ldr	r6, [r4, #4]
 8006a68:	60a6      	str	r6, [r4, #8]
 8006a6a:	2e00      	cmp	r6, #0
 8006a6c:	db05      	blt.n	8006a7a <_printf_i+0x10e>
 8006a6e:	6821      	ldr	r1, [r4, #0]
 8006a70:	432e      	orrs	r6, r5
 8006a72:	f021 0104 	bic.w	r1, r1, #4
 8006a76:	6021      	str	r1, [r4, #0]
 8006a78:	d04b      	beq.n	8006b12 <_printf_i+0x1a6>
 8006a7a:	4616      	mov	r6, r2
 8006a7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a80:	fb03 5711 	mls	r7, r3, r1, r5
 8006a84:	5dc7      	ldrb	r7, [r0, r7]
 8006a86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a8a:	462f      	mov	r7, r5
 8006a8c:	42bb      	cmp	r3, r7
 8006a8e:	460d      	mov	r5, r1
 8006a90:	d9f4      	bls.n	8006a7c <_printf_i+0x110>
 8006a92:	2b08      	cmp	r3, #8
 8006a94:	d10b      	bne.n	8006aae <_printf_i+0x142>
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	07df      	lsls	r7, r3, #31
 8006a9a:	d508      	bpl.n	8006aae <_printf_i+0x142>
 8006a9c:	6923      	ldr	r3, [r4, #16]
 8006a9e:	6861      	ldr	r1, [r4, #4]
 8006aa0:	4299      	cmp	r1, r3
 8006aa2:	bfde      	ittt	le
 8006aa4:	2330      	movle	r3, #48	@ 0x30
 8006aa6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006aaa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006aae:	1b92      	subs	r2, r2, r6
 8006ab0:	6122      	str	r2, [r4, #16]
 8006ab2:	f8cd a000 	str.w	sl, [sp]
 8006ab6:	464b      	mov	r3, r9
 8006ab8:	aa03      	add	r2, sp, #12
 8006aba:	4621      	mov	r1, r4
 8006abc:	4640      	mov	r0, r8
 8006abe:	f7ff fee7 	bl	8006890 <_printf_common>
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	d14a      	bne.n	8006b5c <_printf_i+0x1f0>
 8006ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aca:	b004      	add	sp, #16
 8006acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	f043 0320 	orr.w	r3, r3, #32
 8006ad6:	6023      	str	r3, [r4, #0]
 8006ad8:	4832      	ldr	r0, [pc, #200]	@ (8006ba4 <_printf_i+0x238>)
 8006ada:	2778      	movs	r7, #120	@ 0x78
 8006adc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	6831      	ldr	r1, [r6, #0]
 8006ae4:	061f      	lsls	r7, r3, #24
 8006ae6:	f851 5b04 	ldr.w	r5, [r1], #4
 8006aea:	d402      	bmi.n	8006af2 <_printf_i+0x186>
 8006aec:	065f      	lsls	r7, r3, #25
 8006aee:	bf48      	it	mi
 8006af0:	b2ad      	uxthmi	r5, r5
 8006af2:	6031      	str	r1, [r6, #0]
 8006af4:	07d9      	lsls	r1, r3, #31
 8006af6:	bf44      	itt	mi
 8006af8:	f043 0320 	orrmi.w	r3, r3, #32
 8006afc:	6023      	strmi	r3, [r4, #0]
 8006afe:	b11d      	cbz	r5, 8006b08 <_printf_i+0x19c>
 8006b00:	2310      	movs	r3, #16
 8006b02:	e7ad      	b.n	8006a60 <_printf_i+0xf4>
 8006b04:	4826      	ldr	r0, [pc, #152]	@ (8006ba0 <_printf_i+0x234>)
 8006b06:	e7e9      	b.n	8006adc <_printf_i+0x170>
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	f023 0320 	bic.w	r3, r3, #32
 8006b0e:	6023      	str	r3, [r4, #0]
 8006b10:	e7f6      	b.n	8006b00 <_printf_i+0x194>
 8006b12:	4616      	mov	r6, r2
 8006b14:	e7bd      	b.n	8006a92 <_printf_i+0x126>
 8006b16:	6833      	ldr	r3, [r6, #0]
 8006b18:	6825      	ldr	r5, [r4, #0]
 8006b1a:	6961      	ldr	r1, [r4, #20]
 8006b1c:	1d18      	adds	r0, r3, #4
 8006b1e:	6030      	str	r0, [r6, #0]
 8006b20:	062e      	lsls	r6, r5, #24
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	d501      	bpl.n	8006b2a <_printf_i+0x1be>
 8006b26:	6019      	str	r1, [r3, #0]
 8006b28:	e002      	b.n	8006b30 <_printf_i+0x1c4>
 8006b2a:	0668      	lsls	r0, r5, #25
 8006b2c:	d5fb      	bpl.n	8006b26 <_printf_i+0x1ba>
 8006b2e:	8019      	strh	r1, [r3, #0]
 8006b30:	2300      	movs	r3, #0
 8006b32:	6123      	str	r3, [r4, #16]
 8006b34:	4616      	mov	r6, r2
 8006b36:	e7bc      	b.n	8006ab2 <_printf_i+0x146>
 8006b38:	6833      	ldr	r3, [r6, #0]
 8006b3a:	1d1a      	adds	r2, r3, #4
 8006b3c:	6032      	str	r2, [r6, #0]
 8006b3e:	681e      	ldr	r6, [r3, #0]
 8006b40:	6862      	ldr	r2, [r4, #4]
 8006b42:	2100      	movs	r1, #0
 8006b44:	4630      	mov	r0, r6
 8006b46:	f7f9 fb63 	bl	8000210 <memchr>
 8006b4a:	b108      	cbz	r0, 8006b50 <_printf_i+0x1e4>
 8006b4c:	1b80      	subs	r0, r0, r6
 8006b4e:	6060      	str	r0, [r4, #4]
 8006b50:	6863      	ldr	r3, [r4, #4]
 8006b52:	6123      	str	r3, [r4, #16]
 8006b54:	2300      	movs	r3, #0
 8006b56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b5a:	e7aa      	b.n	8006ab2 <_printf_i+0x146>
 8006b5c:	6923      	ldr	r3, [r4, #16]
 8006b5e:	4632      	mov	r2, r6
 8006b60:	4649      	mov	r1, r9
 8006b62:	4640      	mov	r0, r8
 8006b64:	47d0      	blx	sl
 8006b66:	3001      	adds	r0, #1
 8006b68:	d0ad      	beq.n	8006ac6 <_printf_i+0x15a>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	079b      	lsls	r3, r3, #30
 8006b6e:	d413      	bmi.n	8006b98 <_printf_i+0x22c>
 8006b70:	68e0      	ldr	r0, [r4, #12]
 8006b72:	9b03      	ldr	r3, [sp, #12]
 8006b74:	4298      	cmp	r0, r3
 8006b76:	bfb8      	it	lt
 8006b78:	4618      	movlt	r0, r3
 8006b7a:	e7a6      	b.n	8006aca <_printf_i+0x15e>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	4632      	mov	r2, r6
 8006b80:	4649      	mov	r1, r9
 8006b82:	4640      	mov	r0, r8
 8006b84:	47d0      	blx	sl
 8006b86:	3001      	adds	r0, #1
 8006b88:	d09d      	beq.n	8006ac6 <_printf_i+0x15a>
 8006b8a:	3501      	adds	r5, #1
 8006b8c:	68e3      	ldr	r3, [r4, #12]
 8006b8e:	9903      	ldr	r1, [sp, #12]
 8006b90:	1a5b      	subs	r3, r3, r1
 8006b92:	42ab      	cmp	r3, r5
 8006b94:	dcf2      	bgt.n	8006b7c <_printf_i+0x210>
 8006b96:	e7eb      	b.n	8006b70 <_printf_i+0x204>
 8006b98:	2500      	movs	r5, #0
 8006b9a:	f104 0619 	add.w	r6, r4, #25
 8006b9e:	e7f5      	b.n	8006b8c <_printf_i+0x220>
 8006ba0:	080092ed 	.word	0x080092ed
 8006ba4:	080092fe 	.word	0x080092fe

08006ba8 <std>:
 8006ba8:	2300      	movs	r3, #0
 8006baa:	b510      	push	{r4, lr}
 8006bac:	4604      	mov	r4, r0
 8006bae:	e9c0 3300 	strd	r3, r3, [r0]
 8006bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bb6:	6083      	str	r3, [r0, #8]
 8006bb8:	8181      	strh	r1, [r0, #12]
 8006bba:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bbc:	81c2      	strh	r2, [r0, #14]
 8006bbe:	6183      	str	r3, [r0, #24]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	2208      	movs	r2, #8
 8006bc4:	305c      	adds	r0, #92	@ 0x5c
 8006bc6:	f000 f92a 	bl	8006e1e <memset>
 8006bca:	4b0d      	ldr	r3, [pc, #52]	@ (8006c00 <std+0x58>)
 8006bcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bce:	4b0d      	ldr	r3, [pc, #52]	@ (8006c04 <std+0x5c>)
 8006bd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c08 <std+0x60>)
 8006bd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c0c <std+0x64>)
 8006bd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bda:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <std+0x68>)
 8006bdc:	6224      	str	r4, [r4, #32]
 8006bde:	429c      	cmp	r4, r3
 8006be0:	d006      	beq.n	8006bf0 <std+0x48>
 8006be2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006be6:	4294      	cmp	r4, r2
 8006be8:	d002      	beq.n	8006bf0 <std+0x48>
 8006bea:	33d0      	adds	r3, #208	@ 0xd0
 8006bec:	429c      	cmp	r4, r3
 8006bee:	d105      	bne.n	8006bfc <std+0x54>
 8006bf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf8:	f000 b98e 	b.w	8006f18 <__retarget_lock_init_recursive>
 8006bfc:	bd10      	pop	{r4, pc}
 8006bfe:	bf00      	nop
 8006c00:	08006d99 	.word	0x08006d99
 8006c04:	08006dbb 	.word	0x08006dbb
 8006c08:	08006df3 	.word	0x08006df3
 8006c0c:	08006e17 	.word	0x08006e17
 8006c10:	2000057c 	.word	0x2000057c

08006c14 <stdio_exit_handler>:
 8006c14:	4a02      	ldr	r2, [pc, #8]	@ (8006c20 <stdio_exit_handler+0xc>)
 8006c16:	4903      	ldr	r1, [pc, #12]	@ (8006c24 <stdio_exit_handler+0x10>)
 8006c18:	4803      	ldr	r0, [pc, #12]	@ (8006c28 <stdio_exit_handler+0x14>)
 8006c1a:	f000 b869 	b.w	8006cf0 <_fwalk_sglue>
 8006c1e:	bf00      	nop
 8006c20:	2000003c 	.word	0x2000003c
 8006c24:	080088bd 	.word	0x080088bd
 8006c28:	2000004c 	.word	0x2000004c

08006c2c <cleanup_stdio>:
 8006c2c:	6841      	ldr	r1, [r0, #4]
 8006c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c60 <cleanup_stdio+0x34>)
 8006c30:	4299      	cmp	r1, r3
 8006c32:	b510      	push	{r4, lr}
 8006c34:	4604      	mov	r4, r0
 8006c36:	d001      	beq.n	8006c3c <cleanup_stdio+0x10>
 8006c38:	f001 fe40 	bl	80088bc <_fflush_r>
 8006c3c:	68a1      	ldr	r1, [r4, #8]
 8006c3e:	4b09      	ldr	r3, [pc, #36]	@ (8006c64 <cleanup_stdio+0x38>)
 8006c40:	4299      	cmp	r1, r3
 8006c42:	d002      	beq.n	8006c4a <cleanup_stdio+0x1e>
 8006c44:	4620      	mov	r0, r4
 8006c46:	f001 fe39 	bl	80088bc <_fflush_r>
 8006c4a:	68e1      	ldr	r1, [r4, #12]
 8006c4c:	4b06      	ldr	r3, [pc, #24]	@ (8006c68 <cleanup_stdio+0x3c>)
 8006c4e:	4299      	cmp	r1, r3
 8006c50:	d004      	beq.n	8006c5c <cleanup_stdio+0x30>
 8006c52:	4620      	mov	r0, r4
 8006c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c58:	f001 be30 	b.w	80088bc <_fflush_r>
 8006c5c:	bd10      	pop	{r4, pc}
 8006c5e:	bf00      	nop
 8006c60:	2000057c 	.word	0x2000057c
 8006c64:	200005e4 	.word	0x200005e4
 8006c68:	2000064c 	.word	0x2000064c

08006c6c <global_stdio_init.part.0>:
 8006c6c:	b510      	push	{r4, lr}
 8006c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c9c <global_stdio_init.part.0+0x30>)
 8006c70:	4c0b      	ldr	r4, [pc, #44]	@ (8006ca0 <global_stdio_init.part.0+0x34>)
 8006c72:	4a0c      	ldr	r2, [pc, #48]	@ (8006ca4 <global_stdio_init.part.0+0x38>)
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	4620      	mov	r0, r4
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2104      	movs	r1, #4
 8006c7c:	f7ff ff94 	bl	8006ba8 <std>
 8006c80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c84:	2201      	movs	r2, #1
 8006c86:	2109      	movs	r1, #9
 8006c88:	f7ff ff8e 	bl	8006ba8 <std>
 8006c8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c90:	2202      	movs	r2, #2
 8006c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c96:	2112      	movs	r1, #18
 8006c98:	f7ff bf86 	b.w	8006ba8 <std>
 8006c9c:	200006b4 	.word	0x200006b4
 8006ca0:	2000057c 	.word	0x2000057c
 8006ca4:	08006c15 	.word	0x08006c15

08006ca8 <__sfp_lock_acquire>:
 8006ca8:	4801      	ldr	r0, [pc, #4]	@ (8006cb0 <__sfp_lock_acquire+0x8>)
 8006caa:	f000 b936 	b.w	8006f1a <__retarget_lock_acquire_recursive>
 8006cae:	bf00      	nop
 8006cb0:	200006bd 	.word	0x200006bd

08006cb4 <__sfp_lock_release>:
 8006cb4:	4801      	ldr	r0, [pc, #4]	@ (8006cbc <__sfp_lock_release+0x8>)
 8006cb6:	f000 b931 	b.w	8006f1c <__retarget_lock_release_recursive>
 8006cba:	bf00      	nop
 8006cbc:	200006bd 	.word	0x200006bd

08006cc0 <__sinit>:
 8006cc0:	b510      	push	{r4, lr}
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	f7ff fff0 	bl	8006ca8 <__sfp_lock_acquire>
 8006cc8:	6a23      	ldr	r3, [r4, #32]
 8006cca:	b11b      	cbz	r3, 8006cd4 <__sinit+0x14>
 8006ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd0:	f7ff bff0 	b.w	8006cb4 <__sfp_lock_release>
 8006cd4:	4b04      	ldr	r3, [pc, #16]	@ (8006ce8 <__sinit+0x28>)
 8006cd6:	6223      	str	r3, [r4, #32]
 8006cd8:	4b04      	ldr	r3, [pc, #16]	@ (8006cec <__sinit+0x2c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1f5      	bne.n	8006ccc <__sinit+0xc>
 8006ce0:	f7ff ffc4 	bl	8006c6c <global_stdio_init.part.0>
 8006ce4:	e7f2      	b.n	8006ccc <__sinit+0xc>
 8006ce6:	bf00      	nop
 8006ce8:	08006c2d 	.word	0x08006c2d
 8006cec:	200006b4 	.word	0x200006b4

08006cf0 <_fwalk_sglue>:
 8006cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cf4:	4607      	mov	r7, r0
 8006cf6:	4688      	mov	r8, r1
 8006cf8:	4614      	mov	r4, r2
 8006cfa:	2600      	movs	r6, #0
 8006cfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d00:	f1b9 0901 	subs.w	r9, r9, #1
 8006d04:	d505      	bpl.n	8006d12 <_fwalk_sglue+0x22>
 8006d06:	6824      	ldr	r4, [r4, #0]
 8006d08:	2c00      	cmp	r4, #0
 8006d0a:	d1f7      	bne.n	8006cfc <_fwalk_sglue+0xc>
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d12:	89ab      	ldrh	r3, [r5, #12]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d907      	bls.n	8006d28 <_fwalk_sglue+0x38>
 8006d18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	d003      	beq.n	8006d28 <_fwalk_sglue+0x38>
 8006d20:	4629      	mov	r1, r5
 8006d22:	4638      	mov	r0, r7
 8006d24:	47c0      	blx	r8
 8006d26:	4306      	orrs	r6, r0
 8006d28:	3568      	adds	r5, #104	@ 0x68
 8006d2a:	e7e9      	b.n	8006d00 <_fwalk_sglue+0x10>

08006d2c <sniprintf>:
 8006d2c:	b40c      	push	{r2, r3}
 8006d2e:	b530      	push	{r4, r5, lr}
 8006d30:	4b18      	ldr	r3, [pc, #96]	@ (8006d94 <sniprintf+0x68>)
 8006d32:	1e0c      	subs	r4, r1, #0
 8006d34:	681d      	ldr	r5, [r3, #0]
 8006d36:	b09d      	sub	sp, #116	@ 0x74
 8006d38:	da08      	bge.n	8006d4c <sniprintf+0x20>
 8006d3a:	238b      	movs	r3, #139	@ 0x8b
 8006d3c:	602b      	str	r3, [r5, #0]
 8006d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d42:	b01d      	add	sp, #116	@ 0x74
 8006d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d48:	b002      	add	sp, #8
 8006d4a:	4770      	bx	lr
 8006d4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006d50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d54:	f04f 0300 	mov.w	r3, #0
 8006d58:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006d5a:	bf14      	ite	ne
 8006d5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d60:	4623      	moveq	r3, r4
 8006d62:	9304      	str	r3, [sp, #16]
 8006d64:	9307      	str	r3, [sp, #28]
 8006d66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d6a:	9002      	str	r0, [sp, #8]
 8006d6c:	9006      	str	r0, [sp, #24]
 8006d6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d72:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d74:	ab21      	add	r3, sp, #132	@ 0x84
 8006d76:	a902      	add	r1, sp, #8
 8006d78:	4628      	mov	r0, r5
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	f001 fc1e 	bl	80085bc <_svfiprintf_r>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	bfbc      	itt	lt
 8006d84:	238b      	movlt	r3, #139	@ 0x8b
 8006d86:	602b      	strlt	r3, [r5, #0]
 8006d88:	2c00      	cmp	r4, #0
 8006d8a:	d0da      	beq.n	8006d42 <sniprintf+0x16>
 8006d8c:	9b02      	ldr	r3, [sp, #8]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	e7d6      	b.n	8006d42 <sniprintf+0x16>
 8006d94:	20000048 	.word	0x20000048

08006d98 <__sread>:
 8006d98:	b510      	push	{r4, lr}
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da0:	f000 f86c 	bl	8006e7c <_read_r>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	bfab      	itete	ge
 8006da8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006daa:	89a3      	ldrhlt	r3, [r4, #12]
 8006dac:	181b      	addge	r3, r3, r0
 8006dae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006db2:	bfac      	ite	ge
 8006db4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006db6:	81a3      	strhlt	r3, [r4, #12]
 8006db8:	bd10      	pop	{r4, pc}

08006dba <__swrite>:
 8006dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dbe:	461f      	mov	r7, r3
 8006dc0:	898b      	ldrh	r3, [r1, #12]
 8006dc2:	05db      	lsls	r3, r3, #23
 8006dc4:	4605      	mov	r5, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	4616      	mov	r6, r2
 8006dca:	d505      	bpl.n	8006dd8 <__swrite+0x1e>
 8006dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f000 f840 	bl	8006e58 <_lseek_r>
 8006dd8:	89a3      	ldrh	r3, [r4, #12]
 8006dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006de2:	81a3      	strh	r3, [r4, #12]
 8006de4:	4632      	mov	r2, r6
 8006de6:	463b      	mov	r3, r7
 8006de8:	4628      	mov	r0, r5
 8006dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dee:	f000 b857 	b.w	8006ea0 <_write_r>

08006df2 <__sseek>:
 8006df2:	b510      	push	{r4, lr}
 8006df4:	460c      	mov	r4, r1
 8006df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dfa:	f000 f82d 	bl	8006e58 <_lseek_r>
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	bf15      	itete	ne
 8006e04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e0e:	81a3      	strheq	r3, [r4, #12]
 8006e10:	bf18      	it	ne
 8006e12:	81a3      	strhne	r3, [r4, #12]
 8006e14:	bd10      	pop	{r4, pc}

08006e16 <__sclose>:
 8006e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e1a:	f000 b80d 	b.w	8006e38 <_close_r>

08006e1e <memset>:
 8006e1e:	4402      	add	r2, r0
 8006e20:	4603      	mov	r3, r0
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d100      	bne.n	8006e28 <memset+0xa>
 8006e26:	4770      	bx	lr
 8006e28:	f803 1b01 	strb.w	r1, [r3], #1
 8006e2c:	e7f9      	b.n	8006e22 <memset+0x4>
	...

08006e30 <_localeconv_r>:
 8006e30:	4800      	ldr	r0, [pc, #0]	@ (8006e34 <_localeconv_r+0x4>)
 8006e32:	4770      	bx	lr
 8006e34:	20000188 	.word	0x20000188

08006e38 <_close_r>:
 8006e38:	b538      	push	{r3, r4, r5, lr}
 8006e3a:	4d06      	ldr	r5, [pc, #24]	@ (8006e54 <_close_r+0x1c>)
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	4604      	mov	r4, r0
 8006e40:	4608      	mov	r0, r1
 8006e42:	602b      	str	r3, [r5, #0]
 8006e44:	f7fb f988 	bl	8002158 <_close>
 8006e48:	1c43      	adds	r3, r0, #1
 8006e4a:	d102      	bne.n	8006e52 <_close_r+0x1a>
 8006e4c:	682b      	ldr	r3, [r5, #0]
 8006e4e:	b103      	cbz	r3, 8006e52 <_close_r+0x1a>
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	bd38      	pop	{r3, r4, r5, pc}
 8006e54:	200006b8 	.word	0x200006b8

08006e58 <_lseek_r>:
 8006e58:	b538      	push	{r3, r4, r5, lr}
 8006e5a:	4d07      	ldr	r5, [pc, #28]	@ (8006e78 <_lseek_r+0x20>)
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	4608      	mov	r0, r1
 8006e60:	4611      	mov	r1, r2
 8006e62:	2200      	movs	r2, #0
 8006e64:	602a      	str	r2, [r5, #0]
 8006e66:	461a      	mov	r2, r3
 8006e68:	f7fb f99d 	bl	80021a6 <_lseek>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	d102      	bne.n	8006e76 <_lseek_r+0x1e>
 8006e70:	682b      	ldr	r3, [r5, #0]
 8006e72:	b103      	cbz	r3, 8006e76 <_lseek_r+0x1e>
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	bd38      	pop	{r3, r4, r5, pc}
 8006e78:	200006b8 	.word	0x200006b8

08006e7c <_read_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4d07      	ldr	r5, [pc, #28]	@ (8006e9c <_read_r+0x20>)
 8006e80:	4604      	mov	r4, r0
 8006e82:	4608      	mov	r0, r1
 8006e84:	4611      	mov	r1, r2
 8006e86:	2200      	movs	r2, #0
 8006e88:	602a      	str	r2, [r5, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f7fb f92b 	bl	80020e6 <_read>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d102      	bne.n	8006e9a <_read_r+0x1e>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	b103      	cbz	r3, 8006e9a <_read_r+0x1e>
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	200006b8 	.word	0x200006b8

08006ea0 <_write_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4d07      	ldr	r5, [pc, #28]	@ (8006ec0 <_write_r+0x20>)
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	4608      	mov	r0, r1
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	2200      	movs	r2, #0
 8006eac:	602a      	str	r2, [r5, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f7fb f936 	bl	8002120 <_write>
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	d102      	bne.n	8006ebe <_write_r+0x1e>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	b103      	cbz	r3, 8006ebe <_write_r+0x1e>
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	bd38      	pop	{r3, r4, r5, pc}
 8006ec0:	200006b8 	.word	0x200006b8

08006ec4 <__errno>:
 8006ec4:	4b01      	ldr	r3, [pc, #4]	@ (8006ecc <__errno+0x8>)
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	20000048 	.word	0x20000048

08006ed0 <__libc_init_array>:
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	4d0d      	ldr	r5, [pc, #52]	@ (8006f08 <__libc_init_array+0x38>)
 8006ed4:	4c0d      	ldr	r4, [pc, #52]	@ (8006f0c <__libc_init_array+0x3c>)
 8006ed6:	1b64      	subs	r4, r4, r5
 8006ed8:	10a4      	asrs	r4, r4, #2
 8006eda:	2600      	movs	r6, #0
 8006edc:	42a6      	cmp	r6, r4
 8006ede:	d109      	bne.n	8006ef4 <__libc_init_array+0x24>
 8006ee0:	4d0b      	ldr	r5, [pc, #44]	@ (8006f10 <__libc_init_array+0x40>)
 8006ee2:	4c0c      	ldr	r4, [pc, #48]	@ (8006f14 <__libc_init_array+0x44>)
 8006ee4:	f002 f86a 	bl	8008fbc <_init>
 8006ee8:	1b64      	subs	r4, r4, r5
 8006eea:	10a4      	asrs	r4, r4, #2
 8006eec:	2600      	movs	r6, #0
 8006eee:	42a6      	cmp	r6, r4
 8006ef0:	d105      	bne.n	8006efe <__libc_init_array+0x2e>
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}
 8006ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef8:	4798      	blx	r3
 8006efa:	3601      	adds	r6, #1
 8006efc:	e7ee      	b.n	8006edc <__libc_init_array+0xc>
 8006efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f02:	4798      	blx	r3
 8006f04:	3601      	adds	r6, #1
 8006f06:	e7f2      	b.n	8006eee <__libc_init_array+0x1e>
 8006f08:	08009644 	.word	0x08009644
 8006f0c:	08009644 	.word	0x08009644
 8006f10:	08009644 	.word	0x08009644
 8006f14:	08009648 	.word	0x08009648

08006f18 <__retarget_lock_init_recursive>:
 8006f18:	4770      	bx	lr

08006f1a <__retarget_lock_acquire_recursive>:
 8006f1a:	4770      	bx	lr

08006f1c <__retarget_lock_release_recursive>:
 8006f1c:	4770      	bx	lr
	...

08006f20 <__assert_func>:
 8006f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f22:	4614      	mov	r4, r2
 8006f24:	461a      	mov	r2, r3
 8006f26:	4b09      	ldr	r3, [pc, #36]	@ (8006f4c <__assert_func+0x2c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	68d8      	ldr	r0, [r3, #12]
 8006f2e:	b14c      	cbz	r4, 8006f44 <__assert_func+0x24>
 8006f30:	4b07      	ldr	r3, [pc, #28]	@ (8006f50 <__assert_func+0x30>)
 8006f32:	9100      	str	r1, [sp, #0]
 8006f34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f38:	4906      	ldr	r1, [pc, #24]	@ (8006f54 <__assert_func+0x34>)
 8006f3a:	462b      	mov	r3, r5
 8006f3c:	f001 fce6 	bl	800890c <fiprintf>
 8006f40:	f001 fd2e 	bl	80089a0 <abort>
 8006f44:	4b04      	ldr	r3, [pc, #16]	@ (8006f58 <__assert_func+0x38>)
 8006f46:	461c      	mov	r4, r3
 8006f48:	e7f3      	b.n	8006f32 <__assert_func+0x12>
 8006f4a:	bf00      	nop
 8006f4c:	20000048 	.word	0x20000048
 8006f50:	0800930f 	.word	0x0800930f
 8006f54:	0800931c 	.word	0x0800931c
 8006f58:	0800934a 	.word	0x0800934a

08006f5c <quorem>:
 8006f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f60:	6903      	ldr	r3, [r0, #16]
 8006f62:	690c      	ldr	r4, [r1, #16]
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	4607      	mov	r7, r0
 8006f68:	db7e      	blt.n	8007068 <quorem+0x10c>
 8006f6a:	3c01      	subs	r4, #1
 8006f6c:	f101 0814 	add.w	r8, r1, #20
 8006f70:	00a3      	lsls	r3, r4, #2
 8006f72:	f100 0514 	add.w	r5, r0, #20
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f7c:	9301      	str	r3, [sp, #4]
 8006f7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f86:	3301      	adds	r3, #1
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f92:	d32e      	bcc.n	8006ff2 <quorem+0x96>
 8006f94:	f04f 0a00 	mov.w	sl, #0
 8006f98:	46c4      	mov	ip, r8
 8006f9a:	46ae      	mov	lr, r5
 8006f9c:	46d3      	mov	fp, sl
 8006f9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006fa2:	b298      	uxth	r0, r3
 8006fa4:	fb06 a000 	mla	r0, r6, r0, sl
 8006fa8:	0c02      	lsrs	r2, r0, #16
 8006faa:	0c1b      	lsrs	r3, r3, #16
 8006fac:	fb06 2303 	mla	r3, r6, r3, r2
 8006fb0:	f8de 2000 	ldr.w	r2, [lr]
 8006fb4:	b280      	uxth	r0, r0
 8006fb6:	b292      	uxth	r2, r2
 8006fb8:	1a12      	subs	r2, r2, r0
 8006fba:	445a      	add	r2, fp
 8006fbc:	f8de 0000 	ldr.w	r0, [lr]
 8006fc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006fca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006fce:	b292      	uxth	r2, r2
 8006fd0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006fd4:	45e1      	cmp	r9, ip
 8006fd6:	f84e 2b04 	str.w	r2, [lr], #4
 8006fda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006fde:	d2de      	bcs.n	8006f9e <quorem+0x42>
 8006fe0:	9b00      	ldr	r3, [sp, #0]
 8006fe2:	58eb      	ldr	r3, [r5, r3]
 8006fe4:	b92b      	cbnz	r3, 8006ff2 <quorem+0x96>
 8006fe6:	9b01      	ldr	r3, [sp, #4]
 8006fe8:	3b04      	subs	r3, #4
 8006fea:	429d      	cmp	r5, r3
 8006fec:	461a      	mov	r2, r3
 8006fee:	d32f      	bcc.n	8007050 <quorem+0xf4>
 8006ff0:	613c      	str	r4, [r7, #16]
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	f001 f97e 	bl	80082f4 <__mcmp>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	db25      	blt.n	8007048 <quorem+0xec>
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	2000      	movs	r0, #0
 8007000:	f858 2b04 	ldr.w	r2, [r8], #4
 8007004:	f8d1 c000 	ldr.w	ip, [r1]
 8007008:	fa1f fe82 	uxth.w	lr, r2
 800700c:	fa1f f38c 	uxth.w	r3, ip
 8007010:	eba3 030e 	sub.w	r3, r3, lr
 8007014:	4403      	add	r3, r0
 8007016:	0c12      	lsrs	r2, r2, #16
 8007018:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800701c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007020:	b29b      	uxth	r3, r3
 8007022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007026:	45c1      	cmp	r9, r8
 8007028:	f841 3b04 	str.w	r3, [r1], #4
 800702c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007030:	d2e6      	bcs.n	8007000 <quorem+0xa4>
 8007032:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800703a:	b922      	cbnz	r2, 8007046 <quorem+0xea>
 800703c:	3b04      	subs	r3, #4
 800703e:	429d      	cmp	r5, r3
 8007040:	461a      	mov	r2, r3
 8007042:	d30b      	bcc.n	800705c <quorem+0x100>
 8007044:	613c      	str	r4, [r7, #16]
 8007046:	3601      	adds	r6, #1
 8007048:	4630      	mov	r0, r6
 800704a:	b003      	add	sp, #12
 800704c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007050:	6812      	ldr	r2, [r2, #0]
 8007052:	3b04      	subs	r3, #4
 8007054:	2a00      	cmp	r2, #0
 8007056:	d1cb      	bne.n	8006ff0 <quorem+0x94>
 8007058:	3c01      	subs	r4, #1
 800705a:	e7c6      	b.n	8006fea <quorem+0x8e>
 800705c:	6812      	ldr	r2, [r2, #0]
 800705e:	3b04      	subs	r3, #4
 8007060:	2a00      	cmp	r2, #0
 8007062:	d1ef      	bne.n	8007044 <quorem+0xe8>
 8007064:	3c01      	subs	r4, #1
 8007066:	e7ea      	b.n	800703e <quorem+0xe2>
 8007068:	2000      	movs	r0, #0
 800706a:	e7ee      	b.n	800704a <quorem+0xee>
 800706c:	0000      	movs	r0, r0
	...

08007070 <_dtoa_r>:
 8007070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007074:	69c7      	ldr	r7, [r0, #28]
 8007076:	b097      	sub	sp, #92	@ 0x5c
 8007078:	ed8d 0b04 	vstr	d0, [sp, #16]
 800707c:	ec55 4b10 	vmov	r4, r5, d0
 8007080:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007082:	9107      	str	r1, [sp, #28]
 8007084:	4681      	mov	r9, r0
 8007086:	920c      	str	r2, [sp, #48]	@ 0x30
 8007088:	9311      	str	r3, [sp, #68]	@ 0x44
 800708a:	b97f      	cbnz	r7, 80070ac <_dtoa_r+0x3c>
 800708c:	2010      	movs	r0, #16
 800708e:	f000 fe09 	bl	8007ca4 <malloc>
 8007092:	4602      	mov	r2, r0
 8007094:	f8c9 001c 	str.w	r0, [r9, #28]
 8007098:	b920      	cbnz	r0, 80070a4 <_dtoa_r+0x34>
 800709a:	4ba9      	ldr	r3, [pc, #676]	@ (8007340 <_dtoa_r+0x2d0>)
 800709c:	21ef      	movs	r1, #239	@ 0xef
 800709e:	48a9      	ldr	r0, [pc, #676]	@ (8007344 <_dtoa_r+0x2d4>)
 80070a0:	f7ff ff3e 	bl	8006f20 <__assert_func>
 80070a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80070a8:	6007      	str	r7, [r0, #0]
 80070aa:	60c7      	str	r7, [r0, #12]
 80070ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80070b0:	6819      	ldr	r1, [r3, #0]
 80070b2:	b159      	cbz	r1, 80070cc <_dtoa_r+0x5c>
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	604a      	str	r2, [r1, #4]
 80070b8:	2301      	movs	r3, #1
 80070ba:	4093      	lsls	r3, r2
 80070bc:	608b      	str	r3, [r1, #8]
 80070be:	4648      	mov	r0, r9
 80070c0:	f000 fee6 	bl	8007e90 <_Bfree>
 80070c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	1e2b      	subs	r3, r5, #0
 80070ce:	bfb9      	ittee	lt
 80070d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80070d4:	9305      	strlt	r3, [sp, #20]
 80070d6:	2300      	movge	r3, #0
 80070d8:	6033      	strge	r3, [r6, #0]
 80070da:	9f05      	ldr	r7, [sp, #20]
 80070dc:	4b9a      	ldr	r3, [pc, #616]	@ (8007348 <_dtoa_r+0x2d8>)
 80070de:	bfbc      	itt	lt
 80070e0:	2201      	movlt	r2, #1
 80070e2:	6032      	strlt	r2, [r6, #0]
 80070e4:	43bb      	bics	r3, r7
 80070e6:	d112      	bne.n	800710e <_dtoa_r+0x9e>
 80070e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80070ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80070f4:	4323      	orrs	r3, r4
 80070f6:	f000 855a 	beq.w	8007bae <_dtoa_r+0xb3e>
 80070fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80070fc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800735c <_dtoa_r+0x2ec>
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 855c 	beq.w	8007bbe <_dtoa_r+0xb4e>
 8007106:	f10a 0303 	add.w	r3, sl, #3
 800710a:	f000 bd56 	b.w	8007bba <_dtoa_r+0xb4a>
 800710e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007112:	2200      	movs	r2, #0
 8007114:	ec51 0b17 	vmov	r0, r1, d7
 8007118:	2300      	movs	r3, #0
 800711a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800711e:	f7f9 fcf3 	bl	8000b08 <__aeabi_dcmpeq>
 8007122:	4680      	mov	r8, r0
 8007124:	b158      	cbz	r0, 800713e <_dtoa_r+0xce>
 8007126:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007128:	2301      	movs	r3, #1
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800712e:	b113      	cbz	r3, 8007136 <_dtoa_r+0xc6>
 8007130:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007132:	4b86      	ldr	r3, [pc, #536]	@ (800734c <_dtoa_r+0x2dc>)
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007360 <_dtoa_r+0x2f0>
 800713a:	f000 bd40 	b.w	8007bbe <_dtoa_r+0xb4e>
 800713e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007142:	aa14      	add	r2, sp, #80	@ 0x50
 8007144:	a915      	add	r1, sp, #84	@ 0x54
 8007146:	4648      	mov	r0, r9
 8007148:	f001 f984 	bl	8008454 <__d2b>
 800714c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007150:	9002      	str	r0, [sp, #8]
 8007152:	2e00      	cmp	r6, #0
 8007154:	d078      	beq.n	8007248 <_dtoa_r+0x1d8>
 8007156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007158:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800715c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007160:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007164:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007168:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800716c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007170:	4619      	mov	r1, r3
 8007172:	2200      	movs	r2, #0
 8007174:	4b76      	ldr	r3, [pc, #472]	@ (8007350 <_dtoa_r+0x2e0>)
 8007176:	f7f9 f8a7 	bl	80002c8 <__aeabi_dsub>
 800717a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007328 <_dtoa_r+0x2b8>)
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	f7f9 fa5a 	bl	8000638 <__aeabi_dmul>
 8007184:	a36a      	add	r3, pc, #424	@ (adr r3, 8007330 <_dtoa_r+0x2c0>)
 8007186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718a:	f7f9 f89f 	bl	80002cc <__adddf3>
 800718e:	4604      	mov	r4, r0
 8007190:	4630      	mov	r0, r6
 8007192:	460d      	mov	r5, r1
 8007194:	f7f9 f9e6 	bl	8000564 <__aeabi_i2d>
 8007198:	a367      	add	r3, pc, #412	@ (adr r3, 8007338 <_dtoa_r+0x2c8>)
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	f7f9 fa4b 	bl	8000638 <__aeabi_dmul>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	4620      	mov	r0, r4
 80071a8:	4629      	mov	r1, r5
 80071aa:	f7f9 f88f 	bl	80002cc <__adddf3>
 80071ae:	4604      	mov	r4, r0
 80071b0:	460d      	mov	r5, r1
 80071b2:	f7f9 fcf1 	bl	8000b98 <__aeabi_d2iz>
 80071b6:	2200      	movs	r2, #0
 80071b8:	4607      	mov	r7, r0
 80071ba:	2300      	movs	r3, #0
 80071bc:	4620      	mov	r0, r4
 80071be:	4629      	mov	r1, r5
 80071c0:	f7f9 fcac 	bl	8000b1c <__aeabi_dcmplt>
 80071c4:	b140      	cbz	r0, 80071d8 <_dtoa_r+0x168>
 80071c6:	4638      	mov	r0, r7
 80071c8:	f7f9 f9cc 	bl	8000564 <__aeabi_i2d>
 80071cc:	4622      	mov	r2, r4
 80071ce:	462b      	mov	r3, r5
 80071d0:	f7f9 fc9a 	bl	8000b08 <__aeabi_dcmpeq>
 80071d4:	b900      	cbnz	r0, 80071d8 <_dtoa_r+0x168>
 80071d6:	3f01      	subs	r7, #1
 80071d8:	2f16      	cmp	r7, #22
 80071da:	d852      	bhi.n	8007282 <_dtoa_r+0x212>
 80071dc:	4b5d      	ldr	r3, [pc, #372]	@ (8007354 <_dtoa_r+0x2e4>)
 80071de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80071ea:	f7f9 fc97 	bl	8000b1c <__aeabi_dcmplt>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d049      	beq.n	8007286 <_dtoa_r+0x216>
 80071f2:	3f01      	subs	r7, #1
 80071f4:	2300      	movs	r3, #0
 80071f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80071f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80071fa:	1b9b      	subs	r3, r3, r6
 80071fc:	1e5a      	subs	r2, r3, #1
 80071fe:	bf45      	ittet	mi
 8007200:	f1c3 0301 	rsbmi	r3, r3, #1
 8007204:	9300      	strmi	r3, [sp, #0]
 8007206:	2300      	movpl	r3, #0
 8007208:	2300      	movmi	r3, #0
 800720a:	9206      	str	r2, [sp, #24]
 800720c:	bf54      	ite	pl
 800720e:	9300      	strpl	r3, [sp, #0]
 8007210:	9306      	strmi	r3, [sp, #24]
 8007212:	2f00      	cmp	r7, #0
 8007214:	db39      	blt.n	800728a <_dtoa_r+0x21a>
 8007216:	9b06      	ldr	r3, [sp, #24]
 8007218:	970d      	str	r7, [sp, #52]	@ 0x34
 800721a:	443b      	add	r3, r7
 800721c:	9306      	str	r3, [sp, #24]
 800721e:	2300      	movs	r3, #0
 8007220:	9308      	str	r3, [sp, #32]
 8007222:	9b07      	ldr	r3, [sp, #28]
 8007224:	2b09      	cmp	r3, #9
 8007226:	d863      	bhi.n	80072f0 <_dtoa_r+0x280>
 8007228:	2b05      	cmp	r3, #5
 800722a:	bfc4      	itt	gt
 800722c:	3b04      	subgt	r3, #4
 800722e:	9307      	strgt	r3, [sp, #28]
 8007230:	9b07      	ldr	r3, [sp, #28]
 8007232:	f1a3 0302 	sub.w	r3, r3, #2
 8007236:	bfcc      	ite	gt
 8007238:	2400      	movgt	r4, #0
 800723a:	2401      	movle	r4, #1
 800723c:	2b03      	cmp	r3, #3
 800723e:	d863      	bhi.n	8007308 <_dtoa_r+0x298>
 8007240:	e8df f003 	tbb	[pc, r3]
 8007244:	2b375452 	.word	0x2b375452
 8007248:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800724c:	441e      	add	r6, r3
 800724e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007252:	2b20      	cmp	r3, #32
 8007254:	bfc1      	itttt	gt
 8007256:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800725a:	409f      	lslgt	r7, r3
 800725c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007260:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007264:	bfd6      	itet	le
 8007266:	f1c3 0320 	rsble	r3, r3, #32
 800726a:	ea47 0003 	orrgt.w	r0, r7, r3
 800726e:	fa04 f003 	lslle.w	r0, r4, r3
 8007272:	f7f9 f967 	bl	8000544 <__aeabi_ui2d>
 8007276:	2201      	movs	r2, #1
 8007278:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800727c:	3e01      	subs	r6, #1
 800727e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007280:	e776      	b.n	8007170 <_dtoa_r+0x100>
 8007282:	2301      	movs	r3, #1
 8007284:	e7b7      	b.n	80071f6 <_dtoa_r+0x186>
 8007286:	9010      	str	r0, [sp, #64]	@ 0x40
 8007288:	e7b6      	b.n	80071f8 <_dtoa_r+0x188>
 800728a:	9b00      	ldr	r3, [sp, #0]
 800728c:	1bdb      	subs	r3, r3, r7
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	427b      	negs	r3, r7
 8007292:	9308      	str	r3, [sp, #32]
 8007294:	2300      	movs	r3, #0
 8007296:	930d      	str	r3, [sp, #52]	@ 0x34
 8007298:	e7c3      	b.n	8007222 <_dtoa_r+0x1b2>
 800729a:	2301      	movs	r3, #1
 800729c:	9309      	str	r3, [sp, #36]	@ 0x24
 800729e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072a0:	eb07 0b03 	add.w	fp, r7, r3
 80072a4:	f10b 0301 	add.w	r3, fp, #1
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	9303      	str	r3, [sp, #12]
 80072ac:	bfb8      	it	lt
 80072ae:	2301      	movlt	r3, #1
 80072b0:	e006      	b.n	80072c0 <_dtoa_r+0x250>
 80072b2:	2301      	movs	r3, #1
 80072b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	dd28      	ble.n	800730e <_dtoa_r+0x29e>
 80072bc:	469b      	mov	fp, r3
 80072be:	9303      	str	r3, [sp, #12]
 80072c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80072c4:	2100      	movs	r1, #0
 80072c6:	2204      	movs	r2, #4
 80072c8:	f102 0514 	add.w	r5, r2, #20
 80072cc:	429d      	cmp	r5, r3
 80072ce:	d926      	bls.n	800731e <_dtoa_r+0x2ae>
 80072d0:	6041      	str	r1, [r0, #4]
 80072d2:	4648      	mov	r0, r9
 80072d4:	f000 fd9c 	bl	8007e10 <_Balloc>
 80072d8:	4682      	mov	sl, r0
 80072da:	2800      	cmp	r0, #0
 80072dc:	d142      	bne.n	8007364 <_dtoa_r+0x2f4>
 80072de:	4b1e      	ldr	r3, [pc, #120]	@ (8007358 <_dtoa_r+0x2e8>)
 80072e0:	4602      	mov	r2, r0
 80072e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80072e6:	e6da      	b.n	800709e <_dtoa_r+0x2e>
 80072e8:	2300      	movs	r3, #0
 80072ea:	e7e3      	b.n	80072b4 <_dtoa_r+0x244>
 80072ec:	2300      	movs	r3, #0
 80072ee:	e7d5      	b.n	800729c <_dtoa_r+0x22c>
 80072f0:	2401      	movs	r4, #1
 80072f2:	2300      	movs	r3, #0
 80072f4:	9307      	str	r3, [sp, #28]
 80072f6:	9409      	str	r4, [sp, #36]	@ 0x24
 80072f8:	f04f 3bff 	mov.w	fp, #4294967295
 80072fc:	2200      	movs	r2, #0
 80072fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8007302:	2312      	movs	r3, #18
 8007304:	920c      	str	r2, [sp, #48]	@ 0x30
 8007306:	e7db      	b.n	80072c0 <_dtoa_r+0x250>
 8007308:	2301      	movs	r3, #1
 800730a:	9309      	str	r3, [sp, #36]	@ 0x24
 800730c:	e7f4      	b.n	80072f8 <_dtoa_r+0x288>
 800730e:	f04f 0b01 	mov.w	fp, #1
 8007312:	f8cd b00c 	str.w	fp, [sp, #12]
 8007316:	465b      	mov	r3, fp
 8007318:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800731c:	e7d0      	b.n	80072c0 <_dtoa_r+0x250>
 800731e:	3101      	adds	r1, #1
 8007320:	0052      	lsls	r2, r2, #1
 8007322:	e7d1      	b.n	80072c8 <_dtoa_r+0x258>
 8007324:	f3af 8000 	nop.w
 8007328:	636f4361 	.word	0x636f4361
 800732c:	3fd287a7 	.word	0x3fd287a7
 8007330:	8b60c8b3 	.word	0x8b60c8b3
 8007334:	3fc68a28 	.word	0x3fc68a28
 8007338:	509f79fb 	.word	0x509f79fb
 800733c:	3fd34413 	.word	0x3fd34413
 8007340:	0800926c 	.word	0x0800926c
 8007344:	08009358 	.word	0x08009358
 8007348:	7ff00000 	.word	0x7ff00000
 800734c:	080092ec 	.word	0x080092ec
 8007350:	3ff80000 	.word	0x3ff80000
 8007354:	08009470 	.word	0x08009470
 8007358:	080093b0 	.word	0x080093b0
 800735c:	08009354 	.word	0x08009354
 8007360:	080092eb 	.word	0x080092eb
 8007364:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007368:	6018      	str	r0, [r3, #0]
 800736a:	9b03      	ldr	r3, [sp, #12]
 800736c:	2b0e      	cmp	r3, #14
 800736e:	f200 80a1 	bhi.w	80074b4 <_dtoa_r+0x444>
 8007372:	2c00      	cmp	r4, #0
 8007374:	f000 809e 	beq.w	80074b4 <_dtoa_r+0x444>
 8007378:	2f00      	cmp	r7, #0
 800737a:	dd33      	ble.n	80073e4 <_dtoa_r+0x374>
 800737c:	4b9c      	ldr	r3, [pc, #624]	@ (80075f0 <_dtoa_r+0x580>)
 800737e:	f007 020f 	and.w	r2, r7, #15
 8007382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007386:	ed93 7b00 	vldr	d7, [r3]
 800738a:	05f8      	lsls	r0, r7, #23
 800738c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007390:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007394:	d516      	bpl.n	80073c4 <_dtoa_r+0x354>
 8007396:	4b97      	ldr	r3, [pc, #604]	@ (80075f4 <_dtoa_r+0x584>)
 8007398:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800739c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073a0:	f7f9 fa74 	bl	800088c <__aeabi_ddiv>
 80073a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073a8:	f004 040f 	and.w	r4, r4, #15
 80073ac:	2603      	movs	r6, #3
 80073ae:	4d91      	ldr	r5, [pc, #580]	@ (80075f4 <_dtoa_r+0x584>)
 80073b0:	b954      	cbnz	r4, 80073c8 <_dtoa_r+0x358>
 80073b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80073b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073ba:	f7f9 fa67 	bl	800088c <__aeabi_ddiv>
 80073be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073c2:	e028      	b.n	8007416 <_dtoa_r+0x3a6>
 80073c4:	2602      	movs	r6, #2
 80073c6:	e7f2      	b.n	80073ae <_dtoa_r+0x33e>
 80073c8:	07e1      	lsls	r1, r4, #31
 80073ca:	d508      	bpl.n	80073de <_dtoa_r+0x36e>
 80073cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80073d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073d4:	f7f9 f930 	bl	8000638 <__aeabi_dmul>
 80073d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80073dc:	3601      	adds	r6, #1
 80073de:	1064      	asrs	r4, r4, #1
 80073e0:	3508      	adds	r5, #8
 80073e2:	e7e5      	b.n	80073b0 <_dtoa_r+0x340>
 80073e4:	f000 80af 	beq.w	8007546 <_dtoa_r+0x4d6>
 80073e8:	427c      	negs	r4, r7
 80073ea:	4b81      	ldr	r3, [pc, #516]	@ (80075f0 <_dtoa_r+0x580>)
 80073ec:	4d81      	ldr	r5, [pc, #516]	@ (80075f4 <_dtoa_r+0x584>)
 80073ee:	f004 020f 	and.w	r2, r4, #15
 80073f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80073fe:	f7f9 f91b 	bl	8000638 <__aeabi_dmul>
 8007402:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007406:	1124      	asrs	r4, r4, #4
 8007408:	2300      	movs	r3, #0
 800740a:	2602      	movs	r6, #2
 800740c:	2c00      	cmp	r4, #0
 800740e:	f040 808f 	bne.w	8007530 <_dtoa_r+0x4c0>
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1d3      	bne.n	80073be <_dtoa_r+0x34e>
 8007416:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007418:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 8094 	beq.w	800754a <_dtoa_r+0x4da>
 8007422:	4b75      	ldr	r3, [pc, #468]	@ (80075f8 <_dtoa_r+0x588>)
 8007424:	2200      	movs	r2, #0
 8007426:	4620      	mov	r0, r4
 8007428:	4629      	mov	r1, r5
 800742a:	f7f9 fb77 	bl	8000b1c <__aeabi_dcmplt>
 800742e:	2800      	cmp	r0, #0
 8007430:	f000 808b 	beq.w	800754a <_dtoa_r+0x4da>
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 8087 	beq.w	800754a <_dtoa_r+0x4da>
 800743c:	f1bb 0f00 	cmp.w	fp, #0
 8007440:	dd34      	ble.n	80074ac <_dtoa_r+0x43c>
 8007442:	4620      	mov	r0, r4
 8007444:	4b6d      	ldr	r3, [pc, #436]	@ (80075fc <_dtoa_r+0x58c>)
 8007446:	2200      	movs	r2, #0
 8007448:	4629      	mov	r1, r5
 800744a:	f7f9 f8f5 	bl	8000638 <__aeabi_dmul>
 800744e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007452:	f107 38ff 	add.w	r8, r7, #4294967295
 8007456:	3601      	adds	r6, #1
 8007458:	465c      	mov	r4, fp
 800745a:	4630      	mov	r0, r6
 800745c:	f7f9 f882 	bl	8000564 <__aeabi_i2d>
 8007460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007464:	f7f9 f8e8 	bl	8000638 <__aeabi_dmul>
 8007468:	4b65      	ldr	r3, [pc, #404]	@ (8007600 <_dtoa_r+0x590>)
 800746a:	2200      	movs	r2, #0
 800746c:	f7f8 ff2e 	bl	80002cc <__adddf3>
 8007470:	4605      	mov	r5, r0
 8007472:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007476:	2c00      	cmp	r4, #0
 8007478:	d16a      	bne.n	8007550 <_dtoa_r+0x4e0>
 800747a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800747e:	4b61      	ldr	r3, [pc, #388]	@ (8007604 <_dtoa_r+0x594>)
 8007480:	2200      	movs	r2, #0
 8007482:	f7f8 ff21 	bl	80002c8 <__aeabi_dsub>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800748e:	462a      	mov	r2, r5
 8007490:	4633      	mov	r3, r6
 8007492:	f7f9 fb61 	bl	8000b58 <__aeabi_dcmpgt>
 8007496:	2800      	cmp	r0, #0
 8007498:	f040 8298 	bne.w	80079cc <_dtoa_r+0x95c>
 800749c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074a0:	462a      	mov	r2, r5
 80074a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80074a6:	f7f9 fb39 	bl	8000b1c <__aeabi_dcmplt>
 80074aa:	bb38      	cbnz	r0, 80074fc <_dtoa_r+0x48c>
 80074ac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80074b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80074b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f2c0 8157 	blt.w	800776a <_dtoa_r+0x6fa>
 80074bc:	2f0e      	cmp	r7, #14
 80074be:	f300 8154 	bgt.w	800776a <_dtoa_r+0x6fa>
 80074c2:	4b4b      	ldr	r3, [pc, #300]	@ (80075f0 <_dtoa_r+0x580>)
 80074c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80074c8:	ed93 7b00 	vldr	d7, [r3]
 80074cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	ed8d 7b00 	vstr	d7, [sp]
 80074d4:	f280 80e5 	bge.w	80076a2 <_dtoa_r+0x632>
 80074d8:	9b03      	ldr	r3, [sp, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f300 80e1 	bgt.w	80076a2 <_dtoa_r+0x632>
 80074e0:	d10c      	bne.n	80074fc <_dtoa_r+0x48c>
 80074e2:	4b48      	ldr	r3, [pc, #288]	@ (8007604 <_dtoa_r+0x594>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	ec51 0b17 	vmov	r0, r1, d7
 80074ea:	f7f9 f8a5 	bl	8000638 <__aeabi_dmul>
 80074ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074f2:	f7f9 fb27 	bl	8000b44 <__aeabi_dcmpge>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	f000 8266 	beq.w	80079c8 <_dtoa_r+0x958>
 80074fc:	2400      	movs	r4, #0
 80074fe:	4625      	mov	r5, r4
 8007500:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007502:	4656      	mov	r6, sl
 8007504:	ea6f 0803 	mvn.w	r8, r3
 8007508:	2700      	movs	r7, #0
 800750a:	4621      	mov	r1, r4
 800750c:	4648      	mov	r0, r9
 800750e:	f000 fcbf 	bl	8007e90 <_Bfree>
 8007512:	2d00      	cmp	r5, #0
 8007514:	f000 80bd 	beq.w	8007692 <_dtoa_r+0x622>
 8007518:	b12f      	cbz	r7, 8007526 <_dtoa_r+0x4b6>
 800751a:	42af      	cmp	r7, r5
 800751c:	d003      	beq.n	8007526 <_dtoa_r+0x4b6>
 800751e:	4639      	mov	r1, r7
 8007520:	4648      	mov	r0, r9
 8007522:	f000 fcb5 	bl	8007e90 <_Bfree>
 8007526:	4629      	mov	r1, r5
 8007528:	4648      	mov	r0, r9
 800752a:	f000 fcb1 	bl	8007e90 <_Bfree>
 800752e:	e0b0      	b.n	8007692 <_dtoa_r+0x622>
 8007530:	07e2      	lsls	r2, r4, #31
 8007532:	d505      	bpl.n	8007540 <_dtoa_r+0x4d0>
 8007534:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007538:	f7f9 f87e 	bl	8000638 <__aeabi_dmul>
 800753c:	3601      	adds	r6, #1
 800753e:	2301      	movs	r3, #1
 8007540:	1064      	asrs	r4, r4, #1
 8007542:	3508      	adds	r5, #8
 8007544:	e762      	b.n	800740c <_dtoa_r+0x39c>
 8007546:	2602      	movs	r6, #2
 8007548:	e765      	b.n	8007416 <_dtoa_r+0x3a6>
 800754a:	9c03      	ldr	r4, [sp, #12]
 800754c:	46b8      	mov	r8, r7
 800754e:	e784      	b.n	800745a <_dtoa_r+0x3ea>
 8007550:	4b27      	ldr	r3, [pc, #156]	@ (80075f0 <_dtoa_r+0x580>)
 8007552:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007554:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007558:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800755c:	4454      	add	r4, sl
 800755e:	2900      	cmp	r1, #0
 8007560:	d054      	beq.n	800760c <_dtoa_r+0x59c>
 8007562:	4929      	ldr	r1, [pc, #164]	@ (8007608 <_dtoa_r+0x598>)
 8007564:	2000      	movs	r0, #0
 8007566:	f7f9 f991 	bl	800088c <__aeabi_ddiv>
 800756a:	4633      	mov	r3, r6
 800756c:	462a      	mov	r2, r5
 800756e:	f7f8 feab 	bl	80002c8 <__aeabi_dsub>
 8007572:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007576:	4656      	mov	r6, sl
 8007578:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800757c:	f7f9 fb0c 	bl	8000b98 <__aeabi_d2iz>
 8007580:	4605      	mov	r5, r0
 8007582:	f7f8 ffef 	bl	8000564 <__aeabi_i2d>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800758e:	f7f8 fe9b 	bl	80002c8 <__aeabi_dsub>
 8007592:	3530      	adds	r5, #48	@ 0x30
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800759c:	f806 5b01 	strb.w	r5, [r6], #1
 80075a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80075a4:	f7f9 faba 	bl	8000b1c <__aeabi_dcmplt>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d172      	bne.n	8007692 <_dtoa_r+0x622>
 80075ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075b0:	4911      	ldr	r1, [pc, #68]	@ (80075f8 <_dtoa_r+0x588>)
 80075b2:	2000      	movs	r0, #0
 80075b4:	f7f8 fe88 	bl	80002c8 <__aeabi_dsub>
 80075b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80075bc:	f7f9 faae 	bl	8000b1c <__aeabi_dcmplt>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	f040 80b4 	bne.w	800772e <_dtoa_r+0x6be>
 80075c6:	42a6      	cmp	r6, r4
 80075c8:	f43f af70 	beq.w	80074ac <_dtoa_r+0x43c>
 80075cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80075d0:	4b0a      	ldr	r3, [pc, #40]	@ (80075fc <_dtoa_r+0x58c>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	f7f9 f830 	bl	8000638 <__aeabi_dmul>
 80075d8:	4b08      	ldr	r3, [pc, #32]	@ (80075fc <_dtoa_r+0x58c>)
 80075da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80075de:	2200      	movs	r2, #0
 80075e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075e4:	f7f9 f828 	bl	8000638 <__aeabi_dmul>
 80075e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075ec:	e7c4      	b.n	8007578 <_dtoa_r+0x508>
 80075ee:	bf00      	nop
 80075f0:	08009470 	.word	0x08009470
 80075f4:	08009448 	.word	0x08009448
 80075f8:	3ff00000 	.word	0x3ff00000
 80075fc:	40240000 	.word	0x40240000
 8007600:	401c0000 	.word	0x401c0000
 8007604:	40140000 	.word	0x40140000
 8007608:	3fe00000 	.word	0x3fe00000
 800760c:	4631      	mov	r1, r6
 800760e:	4628      	mov	r0, r5
 8007610:	f7f9 f812 	bl	8000638 <__aeabi_dmul>
 8007614:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007618:	9413      	str	r4, [sp, #76]	@ 0x4c
 800761a:	4656      	mov	r6, sl
 800761c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007620:	f7f9 faba 	bl	8000b98 <__aeabi_d2iz>
 8007624:	4605      	mov	r5, r0
 8007626:	f7f8 ff9d 	bl	8000564 <__aeabi_i2d>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007632:	f7f8 fe49 	bl	80002c8 <__aeabi_dsub>
 8007636:	3530      	adds	r5, #48	@ 0x30
 8007638:	f806 5b01 	strb.w	r5, [r6], #1
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	42a6      	cmp	r6, r4
 8007642:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	d124      	bne.n	8007696 <_dtoa_r+0x626>
 800764c:	4baf      	ldr	r3, [pc, #700]	@ (800790c <_dtoa_r+0x89c>)
 800764e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007652:	f7f8 fe3b 	bl	80002cc <__adddf3>
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800765e:	f7f9 fa7b 	bl	8000b58 <__aeabi_dcmpgt>
 8007662:	2800      	cmp	r0, #0
 8007664:	d163      	bne.n	800772e <_dtoa_r+0x6be>
 8007666:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800766a:	49a8      	ldr	r1, [pc, #672]	@ (800790c <_dtoa_r+0x89c>)
 800766c:	2000      	movs	r0, #0
 800766e:	f7f8 fe2b 	bl	80002c8 <__aeabi_dsub>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800767a:	f7f9 fa4f 	bl	8000b1c <__aeabi_dcmplt>
 800767e:	2800      	cmp	r0, #0
 8007680:	f43f af14 	beq.w	80074ac <_dtoa_r+0x43c>
 8007684:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007686:	1e73      	subs	r3, r6, #1
 8007688:	9313      	str	r3, [sp, #76]	@ 0x4c
 800768a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800768e:	2b30      	cmp	r3, #48	@ 0x30
 8007690:	d0f8      	beq.n	8007684 <_dtoa_r+0x614>
 8007692:	4647      	mov	r7, r8
 8007694:	e03b      	b.n	800770e <_dtoa_r+0x69e>
 8007696:	4b9e      	ldr	r3, [pc, #632]	@ (8007910 <_dtoa_r+0x8a0>)
 8007698:	f7f8 ffce 	bl	8000638 <__aeabi_dmul>
 800769c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076a0:	e7bc      	b.n	800761c <_dtoa_r+0x5ac>
 80076a2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80076a6:	4656      	mov	r6, sl
 80076a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076ac:	4620      	mov	r0, r4
 80076ae:	4629      	mov	r1, r5
 80076b0:	f7f9 f8ec 	bl	800088c <__aeabi_ddiv>
 80076b4:	f7f9 fa70 	bl	8000b98 <__aeabi_d2iz>
 80076b8:	4680      	mov	r8, r0
 80076ba:	f7f8 ff53 	bl	8000564 <__aeabi_i2d>
 80076be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076c2:	f7f8 ffb9 	bl	8000638 <__aeabi_dmul>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4620      	mov	r0, r4
 80076cc:	4629      	mov	r1, r5
 80076ce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80076d2:	f7f8 fdf9 	bl	80002c8 <__aeabi_dsub>
 80076d6:	f806 4b01 	strb.w	r4, [r6], #1
 80076da:	9d03      	ldr	r5, [sp, #12]
 80076dc:	eba6 040a 	sub.w	r4, r6, sl
 80076e0:	42a5      	cmp	r5, r4
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	d133      	bne.n	8007750 <_dtoa_r+0x6e0>
 80076e8:	f7f8 fdf0 	bl	80002cc <__adddf3>
 80076ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076f0:	4604      	mov	r4, r0
 80076f2:	460d      	mov	r5, r1
 80076f4:	f7f9 fa30 	bl	8000b58 <__aeabi_dcmpgt>
 80076f8:	b9c0      	cbnz	r0, 800772c <_dtoa_r+0x6bc>
 80076fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076fe:	4620      	mov	r0, r4
 8007700:	4629      	mov	r1, r5
 8007702:	f7f9 fa01 	bl	8000b08 <__aeabi_dcmpeq>
 8007706:	b110      	cbz	r0, 800770e <_dtoa_r+0x69e>
 8007708:	f018 0f01 	tst.w	r8, #1
 800770c:	d10e      	bne.n	800772c <_dtoa_r+0x6bc>
 800770e:	9902      	ldr	r1, [sp, #8]
 8007710:	4648      	mov	r0, r9
 8007712:	f000 fbbd 	bl	8007e90 <_Bfree>
 8007716:	2300      	movs	r3, #0
 8007718:	7033      	strb	r3, [r6, #0]
 800771a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800771c:	3701      	adds	r7, #1
 800771e:	601f      	str	r7, [r3, #0]
 8007720:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 824b 	beq.w	8007bbe <_dtoa_r+0xb4e>
 8007728:	601e      	str	r6, [r3, #0]
 800772a:	e248      	b.n	8007bbe <_dtoa_r+0xb4e>
 800772c:	46b8      	mov	r8, r7
 800772e:	4633      	mov	r3, r6
 8007730:	461e      	mov	r6, r3
 8007732:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007736:	2a39      	cmp	r2, #57	@ 0x39
 8007738:	d106      	bne.n	8007748 <_dtoa_r+0x6d8>
 800773a:	459a      	cmp	sl, r3
 800773c:	d1f8      	bne.n	8007730 <_dtoa_r+0x6c0>
 800773e:	2230      	movs	r2, #48	@ 0x30
 8007740:	f108 0801 	add.w	r8, r8, #1
 8007744:	f88a 2000 	strb.w	r2, [sl]
 8007748:	781a      	ldrb	r2, [r3, #0]
 800774a:	3201      	adds	r2, #1
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	e7a0      	b.n	8007692 <_dtoa_r+0x622>
 8007750:	4b6f      	ldr	r3, [pc, #444]	@ (8007910 <_dtoa_r+0x8a0>)
 8007752:	2200      	movs	r2, #0
 8007754:	f7f8 ff70 	bl	8000638 <__aeabi_dmul>
 8007758:	2200      	movs	r2, #0
 800775a:	2300      	movs	r3, #0
 800775c:	4604      	mov	r4, r0
 800775e:	460d      	mov	r5, r1
 8007760:	f7f9 f9d2 	bl	8000b08 <__aeabi_dcmpeq>
 8007764:	2800      	cmp	r0, #0
 8007766:	d09f      	beq.n	80076a8 <_dtoa_r+0x638>
 8007768:	e7d1      	b.n	800770e <_dtoa_r+0x69e>
 800776a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800776c:	2a00      	cmp	r2, #0
 800776e:	f000 80ea 	beq.w	8007946 <_dtoa_r+0x8d6>
 8007772:	9a07      	ldr	r2, [sp, #28]
 8007774:	2a01      	cmp	r2, #1
 8007776:	f300 80cd 	bgt.w	8007914 <_dtoa_r+0x8a4>
 800777a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800777c:	2a00      	cmp	r2, #0
 800777e:	f000 80c1 	beq.w	8007904 <_dtoa_r+0x894>
 8007782:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007786:	9c08      	ldr	r4, [sp, #32]
 8007788:	9e00      	ldr	r6, [sp, #0]
 800778a:	9a00      	ldr	r2, [sp, #0]
 800778c:	441a      	add	r2, r3
 800778e:	9200      	str	r2, [sp, #0]
 8007790:	9a06      	ldr	r2, [sp, #24]
 8007792:	2101      	movs	r1, #1
 8007794:	441a      	add	r2, r3
 8007796:	4648      	mov	r0, r9
 8007798:	9206      	str	r2, [sp, #24]
 800779a:	f000 fc2d 	bl	8007ff8 <__i2b>
 800779e:	4605      	mov	r5, r0
 80077a0:	b166      	cbz	r6, 80077bc <_dtoa_r+0x74c>
 80077a2:	9b06      	ldr	r3, [sp, #24]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	dd09      	ble.n	80077bc <_dtoa_r+0x74c>
 80077a8:	42b3      	cmp	r3, r6
 80077aa:	9a00      	ldr	r2, [sp, #0]
 80077ac:	bfa8      	it	ge
 80077ae:	4633      	movge	r3, r6
 80077b0:	1ad2      	subs	r2, r2, r3
 80077b2:	9200      	str	r2, [sp, #0]
 80077b4:	9a06      	ldr	r2, [sp, #24]
 80077b6:	1af6      	subs	r6, r6, r3
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	9306      	str	r3, [sp, #24]
 80077bc:	9b08      	ldr	r3, [sp, #32]
 80077be:	b30b      	cbz	r3, 8007804 <_dtoa_r+0x794>
 80077c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 80c6 	beq.w	8007954 <_dtoa_r+0x8e4>
 80077c8:	2c00      	cmp	r4, #0
 80077ca:	f000 80c0 	beq.w	800794e <_dtoa_r+0x8de>
 80077ce:	4629      	mov	r1, r5
 80077d0:	4622      	mov	r2, r4
 80077d2:	4648      	mov	r0, r9
 80077d4:	f000 fcc8 	bl	8008168 <__pow5mult>
 80077d8:	9a02      	ldr	r2, [sp, #8]
 80077da:	4601      	mov	r1, r0
 80077dc:	4605      	mov	r5, r0
 80077de:	4648      	mov	r0, r9
 80077e0:	f000 fc20 	bl	8008024 <__multiply>
 80077e4:	9902      	ldr	r1, [sp, #8]
 80077e6:	4680      	mov	r8, r0
 80077e8:	4648      	mov	r0, r9
 80077ea:	f000 fb51 	bl	8007e90 <_Bfree>
 80077ee:	9b08      	ldr	r3, [sp, #32]
 80077f0:	1b1b      	subs	r3, r3, r4
 80077f2:	9308      	str	r3, [sp, #32]
 80077f4:	f000 80b1 	beq.w	800795a <_dtoa_r+0x8ea>
 80077f8:	9a08      	ldr	r2, [sp, #32]
 80077fa:	4641      	mov	r1, r8
 80077fc:	4648      	mov	r0, r9
 80077fe:	f000 fcb3 	bl	8008168 <__pow5mult>
 8007802:	9002      	str	r0, [sp, #8]
 8007804:	2101      	movs	r1, #1
 8007806:	4648      	mov	r0, r9
 8007808:	f000 fbf6 	bl	8007ff8 <__i2b>
 800780c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800780e:	4604      	mov	r4, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 81d8 	beq.w	8007bc6 <_dtoa_r+0xb56>
 8007816:	461a      	mov	r2, r3
 8007818:	4601      	mov	r1, r0
 800781a:	4648      	mov	r0, r9
 800781c:	f000 fca4 	bl	8008168 <__pow5mult>
 8007820:	9b07      	ldr	r3, [sp, #28]
 8007822:	2b01      	cmp	r3, #1
 8007824:	4604      	mov	r4, r0
 8007826:	f300 809f 	bgt.w	8007968 <_dtoa_r+0x8f8>
 800782a:	9b04      	ldr	r3, [sp, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f040 8097 	bne.w	8007960 <_dtoa_r+0x8f0>
 8007832:	9b05      	ldr	r3, [sp, #20]
 8007834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007838:	2b00      	cmp	r3, #0
 800783a:	f040 8093 	bne.w	8007964 <_dtoa_r+0x8f4>
 800783e:	9b05      	ldr	r3, [sp, #20]
 8007840:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007844:	0d1b      	lsrs	r3, r3, #20
 8007846:	051b      	lsls	r3, r3, #20
 8007848:	b133      	cbz	r3, 8007858 <_dtoa_r+0x7e8>
 800784a:	9b00      	ldr	r3, [sp, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	9b06      	ldr	r3, [sp, #24]
 8007852:	3301      	adds	r3, #1
 8007854:	9306      	str	r3, [sp, #24]
 8007856:	2301      	movs	r3, #1
 8007858:	9308      	str	r3, [sp, #32]
 800785a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 81b8 	beq.w	8007bd2 <_dtoa_r+0xb62>
 8007862:	6923      	ldr	r3, [r4, #16]
 8007864:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007868:	6918      	ldr	r0, [r3, #16]
 800786a:	f000 fb79 	bl	8007f60 <__hi0bits>
 800786e:	f1c0 0020 	rsb	r0, r0, #32
 8007872:	9b06      	ldr	r3, [sp, #24]
 8007874:	4418      	add	r0, r3
 8007876:	f010 001f 	ands.w	r0, r0, #31
 800787a:	f000 8082 	beq.w	8007982 <_dtoa_r+0x912>
 800787e:	f1c0 0320 	rsb	r3, r0, #32
 8007882:	2b04      	cmp	r3, #4
 8007884:	dd73      	ble.n	800796e <_dtoa_r+0x8fe>
 8007886:	9b00      	ldr	r3, [sp, #0]
 8007888:	f1c0 001c 	rsb	r0, r0, #28
 800788c:	4403      	add	r3, r0
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	9b06      	ldr	r3, [sp, #24]
 8007892:	4403      	add	r3, r0
 8007894:	4406      	add	r6, r0
 8007896:	9306      	str	r3, [sp, #24]
 8007898:	9b00      	ldr	r3, [sp, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	dd05      	ble.n	80078aa <_dtoa_r+0x83a>
 800789e:	9902      	ldr	r1, [sp, #8]
 80078a0:	461a      	mov	r2, r3
 80078a2:	4648      	mov	r0, r9
 80078a4:	f000 fcba 	bl	800821c <__lshift>
 80078a8:	9002      	str	r0, [sp, #8]
 80078aa:	9b06      	ldr	r3, [sp, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	dd05      	ble.n	80078bc <_dtoa_r+0x84c>
 80078b0:	4621      	mov	r1, r4
 80078b2:	461a      	mov	r2, r3
 80078b4:	4648      	mov	r0, r9
 80078b6:	f000 fcb1 	bl	800821c <__lshift>
 80078ba:	4604      	mov	r4, r0
 80078bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d061      	beq.n	8007986 <_dtoa_r+0x916>
 80078c2:	9802      	ldr	r0, [sp, #8]
 80078c4:	4621      	mov	r1, r4
 80078c6:	f000 fd15 	bl	80082f4 <__mcmp>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	da5b      	bge.n	8007986 <_dtoa_r+0x916>
 80078ce:	2300      	movs	r3, #0
 80078d0:	9902      	ldr	r1, [sp, #8]
 80078d2:	220a      	movs	r2, #10
 80078d4:	4648      	mov	r0, r9
 80078d6:	f000 fafd 	bl	8007ed4 <__multadd>
 80078da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078dc:	9002      	str	r0, [sp, #8]
 80078de:	f107 38ff 	add.w	r8, r7, #4294967295
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 8177 	beq.w	8007bd6 <_dtoa_r+0xb66>
 80078e8:	4629      	mov	r1, r5
 80078ea:	2300      	movs	r3, #0
 80078ec:	220a      	movs	r2, #10
 80078ee:	4648      	mov	r0, r9
 80078f0:	f000 faf0 	bl	8007ed4 <__multadd>
 80078f4:	f1bb 0f00 	cmp.w	fp, #0
 80078f8:	4605      	mov	r5, r0
 80078fa:	dc6f      	bgt.n	80079dc <_dtoa_r+0x96c>
 80078fc:	9b07      	ldr	r3, [sp, #28]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	dc49      	bgt.n	8007996 <_dtoa_r+0x926>
 8007902:	e06b      	b.n	80079dc <_dtoa_r+0x96c>
 8007904:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007906:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800790a:	e73c      	b.n	8007786 <_dtoa_r+0x716>
 800790c:	3fe00000 	.word	0x3fe00000
 8007910:	40240000 	.word	0x40240000
 8007914:	9b03      	ldr	r3, [sp, #12]
 8007916:	1e5c      	subs	r4, r3, #1
 8007918:	9b08      	ldr	r3, [sp, #32]
 800791a:	42a3      	cmp	r3, r4
 800791c:	db09      	blt.n	8007932 <_dtoa_r+0x8c2>
 800791e:	1b1c      	subs	r4, r3, r4
 8007920:	9b03      	ldr	r3, [sp, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	f6bf af30 	bge.w	8007788 <_dtoa_r+0x718>
 8007928:	9b00      	ldr	r3, [sp, #0]
 800792a:	9a03      	ldr	r2, [sp, #12]
 800792c:	1a9e      	subs	r6, r3, r2
 800792e:	2300      	movs	r3, #0
 8007930:	e72b      	b.n	800778a <_dtoa_r+0x71a>
 8007932:	9b08      	ldr	r3, [sp, #32]
 8007934:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007936:	9408      	str	r4, [sp, #32]
 8007938:	1ae3      	subs	r3, r4, r3
 800793a:	441a      	add	r2, r3
 800793c:	9e00      	ldr	r6, [sp, #0]
 800793e:	9b03      	ldr	r3, [sp, #12]
 8007940:	920d      	str	r2, [sp, #52]	@ 0x34
 8007942:	2400      	movs	r4, #0
 8007944:	e721      	b.n	800778a <_dtoa_r+0x71a>
 8007946:	9c08      	ldr	r4, [sp, #32]
 8007948:	9e00      	ldr	r6, [sp, #0]
 800794a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800794c:	e728      	b.n	80077a0 <_dtoa_r+0x730>
 800794e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007952:	e751      	b.n	80077f8 <_dtoa_r+0x788>
 8007954:	9a08      	ldr	r2, [sp, #32]
 8007956:	9902      	ldr	r1, [sp, #8]
 8007958:	e750      	b.n	80077fc <_dtoa_r+0x78c>
 800795a:	f8cd 8008 	str.w	r8, [sp, #8]
 800795e:	e751      	b.n	8007804 <_dtoa_r+0x794>
 8007960:	2300      	movs	r3, #0
 8007962:	e779      	b.n	8007858 <_dtoa_r+0x7e8>
 8007964:	9b04      	ldr	r3, [sp, #16]
 8007966:	e777      	b.n	8007858 <_dtoa_r+0x7e8>
 8007968:	2300      	movs	r3, #0
 800796a:	9308      	str	r3, [sp, #32]
 800796c:	e779      	b.n	8007862 <_dtoa_r+0x7f2>
 800796e:	d093      	beq.n	8007898 <_dtoa_r+0x828>
 8007970:	9a00      	ldr	r2, [sp, #0]
 8007972:	331c      	adds	r3, #28
 8007974:	441a      	add	r2, r3
 8007976:	9200      	str	r2, [sp, #0]
 8007978:	9a06      	ldr	r2, [sp, #24]
 800797a:	441a      	add	r2, r3
 800797c:	441e      	add	r6, r3
 800797e:	9206      	str	r2, [sp, #24]
 8007980:	e78a      	b.n	8007898 <_dtoa_r+0x828>
 8007982:	4603      	mov	r3, r0
 8007984:	e7f4      	b.n	8007970 <_dtoa_r+0x900>
 8007986:	9b03      	ldr	r3, [sp, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	46b8      	mov	r8, r7
 800798c:	dc20      	bgt.n	80079d0 <_dtoa_r+0x960>
 800798e:	469b      	mov	fp, r3
 8007990:	9b07      	ldr	r3, [sp, #28]
 8007992:	2b02      	cmp	r3, #2
 8007994:	dd1e      	ble.n	80079d4 <_dtoa_r+0x964>
 8007996:	f1bb 0f00 	cmp.w	fp, #0
 800799a:	f47f adb1 	bne.w	8007500 <_dtoa_r+0x490>
 800799e:	4621      	mov	r1, r4
 80079a0:	465b      	mov	r3, fp
 80079a2:	2205      	movs	r2, #5
 80079a4:	4648      	mov	r0, r9
 80079a6:	f000 fa95 	bl	8007ed4 <__multadd>
 80079aa:	4601      	mov	r1, r0
 80079ac:	4604      	mov	r4, r0
 80079ae:	9802      	ldr	r0, [sp, #8]
 80079b0:	f000 fca0 	bl	80082f4 <__mcmp>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	f77f ada3 	ble.w	8007500 <_dtoa_r+0x490>
 80079ba:	4656      	mov	r6, sl
 80079bc:	2331      	movs	r3, #49	@ 0x31
 80079be:	f806 3b01 	strb.w	r3, [r6], #1
 80079c2:	f108 0801 	add.w	r8, r8, #1
 80079c6:	e59f      	b.n	8007508 <_dtoa_r+0x498>
 80079c8:	9c03      	ldr	r4, [sp, #12]
 80079ca:	46b8      	mov	r8, r7
 80079cc:	4625      	mov	r5, r4
 80079ce:	e7f4      	b.n	80079ba <_dtoa_r+0x94a>
 80079d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80079d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 8101 	beq.w	8007bde <_dtoa_r+0xb6e>
 80079dc:	2e00      	cmp	r6, #0
 80079de:	dd05      	ble.n	80079ec <_dtoa_r+0x97c>
 80079e0:	4629      	mov	r1, r5
 80079e2:	4632      	mov	r2, r6
 80079e4:	4648      	mov	r0, r9
 80079e6:	f000 fc19 	bl	800821c <__lshift>
 80079ea:	4605      	mov	r5, r0
 80079ec:	9b08      	ldr	r3, [sp, #32]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d05c      	beq.n	8007aac <_dtoa_r+0xa3c>
 80079f2:	6869      	ldr	r1, [r5, #4]
 80079f4:	4648      	mov	r0, r9
 80079f6:	f000 fa0b 	bl	8007e10 <_Balloc>
 80079fa:	4606      	mov	r6, r0
 80079fc:	b928      	cbnz	r0, 8007a0a <_dtoa_r+0x99a>
 80079fe:	4b82      	ldr	r3, [pc, #520]	@ (8007c08 <_dtoa_r+0xb98>)
 8007a00:	4602      	mov	r2, r0
 8007a02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a06:	f7ff bb4a 	b.w	800709e <_dtoa_r+0x2e>
 8007a0a:	692a      	ldr	r2, [r5, #16]
 8007a0c:	3202      	adds	r2, #2
 8007a0e:	0092      	lsls	r2, r2, #2
 8007a10:	f105 010c 	add.w	r1, r5, #12
 8007a14:	300c      	adds	r0, #12
 8007a16:	f000 ffb5 	bl	8008984 <memcpy>
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	4648      	mov	r0, r9
 8007a20:	f000 fbfc 	bl	800821c <__lshift>
 8007a24:	f10a 0301 	add.w	r3, sl, #1
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	eb0a 030b 	add.w	r3, sl, fp
 8007a2e:	9308      	str	r3, [sp, #32]
 8007a30:	9b04      	ldr	r3, [sp, #16]
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	462f      	mov	r7, r5
 8007a38:	9306      	str	r3, [sp, #24]
 8007a3a:	4605      	mov	r5, r0
 8007a3c:	9b00      	ldr	r3, [sp, #0]
 8007a3e:	9802      	ldr	r0, [sp, #8]
 8007a40:	4621      	mov	r1, r4
 8007a42:	f103 3bff 	add.w	fp, r3, #4294967295
 8007a46:	f7ff fa89 	bl	8006f5c <quorem>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	3330      	adds	r3, #48	@ 0x30
 8007a4e:	9003      	str	r0, [sp, #12]
 8007a50:	4639      	mov	r1, r7
 8007a52:	9802      	ldr	r0, [sp, #8]
 8007a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a56:	f000 fc4d 	bl	80082f4 <__mcmp>
 8007a5a:	462a      	mov	r2, r5
 8007a5c:	9004      	str	r0, [sp, #16]
 8007a5e:	4621      	mov	r1, r4
 8007a60:	4648      	mov	r0, r9
 8007a62:	f000 fc63 	bl	800832c <__mdiff>
 8007a66:	68c2      	ldr	r2, [r0, #12]
 8007a68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	bb02      	cbnz	r2, 8007ab0 <_dtoa_r+0xa40>
 8007a6e:	4601      	mov	r1, r0
 8007a70:	9802      	ldr	r0, [sp, #8]
 8007a72:	f000 fc3f 	bl	80082f4 <__mcmp>
 8007a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a78:	4602      	mov	r2, r0
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	4648      	mov	r0, r9
 8007a7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a82:	f000 fa05 	bl	8007e90 <_Bfree>
 8007a86:	9b07      	ldr	r3, [sp, #28]
 8007a88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a8a:	9e00      	ldr	r6, [sp, #0]
 8007a8c:	ea42 0103 	orr.w	r1, r2, r3
 8007a90:	9b06      	ldr	r3, [sp, #24]
 8007a92:	4319      	orrs	r1, r3
 8007a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a96:	d10d      	bne.n	8007ab4 <_dtoa_r+0xa44>
 8007a98:	2b39      	cmp	r3, #57	@ 0x39
 8007a9a:	d027      	beq.n	8007aec <_dtoa_r+0xa7c>
 8007a9c:	9a04      	ldr	r2, [sp, #16]
 8007a9e:	2a00      	cmp	r2, #0
 8007aa0:	dd01      	ble.n	8007aa6 <_dtoa_r+0xa36>
 8007aa2:	9b03      	ldr	r3, [sp, #12]
 8007aa4:	3331      	adds	r3, #49	@ 0x31
 8007aa6:	f88b 3000 	strb.w	r3, [fp]
 8007aaa:	e52e      	b.n	800750a <_dtoa_r+0x49a>
 8007aac:	4628      	mov	r0, r5
 8007aae:	e7b9      	b.n	8007a24 <_dtoa_r+0x9b4>
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	e7e2      	b.n	8007a7a <_dtoa_r+0xa0a>
 8007ab4:	9904      	ldr	r1, [sp, #16]
 8007ab6:	2900      	cmp	r1, #0
 8007ab8:	db04      	blt.n	8007ac4 <_dtoa_r+0xa54>
 8007aba:	9807      	ldr	r0, [sp, #28]
 8007abc:	4301      	orrs	r1, r0
 8007abe:	9806      	ldr	r0, [sp, #24]
 8007ac0:	4301      	orrs	r1, r0
 8007ac2:	d120      	bne.n	8007b06 <_dtoa_r+0xa96>
 8007ac4:	2a00      	cmp	r2, #0
 8007ac6:	ddee      	ble.n	8007aa6 <_dtoa_r+0xa36>
 8007ac8:	9902      	ldr	r1, [sp, #8]
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	2201      	movs	r2, #1
 8007ace:	4648      	mov	r0, r9
 8007ad0:	f000 fba4 	bl	800821c <__lshift>
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	9002      	str	r0, [sp, #8]
 8007ad8:	f000 fc0c 	bl	80082f4 <__mcmp>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	9b00      	ldr	r3, [sp, #0]
 8007ae0:	dc02      	bgt.n	8007ae8 <_dtoa_r+0xa78>
 8007ae2:	d1e0      	bne.n	8007aa6 <_dtoa_r+0xa36>
 8007ae4:	07da      	lsls	r2, r3, #31
 8007ae6:	d5de      	bpl.n	8007aa6 <_dtoa_r+0xa36>
 8007ae8:	2b39      	cmp	r3, #57	@ 0x39
 8007aea:	d1da      	bne.n	8007aa2 <_dtoa_r+0xa32>
 8007aec:	2339      	movs	r3, #57	@ 0x39
 8007aee:	f88b 3000 	strb.w	r3, [fp]
 8007af2:	4633      	mov	r3, r6
 8007af4:	461e      	mov	r6, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007afc:	2a39      	cmp	r2, #57	@ 0x39
 8007afe:	d04e      	beq.n	8007b9e <_dtoa_r+0xb2e>
 8007b00:	3201      	adds	r2, #1
 8007b02:	701a      	strb	r2, [r3, #0]
 8007b04:	e501      	b.n	800750a <_dtoa_r+0x49a>
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	dd03      	ble.n	8007b12 <_dtoa_r+0xaa2>
 8007b0a:	2b39      	cmp	r3, #57	@ 0x39
 8007b0c:	d0ee      	beq.n	8007aec <_dtoa_r+0xa7c>
 8007b0e:	3301      	adds	r3, #1
 8007b10:	e7c9      	b.n	8007aa6 <_dtoa_r+0xa36>
 8007b12:	9a00      	ldr	r2, [sp, #0]
 8007b14:	9908      	ldr	r1, [sp, #32]
 8007b16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007b1a:	428a      	cmp	r2, r1
 8007b1c:	d028      	beq.n	8007b70 <_dtoa_r+0xb00>
 8007b1e:	9902      	ldr	r1, [sp, #8]
 8007b20:	2300      	movs	r3, #0
 8007b22:	220a      	movs	r2, #10
 8007b24:	4648      	mov	r0, r9
 8007b26:	f000 f9d5 	bl	8007ed4 <__multadd>
 8007b2a:	42af      	cmp	r7, r5
 8007b2c:	9002      	str	r0, [sp, #8]
 8007b2e:	f04f 0300 	mov.w	r3, #0
 8007b32:	f04f 020a 	mov.w	r2, #10
 8007b36:	4639      	mov	r1, r7
 8007b38:	4648      	mov	r0, r9
 8007b3a:	d107      	bne.n	8007b4c <_dtoa_r+0xadc>
 8007b3c:	f000 f9ca 	bl	8007ed4 <__multadd>
 8007b40:	4607      	mov	r7, r0
 8007b42:	4605      	mov	r5, r0
 8007b44:	9b00      	ldr	r3, [sp, #0]
 8007b46:	3301      	adds	r3, #1
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	e777      	b.n	8007a3c <_dtoa_r+0x9cc>
 8007b4c:	f000 f9c2 	bl	8007ed4 <__multadd>
 8007b50:	4629      	mov	r1, r5
 8007b52:	4607      	mov	r7, r0
 8007b54:	2300      	movs	r3, #0
 8007b56:	220a      	movs	r2, #10
 8007b58:	4648      	mov	r0, r9
 8007b5a:	f000 f9bb 	bl	8007ed4 <__multadd>
 8007b5e:	4605      	mov	r5, r0
 8007b60:	e7f0      	b.n	8007b44 <_dtoa_r+0xad4>
 8007b62:	f1bb 0f00 	cmp.w	fp, #0
 8007b66:	bfcc      	ite	gt
 8007b68:	465e      	movgt	r6, fp
 8007b6a:	2601      	movle	r6, #1
 8007b6c:	4456      	add	r6, sl
 8007b6e:	2700      	movs	r7, #0
 8007b70:	9902      	ldr	r1, [sp, #8]
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	2201      	movs	r2, #1
 8007b76:	4648      	mov	r0, r9
 8007b78:	f000 fb50 	bl	800821c <__lshift>
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	9002      	str	r0, [sp, #8]
 8007b80:	f000 fbb8 	bl	80082f4 <__mcmp>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	dcb4      	bgt.n	8007af2 <_dtoa_r+0xa82>
 8007b88:	d102      	bne.n	8007b90 <_dtoa_r+0xb20>
 8007b8a:	9b00      	ldr	r3, [sp, #0]
 8007b8c:	07db      	lsls	r3, r3, #31
 8007b8e:	d4b0      	bmi.n	8007af2 <_dtoa_r+0xa82>
 8007b90:	4633      	mov	r3, r6
 8007b92:	461e      	mov	r6, r3
 8007b94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b98:	2a30      	cmp	r2, #48	@ 0x30
 8007b9a:	d0fa      	beq.n	8007b92 <_dtoa_r+0xb22>
 8007b9c:	e4b5      	b.n	800750a <_dtoa_r+0x49a>
 8007b9e:	459a      	cmp	sl, r3
 8007ba0:	d1a8      	bne.n	8007af4 <_dtoa_r+0xa84>
 8007ba2:	2331      	movs	r3, #49	@ 0x31
 8007ba4:	f108 0801 	add.w	r8, r8, #1
 8007ba8:	f88a 3000 	strb.w	r3, [sl]
 8007bac:	e4ad      	b.n	800750a <_dtoa_r+0x49a>
 8007bae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007bb0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007c0c <_dtoa_r+0xb9c>
 8007bb4:	b11b      	cbz	r3, 8007bbe <_dtoa_r+0xb4e>
 8007bb6:	f10a 0308 	add.w	r3, sl, #8
 8007bba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007bbc:	6013      	str	r3, [r2, #0]
 8007bbe:	4650      	mov	r0, sl
 8007bc0:	b017      	add	sp, #92	@ 0x5c
 8007bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc6:	9b07      	ldr	r3, [sp, #28]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	f77f ae2e 	ble.w	800782a <_dtoa_r+0x7ba>
 8007bce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bd0:	9308      	str	r3, [sp, #32]
 8007bd2:	2001      	movs	r0, #1
 8007bd4:	e64d      	b.n	8007872 <_dtoa_r+0x802>
 8007bd6:	f1bb 0f00 	cmp.w	fp, #0
 8007bda:	f77f aed9 	ble.w	8007990 <_dtoa_r+0x920>
 8007bde:	4656      	mov	r6, sl
 8007be0:	9802      	ldr	r0, [sp, #8]
 8007be2:	4621      	mov	r1, r4
 8007be4:	f7ff f9ba 	bl	8006f5c <quorem>
 8007be8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007bec:	f806 3b01 	strb.w	r3, [r6], #1
 8007bf0:	eba6 020a 	sub.w	r2, r6, sl
 8007bf4:	4593      	cmp	fp, r2
 8007bf6:	ddb4      	ble.n	8007b62 <_dtoa_r+0xaf2>
 8007bf8:	9902      	ldr	r1, [sp, #8]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	220a      	movs	r2, #10
 8007bfe:	4648      	mov	r0, r9
 8007c00:	f000 f968 	bl	8007ed4 <__multadd>
 8007c04:	9002      	str	r0, [sp, #8]
 8007c06:	e7eb      	b.n	8007be0 <_dtoa_r+0xb70>
 8007c08:	080093b0 	.word	0x080093b0
 8007c0c:	0800934b 	.word	0x0800934b

08007c10 <_free_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4605      	mov	r5, r0
 8007c14:	2900      	cmp	r1, #0
 8007c16:	d041      	beq.n	8007c9c <_free_r+0x8c>
 8007c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c1c:	1f0c      	subs	r4, r1, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	bfb8      	it	lt
 8007c22:	18e4      	addlt	r4, r4, r3
 8007c24:	f000 f8e8 	bl	8007df8 <__malloc_lock>
 8007c28:	4a1d      	ldr	r2, [pc, #116]	@ (8007ca0 <_free_r+0x90>)
 8007c2a:	6813      	ldr	r3, [r2, #0]
 8007c2c:	b933      	cbnz	r3, 8007c3c <_free_r+0x2c>
 8007c2e:	6063      	str	r3, [r4, #4]
 8007c30:	6014      	str	r4, [r2, #0]
 8007c32:	4628      	mov	r0, r5
 8007c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c38:	f000 b8e4 	b.w	8007e04 <__malloc_unlock>
 8007c3c:	42a3      	cmp	r3, r4
 8007c3e:	d908      	bls.n	8007c52 <_free_r+0x42>
 8007c40:	6820      	ldr	r0, [r4, #0]
 8007c42:	1821      	adds	r1, r4, r0
 8007c44:	428b      	cmp	r3, r1
 8007c46:	bf01      	itttt	eq
 8007c48:	6819      	ldreq	r1, [r3, #0]
 8007c4a:	685b      	ldreq	r3, [r3, #4]
 8007c4c:	1809      	addeq	r1, r1, r0
 8007c4e:	6021      	streq	r1, [r4, #0]
 8007c50:	e7ed      	b.n	8007c2e <_free_r+0x1e>
 8007c52:	461a      	mov	r2, r3
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	b10b      	cbz	r3, 8007c5c <_free_r+0x4c>
 8007c58:	42a3      	cmp	r3, r4
 8007c5a:	d9fa      	bls.n	8007c52 <_free_r+0x42>
 8007c5c:	6811      	ldr	r1, [r2, #0]
 8007c5e:	1850      	adds	r0, r2, r1
 8007c60:	42a0      	cmp	r0, r4
 8007c62:	d10b      	bne.n	8007c7c <_free_r+0x6c>
 8007c64:	6820      	ldr	r0, [r4, #0]
 8007c66:	4401      	add	r1, r0
 8007c68:	1850      	adds	r0, r2, r1
 8007c6a:	4283      	cmp	r3, r0
 8007c6c:	6011      	str	r1, [r2, #0]
 8007c6e:	d1e0      	bne.n	8007c32 <_free_r+0x22>
 8007c70:	6818      	ldr	r0, [r3, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	6053      	str	r3, [r2, #4]
 8007c76:	4408      	add	r0, r1
 8007c78:	6010      	str	r0, [r2, #0]
 8007c7a:	e7da      	b.n	8007c32 <_free_r+0x22>
 8007c7c:	d902      	bls.n	8007c84 <_free_r+0x74>
 8007c7e:	230c      	movs	r3, #12
 8007c80:	602b      	str	r3, [r5, #0]
 8007c82:	e7d6      	b.n	8007c32 <_free_r+0x22>
 8007c84:	6820      	ldr	r0, [r4, #0]
 8007c86:	1821      	adds	r1, r4, r0
 8007c88:	428b      	cmp	r3, r1
 8007c8a:	bf04      	itt	eq
 8007c8c:	6819      	ldreq	r1, [r3, #0]
 8007c8e:	685b      	ldreq	r3, [r3, #4]
 8007c90:	6063      	str	r3, [r4, #4]
 8007c92:	bf04      	itt	eq
 8007c94:	1809      	addeq	r1, r1, r0
 8007c96:	6021      	streq	r1, [r4, #0]
 8007c98:	6054      	str	r4, [r2, #4]
 8007c9a:	e7ca      	b.n	8007c32 <_free_r+0x22>
 8007c9c:	bd38      	pop	{r3, r4, r5, pc}
 8007c9e:	bf00      	nop
 8007ca0:	200006c4 	.word	0x200006c4

08007ca4 <malloc>:
 8007ca4:	4b02      	ldr	r3, [pc, #8]	@ (8007cb0 <malloc+0xc>)
 8007ca6:	4601      	mov	r1, r0
 8007ca8:	6818      	ldr	r0, [r3, #0]
 8007caa:	f000 b825 	b.w	8007cf8 <_malloc_r>
 8007cae:	bf00      	nop
 8007cb0:	20000048 	.word	0x20000048

08007cb4 <sbrk_aligned>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	4e0f      	ldr	r6, [pc, #60]	@ (8007cf4 <sbrk_aligned+0x40>)
 8007cb8:	460c      	mov	r4, r1
 8007cba:	6831      	ldr	r1, [r6, #0]
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	b911      	cbnz	r1, 8007cc6 <sbrk_aligned+0x12>
 8007cc0:	f000 fe50 	bl	8008964 <_sbrk_r>
 8007cc4:	6030      	str	r0, [r6, #0]
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4628      	mov	r0, r5
 8007cca:	f000 fe4b 	bl	8008964 <_sbrk_r>
 8007cce:	1c43      	adds	r3, r0, #1
 8007cd0:	d103      	bne.n	8007cda <sbrk_aligned+0x26>
 8007cd2:	f04f 34ff 	mov.w	r4, #4294967295
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	bd70      	pop	{r4, r5, r6, pc}
 8007cda:	1cc4      	adds	r4, r0, #3
 8007cdc:	f024 0403 	bic.w	r4, r4, #3
 8007ce0:	42a0      	cmp	r0, r4
 8007ce2:	d0f8      	beq.n	8007cd6 <sbrk_aligned+0x22>
 8007ce4:	1a21      	subs	r1, r4, r0
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	f000 fe3c 	bl	8008964 <_sbrk_r>
 8007cec:	3001      	adds	r0, #1
 8007cee:	d1f2      	bne.n	8007cd6 <sbrk_aligned+0x22>
 8007cf0:	e7ef      	b.n	8007cd2 <sbrk_aligned+0x1e>
 8007cf2:	bf00      	nop
 8007cf4:	200006c0 	.word	0x200006c0

08007cf8 <_malloc_r>:
 8007cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cfc:	1ccd      	adds	r5, r1, #3
 8007cfe:	f025 0503 	bic.w	r5, r5, #3
 8007d02:	3508      	adds	r5, #8
 8007d04:	2d0c      	cmp	r5, #12
 8007d06:	bf38      	it	cc
 8007d08:	250c      	movcc	r5, #12
 8007d0a:	2d00      	cmp	r5, #0
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	db01      	blt.n	8007d14 <_malloc_r+0x1c>
 8007d10:	42a9      	cmp	r1, r5
 8007d12:	d904      	bls.n	8007d1e <_malloc_r+0x26>
 8007d14:	230c      	movs	r3, #12
 8007d16:	6033      	str	r3, [r6, #0]
 8007d18:	2000      	movs	r0, #0
 8007d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007df4 <_malloc_r+0xfc>
 8007d22:	f000 f869 	bl	8007df8 <__malloc_lock>
 8007d26:	f8d8 3000 	ldr.w	r3, [r8]
 8007d2a:	461c      	mov	r4, r3
 8007d2c:	bb44      	cbnz	r4, 8007d80 <_malloc_r+0x88>
 8007d2e:	4629      	mov	r1, r5
 8007d30:	4630      	mov	r0, r6
 8007d32:	f7ff ffbf 	bl	8007cb4 <sbrk_aligned>
 8007d36:	1c43      	adds	r3, r0, #1
 8007d38:	4604      	mov	r4, r0
 8007d3a:	d158      	bne.n	8007dee <_malloc_r+0xf6>
 8007d3c:	f8d8 4000 	ldr.w	r4, [r8]
 8007d40:	4627      	mov	r7, r4
 8007d42:	2f00      	cmp	r7, #0
 8007d44:	d143      	bne.n	8007dce <_malloc_r+0xd6>
 8007d46:	2c00      	cmp	r4, #0
 8007d48:	d04b      	beq.n	8007de2 <_malloc_r+0xea>
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	4639      	mov	r1, r7
 8007d4e:	4630      	mov	r0, r6
 8007d50:	eb04 0903 	add.w	r9, r4, r3
 8007d54:	f000 fe06 	bl	8008964 <_sbrk_r>
 8007d58:	4581      	cmp	r9, r0
 8007d5a:	d142      	bne.n	8007de2 <_malloc_r+0xea>
 8007d5c:	6821      	ldr	r1, [r4, #0]
 8007d5e:	1a6d      	subs	r5, r5, r1
 8007d60:	4629      	mov	r1, r5
 8007d62:	4630      	mov	r0, r6
 8007d64:	f7ff ffa6 	bl	8007cb4 <sbrk_aligned>
 8007d68:	3001      	adds	r0, #1
 8007d6a:	d03a      	beq.n	8007de2 <_malloc_r+0xea>
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	442b      	add	r3, r5
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	f8d8 3000 	ldr.w	r3, [r8]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	bb62      	cbnz	r2, 8007dd4 <_malloc_r+0xdc>
 8007d7a:	f8c8 7000 	str.w	r7, [r8]
 8007d7e:	e00f      	b.n	8007da0 <_malloc_r+0xa8>
 8007d80:	6822      	ldr	r2, [r4, #0]
 8007d82:	1b52      	subs	r2, r2, r5
 8007d84:	d420      	bmi.n	8007dc8 <_malloc_r+0xd0>
 8007d86:	2a0b      	cmp	r2, #11
 8007d88:	d917      	bls.n	8007dba <_malloc_r+0xc2>
 8007d8a:	1961      	adds	r1, r4, r5
 8007d8c:	42a3      	cmp	r3, r4
 8007d8e:	6025      	str	r5, [r4, #0]
 8007d90:	bf18      	it	ne
 8007d92:	6059      	strne	r1, [r3, #4]
 8007d94:	6863      	ldr	r3, [r4, #4]
 8007d96:	bf08      	it	eq
 8007d98:	f8c8 1000 	streq.w	r1, [r8]
 8007d9c:	5162      	str	r2, [r4, r5]
 8007d9e:	604b      	str	r3, [r1, #4]
 8007da0:	4630      	mov	r0, r6
 8007da2:	f000 f82f 	bl	8007e04 <__malloc_unlock>
 8007da6:	f104 000b 	add.w	r0, r4, #11
 8007daa:	1d23      	adds	r3, r4, #4
 8007dac:	f020 0007 	bic.w	r0, r0, #7
 8007db0:	1ac2      	subs	r2, r0, r3
 8007db2:	bf1c      	itt	ne
 8007db4:	1a1b      	subne	r3, r3, r0
 8007db6:	50a3      	strne	r3, [r4, r2]
 8007db8:	e7af      	b.n	8007d1a <_malloc_r+0x22>
 8007dba:	6862      	ldr	r2, [r4, #4]
 8007dbc:	42a3      	cmp	r3, r4
 8007dbe:	bf0c      	ite	eq
 8007dc0:	f8c8 2000 	streq.w	r2, [r8]
 8007dc4:	605a      	strne	r2, [r3, #4]
 8007dc6:	e7eb      	b.n	8007da0 <_malloc_r+0xa8>
 8007dc8:	4623      	mov	r3, r4
 8007dca:	6864      	ldr	r4, [r4, #4]
 8007dcc:	e7ae      	b.n	8007d2c <_malloc_r+0x34>
 8007dce:	463c      	mov	r4, r7
 8007dd0:	687f      	ldr	r7, [r7, #4]
 8007dd2:	e7b6      	b.n	8007d42 <_malloc_r+0x4a>
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	42a3      	cmp	r3, r4
 8007dda:	d1fb      	bne.n	8007dd4 <_malloc_r+0xdc>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	6053      	str	r3, [r2, #4]
 8007de0:	e7de      	b.n	8007da0 <_malloc_r+0xa8>
 8007de2:	230c      	movs	r3, #12
 8007de4:	6033      	str	r3, [r6, #0]
 8007de6:	4630      	mov	r0, r6
 8007de8:	f000 f80c 	bl	8007e04 <__malloc_unlock>
 8007dec:	e794      	b.n	8007d18 <_malloc_r+0x20>
 8007dee:	6005      	str	r5, [r0, #0]
 8007df0:	e7d6      	b.n	8007da0 <_malloc_r+0xa8>
 8007df2:	bf00      	nop
 8007df4:	200006c4 	.word	0x200006c4

08007df8 <__malloc_lock>:
 8007df8:	4801      	ldr	r0, [pc, #4]	@ (8007e00 <__malloc_lock+0x8>)
 8007dfa:	f7ff b88e 	b.w	8006f1a <__retarget_lock_acquire_recursive>
 8007dfe:	bf00      	nop
 8007e00:	200006bc 	.word	0x200006bc

08007e04 <__malloc_unlock>:
 8007e04:	4801      	ldr	r0, [pc, #4]	@ (8007e0c <__malloc_unlock+0x8>)
 8007e06:	f7ff b889 	b.w	8006f1c <__retarget_lock_release_recursive>
 8007e0a:	bf00      	nop
 8007e0c:	200006bc 	.word	0x200006bc

08007e10 <_Balloc>:
 8007e10:	b570      	push	{r4, r5, r6, lr}
 8007e12:	69c6      	ldr	r6, [r0, #28]
 8007e14:	4604      	mov	r4, r0
 8007e16:	460d      	mov	r5, r1
 8007e18:	b976      	cbnz	r6, 8007e38 <_Balloc+0x28>
 8007e1a:	2010      	movs	r0, #16
 8007e1c:	f7ff ff42 	bl	8007ca4 <malloc>
 8007e20:	4602      	mov	r2, r0
 8007e22:	61e0      	str	r0, [r4, #28]
 8007e24:	b920      	cbnz	r0, 8007e30 <_Balloc+0x20>
 8007e26:	4b18      	ldr	r3, [pc, #96]	@ (8007e88 <_Balloc+0x78>)
 8007e28:	4818      	ldr	r0, [pc, #96]	@ (8007e8c <_Balloc+0x7c>)
 8007e2a:	216b      	movs	r1, #107	@ 0x6b
 8007e2c:	f7ff f878 	bl	8006f20 <__assert_func>
 8007e30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e34:	6006      	str	r6, [r0, #0]
 8007e36:	60c6      	str	r6, [r0, #12]
 8007e38:	69e6      	ldr	r6, [r4, #28]
 8007e3a:	68f3      	ldr	r3, [r6, #12]
 8007e3c:	b183      	cbz	r3, 8007e60 <_Balloc+0x50>
 8007e3e:	69e3      	ldr	r3, [r4, #28]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e46:	b9b8      	cbnz	r0, 8007e78 <_Balloc+0x68>
 8007e48:	2101      	movs	r1, #1
 8007e4a:	fa01 f605 	lsl.w	r6, r1, r5
 8007e4e:	1d72      	adds	r2, r6, #5
 8007e50:	0092      	lsls	r2, r2, #2
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 fdab 	bl	80089ae <_calloc_r>
 8007e58:	b160      	cbz	r0, 8007e74 <_Balloc+0x64>
 8007e5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e5e:	e00e      	b.n	8007e7e <_Balloc+0x6e>
 8007e60:	2221      	movs	r2, #33	@ 0x21
 8007e62:	2104      	movs	r1, #4
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 fda2 	bl	80089ae <_calloc_r>
 8007e6a:	69e3      	ldr	r3, [r4, #28]
 8007e6c:	60f0      	str	r0, [r6, #12]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1e4      	bne.n	8007e3e <_Balloc+0x2e>
 8007e74:	2000      	movs	r0, #0
 8007e76:	bd70      	pop	{r4, r5, r6, pc}
 8007e78:	6802      	ldr	r2, [r0, #0]
 8007e7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e84:	e7f7      	b.n	8007e76 <_Balloc+0x66>
 8007e86:	bf00      	nop
 8007e88:	0800926c 	.word	0x0800926c
 8007e8c:	080093c1 	.word	0x080093c1

08007e90 <_Bfree>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	69c6      	ldr	r6, [r0, #28]
 8007e94:	4605      	mov	r5, r0
 8007e96:	460c      	mov	r4, r1
 8007e98:	b976      	cbnz	r6, 8007eb8 <_Bfree+0x28>
 8007e9a:	2010      	movs	r0, #16
 8007e9c:	f7ff ff02 	bl	8007ca4 <malloc>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	61e8      	str	r0, [r5, #28]
 8007ea4:	b920      	cbnz	r0, 8007eb0 <_Bfree+0x20>
 8007ea6:	4b09      	ldr	r3, [pc, #36]	@ (8007ecc <_Bfree+0x3c>)
 8007ea8:	4809      	ldr	r0, [pc, #36]	@ (8007ed0 <_Bfree+0x40>)
 8007eaa:	218f      	movs	r1, #143	@ 0x8f
 8007eac:	f7ff f838 	bl	8006f20 <__assert_func>
 8007eb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007eb4:	6006      	str	r6, [r0, #0]
 8007eb6:	60c6      	str	r6, [r0, #12]
 8007eb8:	b13c      	cbz	r4, 8007eca <_Bfree+0x3a>
 8007eba:	69eb      	ldr	r3, [r5, #28]
 8007ebc:	6862      	ldr	r2, [r4, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ec4:	6021      	str	r1, [r4, #0]
 8007ec6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007eca:	bd70      	pop	{r4, r5, r6, pc}
 8007ecc:	0800926c 	.word	0x0800926c
 8007ed0:	080093c1 	.word	0x080093c1

08007ed4 <__multadd>:
 8007ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed8:	690d      	ldr	r5, [r1, #16]
 8007eda:	4607      	mov	r7, r0
 8007edc:	460c      	mov	r4, r1
 8007ede:	461e      	mov	r6, r3
 8007ee0:	f101 0c14 	add.w	ip, r1, #20
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	f8dc 3000 	ldr.w	r3, [ip]
 8007eea:	b299      	uxth	r1, r3
 8007eec:	fb02 6101 	mla	r1, r2, r1, r6
 8007ef0:	0c1e      	lsrs	r6, r3, #16
 8007ef2:	0c0b      	lsrs	r3, r1, #16
 8007ef4:	fb02 3306 	mla	r3, r2, r6, r3
 8007ef8:	b289      	uxth	r1, r1
 8007efa:	3001      	adds	r0, #1
 8007efc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f00:	4285      	cmp	r5, r0
 8007f02:	f84c 1b04 	str.w	r1, [ip], #4
 8007f06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f0a:	dcec      	bgt.n	8007ee6 <__multadd+0x12>
 8007f0c:	b30e      	cbz	r6, 8007f52 <__multadd+0x7e>
 8007f0e:	68a3      	ldr	r3, [r4, #8]
 8007f10:	42ab      	cmp	r3, r5
 8007f12:	dc19      	bgt.n	8007f48 <__multadd+0x74>
 8007f14:	6861      	ldr	r1, [r4, #4]
 8007f16:	4638      	mov	r0, r7
 8007f18:	3101      	adds	r1, #1
 8007f1a:	f7ff ff79 	bl	8007e10 <_Balloc>
 8007f1e:	4680      	mov	r8, r0
 8007f20:	b928      	cbnz	r0, 8007f2e <__multadd+0x5a>
 8007f22:	4602      	mov	r2, r0
 8007f24:	4b0c      	ldr	r3, [pc, #48]	@ (8007f58 <__multadd+0x84>)
 8007f26:	480d      	ldr	r0, [pc, #52]	@ (8007f5c <__multadd+0x88>)
 8007f28:	21ba      	movs	r1, #186	@ 0xba
 8007f2a:	f7fe fff9 	bl	8006f20 <__assert_func>
 8007f2e:	6922      	ldr	r2, [r4, #16]
 8007f30:	3202      	adds	r2, #2
 8007f32:	f104 010c 	add.w	r1, r4, #12
 8007f36:	0092      	lsls	r2, r2, #2
 8007f38:	300c      	adds	r0, #12
 8007f3a:	f000 fd23 	bl	8008984 <memcpy>
 8007f3e:	4621      	mov	r1, r4
 8007f40:	4638      	mov	r0, r7
 8007f42:	f7ff ffa5 	bl	8007e90 <_Bfree>
 8007f46:	4644      	mov	r4, r8
 8007f48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f4c:	3501      	adds	r5, #1
 8007f4e:	615e      	str	r6, [r3, #20]
 8007f50:	6125      	str	r5, [r4, #16]
 8007f52:	4620      	mov	r0, r4
 8007f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f58:	080093b0 	.word	0x080093b0
 8007f5c:	080093c1 	.word	0x080093c1

08007f60 <__hi0bits>:
 8007f60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007f64:	4603      	mov	r3, r0
 8007f66:	bf36      	itet	cc
 8007f68:	0403      	lslcc	r3, r0, #16
 8007f6a:	2000      	movcs	r0, #0
 8007f6c:	2010      	movcc	r0, #16
 8007f6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f72:	bf3c      	itt	cc
 8007f74:	021b      	lslcc	r3, r3, #8
 8007f76:	3008      	addcc	r0, #8
 8007f78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f7c:	bf3c      	itt	cc
 8007f7e:	011b      	lslcc	r3, r3, #4
 8007f80:	3004      	addcc	r0, #4
 8007f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f86:	bf3c      	itt	cc
 8007f88:	009b      	lslcc	r3, r3, #2
 8007f8a:	3002      	addcc	r0, #2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	db05      	blt.n	8007f9c <__hi0bits+0x3c>
 8007f90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007f94:	f100 0001 	add.w	r0, r0, #1
 8007f98:	bf08      	it	eq
 8007f9a:	2020      	moveq	r0, #32
 8007f9c:	4770      	bx	lr

08007f9e <__lo0bits>:
 8007f9e:	6803      	ldr	r3, [r0, #0]
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	f013 0007 	ands.w	r0, r3, #7
 8007fa6:	d00b      	beq.n	8007fc0 <__lo0bits+0x22>
 8007fa8:	07d9      	lsls	r1, r3, #31
 8007faa:	d421      	bmi.n	8007ff0 <__lo0bits+0x52>
 8007fac:	0798      	lsls	r0, r3, #30
 8007fae:	bf49      	itett	mi
 8007fb0:	085b      	lsrmi	r3, r3, #1
 8007fb2:	089b      	lsrpl	r3, r3, #2
 8007fb4:	2001      	movmi	r0, #1
 8007fb6:	6013      	strmi	r3, [r2, #0]
 8007fb8:	bf5c      	itt	pl
 8007fba:	6013      	strpl	r3, [r2, #0]
 8007fbc:	2002      	movpl	r0, #2
 8007fbe:	4770      	bx	lr
 8007fc0:	b299      	uxth	r1, r3
 8007fc2:	b909      	cbnz	r1, 8007fc8 <__lo0bits+0x2a>
 8007fc4:	0c1b      	lsrs	r3, r3, #16
 8007fc6:	2010      	movs	r0, #16
 8007fc8:	b2d9      	uxtb	r1, r3
 8007fca:	b909      	cbnz	r1, 8007fd0 <__lo0bits+0x32>
 8007fcc:	3008      	adds	r0, #8
 8007fce:	0a1b      	lsrs	r3, r3, #8
 8007fd0:	0719      	lsls	r1, r3, #28
 8007fd2:	bf04      	itt	eq
 8007fd4:	091b      	lsreq	r3, r3, #4
 8007fd6:	3004      	addeq	r0, #4
 8007fd8:	0799      	lsls	r1, r3, #30
 8007fda:	bf04      	itt	eq
 8007fdc:	089b      	lsreq	r3, r3, #2
 8007fde:	3002      	addeq	r0, #2
 8007fe0:	07d9      	lsls	r1, r3, #31
 8007fe2:	d403      	bmi.n	8007fec <__lo0bits+0x4e>
 8007fe4:	085b      	lsrs	r3, r3, #1
 8007fe6:	f100 0001 	add.w	r0, r0, #1
 8007fea:	d003      	beq.n	8007ff4 <__lo0bits+0x56>
 8007fec:	6013      	str	r3, [r2, #0]
 8007fee:	4770      	bx	lr
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	4770      	bx	lr
 8007ff4:	2020      	movs	r0, #32
 8007ff6:	4770      	bx	lr

08007ff8 <__i2b>:
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	f7ff ff07 	bl	8007e10 <_Balloc>
 8008002:	4602      	mov	r2, r0
 8008004:	b928      	cbnz	r0, 8008012 <__i2b+0x1a>
 8008006:	4b05      	ldr	r3, [pc, #20]	@ (800801c <__i2b+0x24>)
 8008008:	4805      	ldr	r0, [pc, #20]	@ (8008020 <__i2b+0x28>)
 800800a:	f240 1145 	movw	r1, #325	@ 0x145
 800800e:	f7fe ff87 	bl	8006f20 <__assert_func>
 8008012:	2301      	movs	r3, #1
 8008014:	6144      	str	r4, [r0, #20]
 8008016:	6103      	str	r3, [r0, #16]
 8008018:	bd10      	pop	{r4, pc}
 800801a:	bf00      	nop
 800801c:	080093b0 	.word	0x080093b0
 8008020:	080093c1 	.word	0x080093c1

08008024 <__multiply>:
 8008024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008028:	4617      	mov	r7, r2
 800802a:	690a      	ldr	r2, [r1, #16]
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	429a      	cmp	r2, r3
 8008030:	bfa8      	it	ge
 8008032:	463b      	movge	r3, r7
 8008034:	4689      	mov	r9, r1
 8008036:	bfa4      	itt	ge
 8008038:	460f      	movge	r7, r1
 800803a:	4699      	movge	r9, r3
 800803c:	693d      	ldr	r5, [r7, #16]
 800803e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	eb05 060a 	add.w	r6, r5, sl
 800804a:	42b3      	cmp	r3, r6
 800804c:	b085      	sub	sp, #20
 800804e:	bfb8      	it	lt
 8008050:	3101      	addlt	r1, #1
 8008052:	f7ff fedd 	bl	8007e10 <_Balloc>
 8008056:	b930      	cbnz	r0, 8008066 <__multiply+0x42>
 8008058:	4602      	mov	r2, r0
 800805a:	4b41      	ldr	r3, [pc, #260]	@ (8008160 <__multiply+0x13c>)
 800805c:	4841      	ldr	r0, [pc, #260]	@ (8008164 <__multiply+0x140>)
 800805e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008062:	f7fe ff5d 	bl	8006f20 <__assert_func>
 8008066:	f100 0414 	add.w	r4, r0, #20
 800806a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800806e:	4623      	mov	r3, r4
 8008070:	2200      	movs	r2, #0
 8008072:	4573      	cmp	r3, lr
 8008074:	d320      	bcc.n	80080b8 <__multiply+0x94>
 8008076:	f107 0814 	add.w	r8, r7, #20
 800807a:	f109 0114 	add.w	r1, r9, #20
 800807e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008082:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008086:	9302      	str	r3, [sp, #8]
 8008088:	1beb      	subs	r3, r5, r7
 800808a:	3b15      	subs	r3, #21
 800808c:	f023 0303 	bic.w	r3, r3, #3
 8008090:	3304      	adds	r3, #4
 8008092:	3715      	adds	r7, #21
 8008094:	42bd      	cmp	r5, r7
 8008096:	bf38      	it	cc
 8008098:	2304      	movcc	r3, #4
 800809a:	9301      	str	r3, [sp, #4]
 800809c:	9b02      	ldr	r3, [sp, #8]
 800809e:	9103      	str	r1, [sp, #12]
 80080a0:	428b      	cmp	r3, r1
 80080a2:	d80c      	bhi.n	80080be <__multiply+0x9a>
 80080a4:	2e00      	cmp	r6, #0
 80080a6:	dd03      	ble.n	80080b0 <__multiply+0x8c>
 80080a8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d055      	beq.n	800815c <__multiply+0x138>
 80080b0:	6106      	str	r6, [r0, #16]
 80080b2:	b005      	add	sp, #20
 80080b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b8:	f843 2b04 	str.w	r2, [r3], #4
 80080bc:	e7d9      	b.n	8008072 <__multiply+0x4e>
 80080be:	f8b1 a000 	ldrh.w	sl, [r1]
 80080c2:	f1ba 0f00 	cmp.w	sl, #0
 80080c6:	d01f      	beq.n	8008108 <__multiply+0xe4>
 80080c8:	46c4      	mov	ip, r8
 80080ca:	46a1      	mov	r9, r4
 80080cc:	2700      	movs	r7, #0
 80080ce:	f85c 2b04 	ldr.w	r2, [ip], #4
 80080d2:	f8d9 3000 	ldr.w	r3, [r9]
 80080d6:	fa1f fb82 	uxth.w	fp, r2
 80080da:	b29b      	uxth	r3, r3
 80080dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80080e0:	443b      	add	r3, r7
 80080e2:	f8d9 7000 	ldr.w	r7, [r9]
 80080e6:	0c12      	lsrs	r2, r2, #16
 80080e8:	0c3f      	lsrs	r7, r7, #16
 80080ea:	fb0a 7202 	mla	r2, sl, r2, r7
 80080ee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080f8:	4565      	cmp	r5, ip
 80080fa:	f849 3b04 	str.w	r3, [r9], #4
 80080fe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008102:	d8e4      	bhi.n	80080ce <__multiply+0xaa>
 8008104:	9b01      	ldr	r3, [sp, #4]
 8008106:	50e7      	str	r7, [r4, r3]
 8008108:	9b03      	ldr	r3, [sp, #12]
 800810a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800810e:	3104      	adds	r1, #4
 8008110:	f1b9 0f00 	cmp.w	r9, #0
 8008114:	d020      	beq.n	8008158 <__multiply+0x134>
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	4647      	mov	r7, r8
 800811a:	46a4      	mov	ip, r4
 800811c:	f04f 0a00 	mov.w	sl, #0
 8008120:	f8b7 b000 	ldrh.w	fp, [r7]
 8008124:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008128:	fb09 220b 	mla	r2, r9, fp, r2
 800812c:	4452      	add	r2, sl
 800812e:	b29b      	uxth	r3, r3
 8008130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008134:	f84c 3b04 	str.w	r3, [ip], #4
 8008138:	f857 3b04 	ldr.w	r3, [r7], #4
 800813c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008140:	f8bc 3000 	ldrh.w	r3, [ip]
 8008144:	fb09 330a 	mla	r3, r9, sl, r3
 8008148:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800814c:	42bd      	cmp	r5, r7
 800814e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008152:	d8e5      	bhi.n	8008120 <__multiply+0xfc>
 8008154:	9a01      	ldr	r2, [sp, #4]
 8008156:	50a3      	str	r3, [r4, r2]
 8008158:	3404      	adds	r4, #4
 800815a:	e79f      	b.n	800809c <__multiply+0x78>
 800815c:	3e01      	subs	r6, #1
 800815e:	e7a1      	b.n	80080a4 <__multiply+0x80>
 8008160:	080093b0 	.word	0x080093b0
 8008164:	080093c1 	.word	0x080093c1

08008168 <__pow5mult>:
 8008168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800816c:	4615      	mov	r5, r2
 800816e:	f012 0203 	ands.w	r2, r2, #3
 8008172:	4607      	mov	r7, r0
 8008174:	460e      	mov	r6, r1
 8008176:	d007      	beq.n	8008188 <__pow5mult+0x20>
 8008178:	4c25      	ldr	r4, [pc, #148]	@ (8008210 <__pow5mult+0xa8>)
 800817a:	3a01      	subs	r2, #1
 800817c:	2300      	movs	r3, #0
 800817e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008182:	f7ff fea7 	bl	8007ed4 <__multadd>
 8008186:	4606      	mov	r6, r0
 8008188:	10ad      	asrs	r5, r5, #2
 800818a:	d03d      	beq.n	8008208 <__pow5mult+0xa0>
 800818c:	69fc      	ldr	r4, [r7, #28]
 800818e:	b97c      	cbnz	r4, 80081b0 <__pow5mult+0x48>
 8008190:	2010      	movs	r0, #16
 8008192:	f7ff fd87 	bl	8007ca4 <malloc>
 8008196:	4602      	mov	r2, r0
 8008198:	61f8      	str	r0, [r7, #28]
 800819a:	b928      	cbnz	r0, 80081a8 <__pow5mult+0x40>
 800819c:	4b1d      	ldr	r3, [pc, #116]	@ (8008214 <__pow5mult+0xac>)
 800819e:	481e      	ldr	r0, [pc, #120]	@ (8008218 <__pow5mult+0xb0>)
 80081a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80081a4:	f7fe febc 	bl	8006f20 <__assert_func>
 80081a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081ac:	6004      	str	r4, [r0, #0]
 80081ae:	60c4      	str	r4, [r0, #12]
 80081b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80081b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081b8:	b94c      	cbnz	r4, 80081ce <__pow5mult+0x66>
 80081ba:	f240 2171 	movw	r1, #625	@ 0x271
 80081be:	4638      	mov	r0, r7
 80081c0:	f7ff ff1a 	bl	8007ff8 <__i2b>
 80081c4:	2300      	movs	r3, #0
 80081c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80081ca:	4604      	mov	r4, r0
 80081cc:	6003      	str	r3, [r0, #0]
 80081ce:	f04f 0900 	mov.w	r9, #0
 80081d2:	07eb      	lsls	r3, r5, #31
 80081d4:	d50a      	bpl.n	80081ec <__pow5mult+0x84>
 80081d6:	4631      	mov	r1, r6
 80081d8:	4622      	mov	r2, r4
 80081da:	4638      	mov	r0, r7
 80081dc:	f7ff ff22 	bl	8008024 <__multiply>
 80081e0:	4631      	mov	r1, r6
 80081e2:	4680      	mov	r8, r0
 80081e4:	4638      	mov	r0, r7
 80081e6:	f7ff fe53 	bl	8007e90 <_Bfree>
 80081ea:	4646      	mov	r6, r8
 80081ec:	106d      	asrs	r5, r5, #1
 80081ee:	d00b      	beq.n	8008208 <__pow5mult+0xa0>
 80081f0:	6820      	ldr	r0, [r4, #0]
 80081f2:	b938      	cbnz	r0, 8008204 <__pow5mult+0x9c>
 80081f4:	4622      	mov	r2, r4
 80081f6:	4621      	mov	r1, r4
 80081f8:	4638      	mov	r0, r7
 80081fa:	f7ff ff13 	bl	8008024 <__multiply>
 80081fe:	6020      	str	r0, [r4, #0]
 8008200:	f8c0 9000 	str.w	r9, [r0]
 8008204:	4604      	mov	r4, r0
 8008206:	e7e4      	b.n	80081d2 <__pow5mult+0x6a>
 8008208:	4630      	mov	r0, r6
 800820a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800820e:	bf00      	nop
 8008210:	08009438 	.word	0x08009438
 8008214:	0800926c 	.word	0x0800926c
 8008218:	080093c1 	.word	0x080093c1

0800821c <__lshift>:
 800821c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008220:	460c      	mov	r4, r1
 8008222:	6849      	ldr	r1, [r1, #4]
 8008224:	6923      	ldr	r3, [r4, #16]
 8008226:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800822a:	68a3      	ldr	r3, [r4, #8]
 800822c:	4607      	mov	r7, r0
 800822e:	4691      	mov	r9, r2
 8008230:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008234:	f108 0601 	add.w	r6, r8, #1
 8008238:	42b3      	cmp	r3, r6
 800823a:	db0b      	blt.n	8008254 <__lshift+0x38>
 800823c:	4638      	mov	r0, r7
 800823e:	f7ff fde7 	bl	8007e10 <_Balloc>
 8008242:	4605      	mov	r5, r0
 8008244:	b948      	cbnz	r0, 800825a <__lshift+0x3e>
 8008246:	4602      	mov	r2, r0
 8008248:	4b28      	ldr	r3, [pc, #160]	@ (80082ec <__lshift+0xd0>)
 800824a:	4829      	ldr	r0, [pc, #164]	@ (80082f0 <__lshift+0xd4>)
 800824c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008250:	f7fe fe66 	bl	8006f20 <__assert_func>
 8008254:	3101      	adds	r1, #1
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	e7ee      	b.n	8008238 <__lshift+0x1c>
 800825a:	2300      	movs	r3, #0
 800825c:	f100 0114 	add.w	r1, r0, #20
 8008260:	f100 0210 	add.w	r2, r0, #16
 8008264:	4618      	mov	r0, r3
 8008266:	4553      	cmp	r3, sl
 8008268:	db33      	blt.n	80082d2 <__lshift+0xb6>
 800826a:	6920      	ldr	r0, [r4, #16]
 800826c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008270:	f104 0314 	add.w	r3, r4, #20
 8008274:	f019 091f 	ands.w	r9, r9, #31
 8008278:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800827c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008280:	d02b      	beq.n	80082da <__lshift+0xbe>
 8008282:	f1c9 0e20 	rsb	lr, r9, #32
 8008286:	468a      	mov	sl, r1
 8008288:	2200      	movs	r2, #0
 800828a:	6818      	ldr	r0, [r3, #0]
 800828c:	fa00 f009 	lsl.w	r0, r0, r9
 8008290:	4310      	orrs	r0, r2
 8008292:	f84a 0b04 	str.w	r0, [sl], #4
 8008296:	f853 2b04 	ldr.w	r2, [r3], #4
 800829a:	459c      	cmp	ip, r3
 800829c:	fa22 f20e 	lsr.w	r2, r2, lr
 80082a0:	d8f3      	bhi.n	800828a <__lshift+0x6e>
 80082a2:	ebac 0304 	sub.w	r3, ip, r4
 80082a6:	3b15      	subs	r3, #21
 80082a8:	f023 0303 	bic.w	r3, r3, #3
 80082ac:	3304      	adds	r3, #4
 80082ae:	f104 0015 	add.w	r0, r4, #21
 80082b2:	4560      	cmp	r0, ip
 80082b4:	bf88      	it	hi
 80082b6:	2304      	movhi	r3, #4
 80082b8:	50ca      	str	r2, [r1, r3]
 80082ba:	b10a      	cbz	r2, 80082c0 <__lshift+0xa4>
 80082bc:	f108 0602 	add.w	r6, r8, #2
 80082c0:	3e01      	subs	r6, #1
 80082c2:	4638      	mov	r0, r7
 80082c4:	612e      	str	r6, [r5, #16]
 80082c6:	4621      	mov	r1, r4
 80082c8:	f7ff fde2 	bl	8007e90 <_Bfree>
 80082cc:	4628      	mov	r0, r5
 80082ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80082d6:	3301      	adds	r3, #1
 80082d8:	e7c5      	b.n	8008266 <__lshift+0x4a>
 80082da:	3904      	subs	r1, #4
 80082dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80082e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80082e4:	459c      	cmp	ip, r3
 80082e6:	d8f9      	bhi.n	80082dc <__lshift+0xc0>
 80082e8:	e7ea      	b.n	80082c0 <__lshift+0xa4>
 80082ea:	bf00      	nop
 80082ec:	080093b0 	.word	0x080093b0
 80082f0:	080093c1 	.word	0x080093c1

080082f4 <__mcmp>:
 80082f4:	690a      	ldr	r2, [r1, #16]
 80082f6:	4603      	mov	r3, r0
 80082f8:	6900      	ldr	r0, [r0, #16]
 80082fa:	1a80      	subs	r0, r0, r2
 80082fc:	b530      	push	{r4, r5, lr}
 80082fe:	d10e      	bne.n	800831e <__mcmp+0x2a>
 8008300:	3314      	adds	r3, #20
 8008302:	3114      	adds	r1, #20
 8008304:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008308:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800830c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008310:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008314:	4295      	cmp	r5, r2
 8008316:	d003      	beq.n	8008320 <__mcmp+0x2c>
 8008318:	d205      	bcs.n	8008326 <__mcmp+0x32>
 800831a:	f04f 30ff 	mov.w	r0, #4294967295
 800831e:	bd30      	pop	{r4, r5, pc}
 8008320:	42a3      	cmp	r3, r4
 8008322:	d3f3      	bcc.n	800830c <__mcmp+0x18>
 8008324:	e7fb      	b.n	800831e <__mcmp+0x2a>
 8008326:	2001      	movs	r0, #1
 8008328:	e7f9      	b.n	800831e <__mcmp+0x2a>
	...

0800832c <__mdiff>:
 800832c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008330:	4689      	mov	r9, r1
 8008332:	4606      	mov	r6, r0
 8008334:	4611      	mov	r1, r2
 8008336:	4648      	mov	r0, r9
 8008338:	4614      	mov	r4, r2
 800833a:	f7ff ffdb 	bl	80082f4 <__mcmp>
 800833e:	1e05      	subs	r5, r0, #0
 8008340:	d112      	bne.n	8008368 <__mdiff+0x3c>
 8008342:	4629      	mov	r1, r5
 8008344:	4630      	mov	r0, r6
 8008346:	f7ff fd63 	bl	8007e10 <_Balloc>
 800834a:	4602      	mov	r2, r0
 800834c:	b928      	cbnz	r0, 800835a <__mdiff+0x2e>
 800834e:	4b3f      	ldr	r3, [pc, #252]	@ (800844c <__mdiff+0x120>)
 8008350:	f240 2137 	movw	r1, #567	@ 0x237
 8008354:	483e      	ldr	r0, [pc, #248]	@ (8008450 <__mdiff+0x124>)
 8008356:	f7fe fde3 	bl	8006f20 <__assert_func>
 800835a:	2301      	movs	r3, #1
 800835c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008360:	4610      	mov	r0, r2
 8008362:	b003      	add	sp, #12
 8008364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008368:	bfbc      	itt	lt
 800836a:	464b      	movlt	r3, r9
 800836c:	46a1      	movlt	r9, r4
 800836e:	4630      	mov	r0, r6
 8008370:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008374:	bfba      	itte	lt
 8008376:	461c      	movlt	r4, r3
 8008378:	2501      	movlt	r5, #1
 800837a:	2500      	movge	r5, #0
 800837c:	f7ff fd48 	bl	8007e10 <_Balloc>
 8008380:	4602      	mov	r2, r0
 8008382:	b918      	cbnz	r0, 800838c <__mdiff+0x60>
 8008384:	4b31      	ldr	r3, [pc, #196]	@ (800844c <__mdiff+0x120>)
 8008386:	f240 2145 	movw	r1, #581	@ 0x245
 800838a:	e7e3      	b.n	8008354 <__mdiff+0x28>
 800838c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008390:	6926      	ldr	r6, [r4, #16]
 8008392:	60c5      	str	r5, [r0, #12]
 8008394:	f109 0310 	add.w	r3, r9, #16
 8008398:	f109 0514 	add.w	r5, r9, #20
 800839c:	f104 0e14 	add.w	lr, r4, #20
 80083a0:	f100 0b14 	add.w	fp, r0, #20
 80083a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80083a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80083ac:	9301      	str	r3, [sp, #4]
 80083ae:	46d9      	mov	r9, fp
 80083b0:	f04f 0c00 	mov.w	ip, #0
 80083b4:	9b01      	ldr	r3, [sp, #4]
 80083b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80083ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80083be:	9301      	str	r3, [sp, #4]
 80083c0:	fa1f f38a 	uxth.w	r3, sl
 80083c4:	4619      	mov	r1, r3
 80083c6:	b283      	uxth	r3, r0
 80083c8:	1acb      	subs	r3, r1, r3
 80083ca:	0c00      	lsrs	r0, r0, #16
 80083cc:	4463      	add	r3, ip
 80083ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80083d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80083dc:	4576      	cmp	r6, lr
 80083de:	f849 3b04 	str.w	r3, [r9], #4
 80083e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083e6:	d8e5      	bhi.n	80083b4 <__mdiff+0x88>
 80083e8:	1b33      	subs	r3, r6, r4
 80083ea:	3b15      	subs	r3, #21
 80083ec:	f023 0303 	bic.w	r3, r3, #3
 80083f0:	3415      	adds	r4, #21
 80083f2:	3304      	adds	r3, #4
 80083f4:	42a6      	cmp	r6, r4
 80083f6:	bf38      	it	cc
 80083f8:	2304      	movcc	r3, #4
 80083fa:	441d      	add	r5, r3
 80083fc:	445b      	add	r3, fp
 80083fe:	461e      	mov	r6, r3
 8008400:	462c      	mov	r4, r5
 8008402:	4544      	cmp	r4, r8
 8008404:	d30e      	bcc.n	8008424 <__mdiff+0xf8>
 8008406:	f108 0103 	add.w	r1, r8, #3
 800840a:	1b49      	subs	r1, r1, r5
 800840c:	f021 0103 	bic.w	r1, r1, #3
 8008410:	3d03      	subs	r5, #3
 8008412:	45a8      	cmp	r8, r5
 8008414:	bf38      	it	cc
 8008416:	2100      	movcc	r1, #0
 8008418:	440b      	add	r3, r1
 800841a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800841e:	b191      	cbz	r1, 8008446 <__mdiff+0x11a>
 8008420:	6117      	str	r7, [r2, #16]
 8008422:	e79d      	b.n	8008360 <__mdiff+0x34>
 8008424:	f854 1b04 	ldr.w	r1, [r4], #4
 8008428:	46e6      	mov	lr, ip
 800842a:	0c08      	lsrs	r0, r1, #16
 800842c:	fa1c fc81 	uxtah	ip, ip, r1
 8008430:	4471      	add	r1, lr
 8008432:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008436:	b289      	uxth	r1, r1
 8008438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800843c:	f846 1b04 	str.w	r1, [r6], #4
 8008440:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008444:	e7dd      	b.n	8008402 <__mdiff+0xd6>
 8008446:	3f01      	subs	r7, #1
 8008448:	e7e7      	b.n	800841a <__mdiff+0xee>
 800844a:	bf00      	nop
 800844c:	080093b0 	.word	0x080093b0
 8008450:	080093c1 	.word	0x080093c1

08008454 <__d2b>:
 8008454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008458:	460f      	mov	r7, r1
 800845a:	2101      	movs	r1, #1
 800845c:	ec59 8b10 	vmov	r8, r9, d0
 8008460:	4616      	mov	r6, r2
 8008462:	f7ff fcd5 	bl	8007e10 <_Balloc>
 8008466:	4604      	mov	r4, r0
 8008468:	b930      	cbnz	r0, 8008478 <__d2b+0x24>
 800846a:	4602      	mov	r2, r0
 800846c:	4b23      	ldr	r3, [pc, #140]	@ (80084fc <__d2b+0xa8>)
 800846e:	4824      	ldr	r0, [pc, #144]	@ (8008500 <__d2b+0xac>)
 8008470:	f240 310f 	movw	r1, #783	@ 0x30f
 8008474:	f7fe fd54 	bl	8006f20 <__assert_func>
 8008478:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800847c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008480:	b10d      	cbz	r5, 8008486 <__d2b+0x32>
 8008482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008486:	9301      	str	r3, [sp, #4]
 8008488:	f1b8 0300 	subs.w	r3, r8, #0
 800848c:	d023      	beq.n	80084d6 <__d2b+0x82>
 800848e:	4668      	mov	r0, sp
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	f7ff fd84 	bl	8007f9e <__lo0bits>
 8008496:	e9dd 1200 	ldrd	r1, r2, [sp]
 800849a:	b1d0      	cbz	r0, 80084d2 <__d2b+0x7e>
 800849c:	f1c0 0320 	rsb	r3, r0, #32
 80084a0:	fa02 f303 	lsl.w	r3, r2, r3
 80084a4:	430b      	orrs	r3, r1
 80084a6:	40c2      	lsrs	r2, r0
 80084a8:	6163      	str	r3, [r4, #20]
 80084aa:	9201      	str	r2, [sp, #4]
 80084ac:	9b01      	ldr	r3, [sp, #4]
 80084ae:	61a3      	str	r3, [r4, #24]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	bf0c      	ite	eq
 80084b4:	2201      	moveq	r2, #1
 80084b6:	2202      	movne	r2, #2
 80084b8:	6122      	str	r2, [r4, #16]
 80084ba:	b1a5      	cbz	r5, 80084e6 <__d2b+0x92>
 80084bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80084c0:	4405      	add	r5, r0
 80084c2:	603d      	str	r5, [r7, #0]
 80084c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80084c8:	6030      	str	r0, [r6, #0]
 80084ca:	4620      	mov	r0, r4
 80084cc:	b003      	add	sp, #12
 80084ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084d2:	6161      	str	r1, [r4, #20]
 80084d4:	e7ea      	b.n	80084ac <__d2b+0x58>
 80084d6:	a801      	add	r0, sp, #4
 80084d8:	f7ff fd61 	bl	8007f9e <__lo0bits>
 80084dc:	9b01      	ldr	r3, [sp, #4]
 80084de:	6163      	str	r3, [r4, #20]
 80084e0:	3020      	adds	r0, #32
 80084e2:	2201      	movs	r2, #1
 80084e4:	e7e8      	b.n	80084b8 <__d2b+0x64>
 80084e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80084ee:	6038      	str	r0, [r7, #0]
 80084f0:	6918      	ldr	r0, [r3, #16]
 80084f2:	f7ff fd35 	bl	8007f60 <__hi0bits>
 80084f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084fa:	e7e5      	b.n	80084c8 <__d2b+0x74>
 80084fc:	080093b0 	.word	0x080093b0
 8008500:	080093c1 	.word	0x080093c1

08008504 <__ssputs_r>:
 8008504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008508:	688e      	ldr	r6, [r1, #8]
 800850a:	461f      	mov	r7, r3
 800850c:	42be      	cmp	r6, r7
 800850e:	680b      	ldr	r3, [r1, #0]
 8008510:	4682      	mov	sl, r0
 8008512:	460c      	mov	r4, r1
 8008514:	4690      	mov	r8, r2
 8008516:	d82d      	bhi.n	8008574 <__ssputs_r+0x70>
 8008518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800851c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008520:	d026      	beq.n	8008570 <__ssputs_r+0x6c>
 8008522:	6965      	ldr	r5, [r4, #20]
 8008524:	6909      	ldr	r1, [r1, #16]
 8008526:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800852a:	eba3 0901 	sub.w	r9, r3, r1
 800852e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008532:	1c7b      	adds	r3, r7, #1
 8008534:	444b      	add	r3, r9
 8008536:	106d      	asrs	r5, r5, #1
 8008538:	429d      	cmp	r5, r3
 800853a:	bf38      	it	cc
 800853c:	461d      	movcc	r5, r3
 800853e:	0553      	lsls	r3, r2, #21
 8008540:	d527      	bpl.n	8008592 <__ssputs_r+0x8e>
 8008542:	4629      	mov	r1, r5
 8008544:	f7ff fbd8 	bl	8007cf8 <_malloc_r>
 8008548:	4606      	mov	r6, r0
 800854a:	b360      	cbz	r0, 80085a6 <__ssputs_r+0xa2>
 800854c:	6921      	ldr	r1, [r4, #16]
 800854e:	464a      	mov	r2, r9
 8008550:	f000 fa18 	bl	8008984 <memcpy>
 8008554:	89a3      	ldrh	r3, [r4, #12]
 8008556:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800855a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800855e:	81a3      	strh	r3, [r4, #12]
 8008560:	6126      	str	r6, [r4, #16]
 8008562:	6165      	str	r5, [r4, #20]
 8008564:	444e      	add	r6, r9
 8008566:	eba5 0509 	sub.w	r5, r5, r9
 800856a:	6026      	str	r6, [r4, #0]
 800856c:	60a5      	str	r5, [r4, #8]
 800856e:	463e      	mov	r6, r7
 8008570:	42be      	cmp	r6, r7
 8008572:	d900      	bls.n	8008576 <__ssputs_r+0x72>
 8008574:	463e      	mov	r6, r7
 8008576:	6820      	ldr	r0, [r4, #0]
 8008578:	4632      	mov	r2, r6
 800857a:	4641      	mov	r1, r8
 800857c:	f000 f9d8 	bl	8008930 <memmove>
 8008580:	68a3      	ldr	r3, [r4, #8]
 8008582:	1b9b      	subs	r3, r3, r6
 8008584:	60a3      	str	r3, [r4, #8]
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	4433      	add	r3, r6
 800858a:	6023      	str	r3, [r4, #0]
 800858c:	2000      	movs	r0, #0
 800858e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008592:	462a      	mov	r2, r5
 8008594:	f000 fa31 	bl	80089fa <_realloc_r>
 8008598:	4606      	mov	r6, r0
 800859a:	2800      	cmp	r0, #0
 800859c:	d1e0      	bne.n	8008560 <__ssputs_r+0x5c>
 800859e:	6921      	ldr	r1, [r4, #16]
 80085a0:	4650      	mov	r0, sl
 80085a2:	f7ff fb35 	bl	8007c10 <_free_r>
 80085a6:	230c      	movs	r3, #12
 80085a8:	f8ca 3000 	str.w	r3, [sl]
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085b2:	81a3      	strh	r3, [r4, #12]
 80085b4:	f04f 30ff 	mov.w	r0, #4294967295
 80085b8:	e7e9      	b.n	800858e <__ssputs_r+0x8a>
	...

080085bc <_svfiprintf_r>:
 80085bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	4698      	mov	r8, r3
 80085c2:	898b      	ldrh	r3, [r1, #12]
 80085c4:	061b      	lsls	r3, r3, #24
 80085c6:	b09d      	sub	sp, #116	@ 0x74
 80085c8:	4607      	mov	r7, r0
 80085ca:	460d      	mov	r5, r1
 80085cc:	4614      	mov	r4, r2
 80085ce:	d510      	bpl.n	80085f2 <_svfiprintf_r+0x36>
 80085d0:	690b      	ldr	r3, [r1, #16]
 80085d2:	b973      	cbnz	r3, 80085f2 <_svfiprintf_r+0x36>
 80085d4:	2140      	movs	r1, #64	@ 0x40
 80085d6:	f7ff fb8f 	bl	8007cf8 <_malloc_r>
 80085da:	6028      	str	r0, [r5, #0]
 80085dc:	6128      	str	r0, [r5, #16]
 80085de:	b930      	cbnz	r0, 80085ee <_svfiprintf_r+0x32>
 80085e0:	230c      	movs	r3, #12
 80085e2:	603b      	str	r3, [r7, #0]
 80085e4:	f04f 30ff 	mov.w	r0, #4294967295
 80085e8:	b01d      	add	sp, #116	@ 0x74
 80085ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ee:	2340      	movs	r3, #64	@ 0x40
 80085f0:	616b      	str	r3, [r5, #20]
 80085f2:	2300      	movs	r3, #0
 80085f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085f6:	2320      	movs	r3, #32
 80085f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008600:	2330      	movs	r3, #48	@ 0x30
 8008602:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80087a0 <_svfiprintf_r+0x1e4>
 8008606:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800860a:	f04f 0901 	mov.w	r9, #1
 800860e:	4623      	mov	r3, r4
 8008610:	469a      	mov	sl, r3
 8008612:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008616:	b10a      	cbz	r2, 800861c <_svfiprintf_r+0x60>
 8008618:	2a25      	cmp	r2, #37	@ 0x25
 800861a:	d1f9      	bne.n	8008610 <_svfiprintf_r+0x54>
 800861c:	ebba 0b04 	subs.w	fp, sl, r4
 8008620:	d00b      	beq.n	800863a <_svfiprintf_r+0x7e>
 8008622:	465b      	mov	r3, fp
 8008624:	4622      	mov	r2, r4
 8008626:	4629      	mov	r1, r5
 8008628:	4638      	mov	r0, r7
 800862a:	f7ff ff6b 	bl	8008504 <__ssputs_r>
 800862e:	3001      	adds	r0, #1
 8008630:	f000 80a7 	beq.w	8008782 <_svfiprintf_r+0x1c6>
 8008634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008636:	445a      	add	r2, fp
 8008638:	9209      	str	r2, [sp, #36]	@ 0x24
 800863a:	f89a 3000 	ldrb.w	r3, [sl]
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 809f 	beq.w	8008782 <_svfiprintf_r+0x1c6>
 8008644:	2300      	movs	r3, #0
 8008646:	f04f 32ff 	mov.w	r2, #4294967295
 800864a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800864e:	f10a 0a01 	add.w	sl, sl, #1
 8008652:	9304      	str	r3, [sp, #16]
 8008654:	9307      	str	r3, [sp, #28]
 8008656:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800865a:	931a      	str	r3, [sp, #104]	@ 0x68
 800865c:	4654      	mov	r4, sl
 800865e:	2205      	movs	r2, #5
 8008660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008664:	484e      	ldr	r0, [pc, #312]	@ (80087a0 <_svfiprintf_r+0x1e4>)
 8008666:	f7f7 fdd3 	bl	8000210 <memchr>
 800866a:	9a04      	ldr	r2, [sp, #16]
 800866c:	b9d8      	cbnz	r0, 80086a6 <_svfiprintf_r+0xea>
 800866e:	06d0      	lsls	r0, r2, #27
 8008670:	bf44      	itt	mi
 8008672:	2320      	movmi	r3, #32
 8008674:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008678:	0711      	lsls	r1, r2, #28
 800867a:	bf44      	itt	mi
 800867c:	232b      	movmi	r3, #43	@ 0x2b
 800867e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008682:	f89a 3000 	ldrb.w	r3, [sl]
 8008686:	2b2a      	cmp	r3, #42	@ 0x2a
 8008688:	d015      	beq.n	80086b6 <_svfiprintf_r+0xfa>
 800868a:	9a07      	ldr	r2, [sp, #28]
 800868c:	4654      	mov	r4, sl
 800868e:	2000      	movs	r0, #0
 8008690:	f04f 0c0a 	mov.w	ip, #10
 8008694:	4621      	mov	r1, r4
 8008696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800869a:	3b30      	subs	r3, #48	@ 0x30
 800869c:	2b09      	cmp	r3, #9
 800869e:	d94b      	bls.n	8008738 <_svfiprintf_r+0x17c>
 80086a0:	b1b0      	cbz	r0, 80086d0 <_svfiprintf_r+0x114>
 80086a2:	9207      	str	r2, [sp, #28]
 80086a4:	e014      	b.n	80086d0 <_svfiprintf_r+0x114>
 80086a6:	eba0 0308 	sub.w	r3, r0, r8
 80086aa:	fa09 f303 	lsl.w	r3, r9, r3
 80086ae:	4313      	orrs	r3, r2
 80086b0:	9304      	str	r3, [sp, #16]
 80086b2:	46a2      	mov	sl, r4
 80086b4:	e7d2      	b.n	800865c <_svfiprintf_r+0xa0>
 80086b6:	9b03      	ldr	r3, [sp, #12]
 80086b8:	1d19      	adds	r1, r3, #4
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	9103      	str	r1, [sp, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	bfbb      	ittet	lt
 80086c2:	425b      	neglt	r3, r3
 80086c4:	f042 0202 	orrlt.w	r2, r2, #2
 80086c8:	9307      	strge	r3, [sp, #28]
 80086ca:	9307      	strlt	r3, [sp, #28]
 80086cc:	bfb8      	it	lt
 80086ce:	9204      	strlt	r2, [sp, #16]
 80086d0:	7823      	ldrb	r3, [r4, #0]
 80086d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80086d4:	d10a      	bne.n	80086ec <_svfiprintf_r+0x130>
 80086d6:	7863      	ldrb	r3, [r4, #1]
 80086d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80086da:	d132      	bne.n	8008742 <_svfiprintf_r+0x186>
 80086dc:	9b03      	ldr	r3, [sp, #12]
 80086de:	1d1a      	adds	r2, r3, #4
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	9203      	str	r2, [sp, #12]
 80086e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086e8:	3402      	adds	r4, #2
 80086ea:	9305      	str	r3, [sp, #20]
 80086ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80087b0 <_svfiprintf_r+0x1f4>
 80086f0:	7821      	ldrb	r1, [r4, #0]
 80086f2:	2203      	movs	r2, #3
 80086f4:	4650      	mov	r0, sl
 80086f6:	f7f7 fd8b 	bl	8000210 <memchr>
 80086fa:	b138      	cbz	r0, 800870c <_svfiprintf_r+0x150>
 80086fc:	9b04      	ldr	r3, [sp, #16]
 80086fe:	eba0 000a 	sub.w	r0, r0, sl
 8008702:	2240      	movs	r2, #64	@ 0x40
 8008704:	4082      	lsls	r2, r0
 8008706:	4313      	orrs	r3, r2
 8008708:	3401      	adds	r4, #1
 800870a:	9304      	str	r3, [sp, #16]
 800870c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008710:	4824      	ldr	r0, [pc, #144]	@ (80087a4 <_svfiprintf_r+0x1e8>)
 8008712:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008716:	2206      	movs	r2, #6
 8008718:	f7f7 fd7a 	bl	8000210 <memchr>
 800871c:	2800      	cmp	r0, #0
 800871e:	d036      	beq.n	800878e <_svfiprintf_r+0x1d2>
 8008720:	4b21      	ldr	r3, [pc, #132]	@ (80087a8 <_svfiprintf_r+0x1ec>)
 8008722:	bb1b      	cbnz	r3, 800876c <_svfiprintf_r+0x1b0>
 8008724:	9b03      	ldr	r3, [sp, #12]
 8008726:	3307      	adds	r3, #7
 8008728:	f023 0307 	bic.w	r3, r3, #7
 800872c:	3308      	adds	r3, #8
 800872e:	9303      	str	r3, [sp, #12]
 8008730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008732:	4433      	add	r3, r6
 8008734:	9309      	str	r3, [sp, #36]	@ 0x24
 8008736:	e76a      	b.n	800860e <_svfiprintf_r+0x52>
 8008738:	fb0c 3202 	mla	r2, ip, r2, r3
 800873c:	460c      	mov	r4, r1
 800873e:	2001      	movs	r0, #1
 8008740:	e7a8      	b.n	8008694 <_svfiprintf_r+0xd8>
 8008742:	2300      	movs	r3, #0
 8008744:	3401      	adds	r4, #1
 8008746:	9305      	str	r3, [sp, #20]
 8008748:	4619      	mov	r1, r3
 800874a:	f04f 0c0a 	mov.w	ip, #10
 800874e:	4620      	mov	r0, r4
 8008750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008754:	3a30      	subs	r2, #48	@ 0x30
 8008756:	2a09      	cmp	r2, #9
 8008758:	d903      	bls.n	8008762 <_svfiprintf_r+0x1a6>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0c6      	beq.n	80086ec <_svfiprintf_r+0x130>
 800875e:	9105      	str	r1, [sp, #20]
 8008760:	e7c4      	b.n	80086ec <_svfiprintf_r+0x130>
 8008762:	fb0c 2101 	mla	r1, ip, r1, r2
 8008766:	4604      	mov	r4, r0
 8008768:	2301      	movs	r3, #1
 800876a:	e7f0      	b.n	800874e <_svfiprintf_r+0x192>
 800876c:	ab03      	add	r3, sp, #12
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	462a      	mov	r2, r5
 8008772:	4b0e      	ldr	r3, [pc, #56]	@ (80087ac <_svfiprintf_r+0x1f0>)
 8008774:	a904      	add	r1, sp, #16
 8008776:	4638      	mov	r0, r7
 8008778:	f7fd fe60 	bl	800643c <_printf_float>
 800877c:	1c42      	adds	r2, r0, #1
 800877e:	4606      	mov	r6, r0
 8008780:	d1d6      	bne.n	8008730 <_svfiprintf_r+0x174>
 8008782:	89ab      	ldrh	r3, [r5, #12]
 8008784:	065b      	lsls	r3, r3, #25
 8008786:	f53f af2d 	bmi.w	80085e4 <_svfiprintf_r+0x28>
 800878a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800878c:	e72c      	b.n	80085e8 <_svfiprintf_r+0x2c>
 800878e:	ab03      	add	r3, sp, #12
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	462a      	mov	r2, r5
 8008794:	4b05      	ldr	r3, [pc, #20]	@ (80087ac <_svfiprintf_r+0x1f0>)
 8008796:	a904      	add	r1, sp, #16
 8008798:	4638      	mov	r0, r7
 800879a:	f7fe f8e7 	bl	800696c <_printf_i>
 800879e:	e7ed      	b.n	800877c <_svfiprintf_r+0x1c0>
 80087a0:	0800941a 	.word	0x0800941a
 80087a4:	08009424 	.word	0x08009424
 80087a8:	0800643d 	.word	0x0800643d
 80087ac:	08008505 	.word	0x08008505
 80087b0:	08009420 	.word	0x08009420

080087b4 <__sflush_r>:
 80087b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087bc:	0716      	lsls	r6, r2, #28
 80087be:	4605      	mov	r5, r0
 80087c0:	460c      	mov	r4, r1
 80087c2:	d454      	bmi.n	800886e <__sflush_r+0xba>
 80087c4:	684b      	ldr	r3, [r1, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	dc02      	bgt.n	80087d0 <__sflush_r+0x1c>
 80087ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dd48      	ble.n	8008862 <__sflush_r+0xae>
 80087d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087d2:	2e00      	cmp	r6, #0
 80087d4:	d045      	beq.n	8008862 <__sflush_r+0xae>
 80087d6:	2300      	movs	r3, #0
 80087d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087dc:	682f      	ldr	r7, [r5, #0]
 80087de:	6a21      	ldr	r1, [r4, #32]
 80087e0:	602b      	str	r3, [r5, #0]
 80087e2:	d030      	beq.n	8008846 <__sflush_r+0x92>
 80087e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	0759      	lsls	r1, r3, #29
 80087ea:	d505      	bpl.n	80087f8 <__sflush_r+0x44>
 80087ec:	6863      	ldr	r3, [r4, #4]
 80087ee:	1ad2      	subs	r2, r2, r3
 80087f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087f2:	b10b      	cbz	r3, 80087f8 <__sflush_r+0x44>
 80087f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087f6:	1ad2      	subs	r2, r2, r3
 80087f8:	2300      	movs	r3, #0
 80087fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087fc:	6a21      	ldr	r1, [r4, #32]
 80087fe:	4628      	mov	r0, r5
 8008800:	47b0      	blx	r6
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	d106      	bne.n	8008816 <__sflush_r+0x62>
 8008808:	6829      	ldr	r1, [r5, #0]
 800880a:	291d      	cmp	r1, #29
 800880c:	d82b      	bhi.n	8008866 <__sflush_r+0xb2>
 800880e:	4a2a      	ldr	r2, [pc, #168]	@ (80088b8 <__sflush_r+0x104>)
 8008810:	40ca      	lsrs	r2, r1
 8008812:	07d6      	lsls	r6, r2, #31
 8008814:	d527      	bpl.n	8008866 <__sflush_r+0xb2>
 8008816:	2200      	movs	r2, #0
 8008818:	6062      	str	r2, [r4, #4]
 800881a:	04d9      	lsls	r1, r3, #19
 800881c:	6922      	ldr	r2, [r4, #16]
 800881e:	6022      	str	r2, [r4, #0]
 8008820:	d504      	bpl.n	800882c <__sflush_r+0x78>
 8008822:	1c42      	adds	r2, r0, #1
 8008824:	d101      	bne.n	800882a <__sflush_r+0x76>
 8008826:	682b      	ldr	r3, [r5, #0]
 8008828:	b903      	cbnz	r3, 800882c <__sflush_r+0x78>
 800882a:	6560      	str	r0, [r4, #84]	@ 0x54
 800882c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800882e:	602f      	str	r7, [r5, #0]
 8008830:	b1b9      	cbz	r1, 8008862 <__sflush_r+0xae>
 8008832:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008836:	4299      	cmp	r1, r3
 8008838:	d002      	beq.n	8008840 <__sflush_r+0x8c>
 800883a:	4628      	mov	r0, r5
 800883c:	f7ff f9e8 	bl	8007c10 <_free_r>
 8008840:	2300      	movs	r3, #0
 8008842:	6363      	str	r3, [r4, #52]	@ 0x34
 8008844:	e00d      	b.n	8008862 <__sflush_r+0xae>
 8008846:	2301      	movs	r3, #1
 8008848:	4628      	mov	r0, r5
 800884a:	47b0      	blx	r6
 800884c:	4602      	mov	r2, r0
 800884e:	1c50      	adds	r0, r2, #1
 8008850:	d1c9      	bne.n	80087e6 <__sflush_r+0x32>
 8008852:	682b      	ldr	r3, [r5, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d0c6      	beq.n	80087e6 <__sflush_r+0x32>
 8008858:	2b1d      	cmp	r3, #29
 800885a:	d001      	beq.n	8008860 <__sflush_r+0xac>
 800885c:	2b16      	cmp	r3, #22
 800885e:	d11e      	bne.n	800889e <__sflush_r+0xea>
 8008860:	602f      	str	r7, [r5, #0]
 8008862:	2000      	movs	r0, #0
 8008864:	e022      	b.n	80088ac <__sflush_r+0xf8>
 8008866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800886a:	b21b      	sxth	r3, r3
 800886c:	e01b      	b.n	80088a6 <__sflush_r+0xf2>
 800886e:	690f      	ldr	r7, [r1, #16]
 8008870:	2f00      	cmp	r7, #0
 8008872:	d0f6      	beq.n	8008862 <__sflush_r+0xae>
 8008874:	0793      	lsls	r3, r2, #30
 8008876:	680e      	ldr	r6, [r1, #0]
 8008878:	bf08      	it	eq
 800887a:	694b      	ldreq	r3, [r1, #20]
 800887c:	600f      	str	r7, [r1, #0]
 800887e:	bf18      	it	ne
 8008880:	2300      	movne	r3, #0
 8008882:	eba6 0807 	sub.w	r8, r6, r7
 8008886:	608b      	str	r3, [r1, #8]
 8008888:	f1b8 0f00 	cmp.w	r8, #0
 800888c:	dde9      	ble.n	8008862 <__sflush_r+0xae>
 800888e:	6a21      	ldr	r1, [r4, #32]
 8008890:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008892:	4643      	mov	r3, r8
 8008894:	463a      	mov	r2, r7
 8008896:	4628      	mov	r0, r5
 8008898:	47b0      	blx	r6
 800889a:	2800      	cmp	r0, #0
 800889c:	dc08      	bgt.n	80088b0 <__sflush_r+0xfc>
 800889e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088a6:	81a3      	strh	r3, [r4, #12]
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088b0:	4407      	add	r7, r0
 80088b2:	eba8 0800 	sub.w	r8, r8, r0
 80088b6:	e7e7      	b.n	8008888 <__sflush_r+0xd4>
 80088b8:	20400001 	.word	0x20400001

080088bc <_fflush_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	690b      	ldr	r3, [r1, #16]
 80088c0:	4605      	mov	r5, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	b913      	cbnz	r3, 80088cc <_fflush_r+0x10>
 80088c6:	2500      	movs	r5, #0
 80088c8:	4628      	mov	r0, r5
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	b118      	cbz	r0, 80088d6 <_fflush_r+0x1a>
 80088ce:	6a03      	ldr	r3, [r0, #32]
 80088d0:	b90b      	cbnz	r3, 80088d6 <_fflush_r+0x1a>
 80088d2:	f7fe f9f5 	bl	8006cc0 <__sinit>
 80088d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0f3      	beq.n	80088c6 <_fflush_r+0xa>
 80088de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088e0:	07d0      	lsls	r0, r2, #31
 80088e2:	d404      	bmi.n	80088ee <_fflush_r+0x32>
 80088e4:	0599      	lsls	r1, r3, #22
 80088e6:	d402      	bmi.n	80088ee <_fflush_r+0x32>
 80088e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088ea:	f7fe fb16 	bl	8006f1a <__retarget_lock_acquire_recursive>
 80088ee:	4628      	mov	r0, r5
 80088f0:	4621      	mov	r1, r4
 80088f2:	f7ff ff5f 	bl	80087b4 <__sflush_r>
 80088f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088f8:	07da      	lsls	r2, r3, #31
 80088fa:	4605      	mov	r5, r0
 80088fc:	d4e4      	bmi.n	80088c8 <_fflush_r+0xc>
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	059b      	lsls	r3, r3, #22
 8008902:	d4e1      	bmi.n	80088c8 <_fflush_r+0xc>
 8008904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008906:	f7fe fb09 	bl	8006f1c <__retarget_lock_release_recursive>
 800890a:	e7dd      	b.n	80088c8 <_fflush_r+0xc>

0800890c <fiprintf>:
 800890c:	b40e      	push	{r1, r2, r3}
 800890e:	b503      	push	{r0, r1, lr}
 8008910:	4601      	mov	r1, r0
 8008912:	ab03      	add	r3, sp, #12
 8008914:	4805      	ldr	r0, [pc, #20]	@ (800892c <fiprintf+0x20>)
 8008916:	f853 2b04 	ldr.w	r2, [r3], #4
 800891a:	6800      	ldr	r0, [r0, #0]
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	f000 f8d1 	bl	8008ac4 <_vfiprintf_r>
 8008922:	b002      	add	sp, #8
 8008924:	f85d eb04 	ldr.w	lr, [sp], #4
 8008928:	b003      	add	sp, #12
 800892a:	4770      	bx	lr
 800892c:	20000048 	.word	0x20000048

08008930 <memmove>:
 8008930:	4288      	cmp	r0, r1
 8008932:	b510      	push	{r4, lr}
 8008934:	eb01 0402 	add.w	r4, r1, r2
 8008938:	d902      	bls.n	8008940 <memmove+0x10>
 800893a:	4284      	cmp	r4, r0
 800893c:	4623      	mov	r3, r4
 800893e:	d807      	bhi.n	8008950 <memmove+0x20>
 8008940:	1e43      	subs	r3, r0, #1
 8008942:	42a1      	cmp	r1, r4
 8008944:	d008      	beq.n	8008958 <memmove+0x28>
 8008946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800894a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800894e:	e7f8      	b.n	8008942 <memmove+0x12>
 8008950:	4402      	add	r2, r0
 8008952:	4601      	mov	r1, r0
 8008954:	428a      	cmp	r2, r1
 8008956:	d100      	bne.n	800895a <memmove+0x2a>
 8008958:	bd10      	pop	{r4, pc}
 800895a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800895e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008962:	e7f7      	b.n	8008954 <memmove+0x24>

08008964 <_sbrk_r>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	4d06      	ldr	r5, [pc, #24]	@ (8008980 <_sbrk_r+0x1c>)
 8008968:	2300      	movs	r3, #0
 800896a:	4604      	mov	r4, r0
 800896c:	4608      	mov	r0, r1
 800896e:	602b      	str	r3, [r5, #0]
 8008970:	f7f9 fc26 	bl	80021c0 <_sbrk>
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	d102      	bne.n	800897e <_sbrk_r+0x1a>
 8008978:	682b      	ldr	r3, [r5, #0]
 800897a:	b103      	cbz	r3, 800897e <_sbrk_r+0x1a>
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	200006b8 	.word	0x200006b8

08008984 <memcpy>:
 8008984:	440a      	add	r2, r1
 8008986:	4291      	cmp	r1, r2
 8008988:	f100 33ff 	add.w	r3, r0, #4294967295
 800898c:	d100      	bne.n	8008990 <memcpy+0xc>
 800898e:	4770      	bx	lr
 8008990:	b510      	push	{r4, lr}
 8008992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800899a:	4291      	cmp	r1, r2
 800899c:	d1f9      	bne.n	8008992 <memcpy+0xe>
 800899e:	bd10      	pop	{r4, pc}

080089a0 <abort>:
 80089a0:	b508      	push	{r3, lr}
 80089a2:	2006      	movs	r0, #6
 80089a4:	f000 fa62 	bl	8008e6c <raise>
 80089a8:	2001      	movs	r0, #1
 80089aa:	f7f9 fb91 	bl	80020d0 <_exit>

080089ae <_calloc_r>:
 80089ae:	b570      	push	{r4, r5, r6, lr}
 80089b0:	fba1 5402 	umull	r5, r4, r1, r2
 80089b4:	b934      	cbnz	r4, 80089c4 <_calloc_r+0x16>
 80089b6:	4629      	mov	r1, r5
 80089b8:	f7ff f99e 	bl	8007cf8 <_malloc_r>
 80089bc:	4606      	mov	r6, r0
 80089be:	b928      	cbnz	r0, 80089cc <_calloc_r+0x1e>
 80089c0:	4630      	mov	r0, r6
 80089c2:	bd70      	pop	{r4, r5, r6, pc}
 80089c4:	220c      	movs	r2, #12
 80089c6:	6002      	str	r2, [r0, #0]
 80089c8:	2600      	movs	r6, #0
 80089ca:	e7f9      	b.n	80089c0 <_calloc_r+0x12>
 80089cc:	462a      	mov	r2, r5
 80089ce:	4621      	mov	r1, r4
 80089d0:	f7fe fa25 	bl	8006e1e <memset>
 80089d4:	e7f4      	b.n	80089c0 <_calloc_r+0x12>

080089d6 <__ascii_mbtowc>:
 80089d6:	b082      	sub	sp, #8
 80089d8:	b901      	cbnz	r1, 80089dc <__ascii_mbtowc+0x6>
 80089da:	a901      	add	r1, sp, #4
 80089dc:	b142      	cbz	r2, 80089f0 <__ascii_mbtowc+0x1a>
 80089de:	b14b      	cbz	r3, 80089f4 <__ascii_mbtowc+0x1e>
 80089e0:	7813      	ldrb	r3, [r2, #0]
 80089e2:	600b      	str	r3, [r1, #0]
 80089e4:	7812      	ldrb	r2, [r2, #0]
 80089e6:	1e10      	subs	r0, r2, #0
 80089e8:	bf18      	it	ne
 80089ea:	2001      	movne	r0, #1
 80089ec:	b002      	add	sp, #8
 80089ee:	4770      	bx	lr
 80089f0:	4610      	mov	r0, r2
 80089f2:	e7fb      	b.n	80089ec <__ascii_mbtowc+0x16>
 80089f4:	f06f 0001 	mvn.w	r0, #1
 80089f8:	e7f8      	b.n	80089ec <__ascii_mbtowc+0x16>

080089fa <_realloc_r>:
 80089fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089fe:	4607      	mov	r7, r0
 8008a00:	4614      	mov	r4, r2
 8008a02:	460d      	mov	r5, r1
 8008a04:	b921      	cbnz	r1, 8008a10 <_realloc_r+0x16>
 8008a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	f7ff b974 	b.w	8007cf8 <_malloc_r>
 8008a10:	b92a      	cbnz	r2, 8008a1e <_realloc_r+0x24>
 8008a12:	f7ff f8fd 	bl	8007c10 <_free_r>
 8008a16:	4625      	mov	r5, r4
 8008a18:	4628      	mov	r0, r5
 8008a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a1e:	f000 fa41 	bl	8008ea4 <_malloc_usable_size_r>
 8008a22:	4284      	cmp	r4, r0
 8008a24:	4606      	mov	r6, r0
 8008a26:	d802      	bhi.n	8008a2e <_realloc_r+0x34>
 8008a28:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a2c:	d8f4      	bhi.n	8008a18 <_realloc_r+0x1e>
 8008a2e:	4621      	mov	r1, r4
 8008a30:	4638      	mov	r0, r7
 8008a32:	f7ff f961 	bl	8007cf8 <_malloc_r>
 8008a36:	4680      	mov	r8, r0
 8008a38:	b908      	cbnz	r0, 8008a3e <_realloc_r+0x44>
 8008a3a:	4645      	mov	r5, r8
 8008a3c:	e7ec      	b.n	8008a18 <_realloc_r+0x1e>
 8008a3e:	42b4      	cmp	r4, r6
 8008a40:	4622      	mov	r2, r4
 8008a42:	4629      	mov	r1, r5
 8008a44:	bf28      	it	cs
 8008a46:	4632      	movcs	r2, r6
 8008a48:	f7ff ff9c 	bl	8008984 <memcpy>
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	4638      	mov	r0, r7
 8008a50:	f7ff f8de 	bl	8007c10 <_free_r>
 8008a54:	e7f1      	b.n	8008a3a <_realloc_r+0x40>

08008a56 <__ascii_wctomb>:
 8008a56:	4603      	mov	r3, r0
 8008a58:	4608      	mov	r0, r1
 8008a5a:	b141      	cbz	r1, 8008a6e <__ascii_wctomb+0x18>
 8008a5c:	2aff      	cmp	r2, #255	@ 0xff
 8008a5e:	d904      	bls.n	8008a6a <__ascii_wctomb+0x14>
 8008a60:	228a      	movs	r2, #138	@ 0x8a
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	f04f 30ff 	mov.w	r0, #4294967295
 8008a68:	4770      	bx	lr
 8008a6a:	700a      	strb	r2, [r1, #0]
 8008a6c:	2001      	movs	r0, #1
 8008a6e:	4770      	bx	lr

08008a70 <__sfputc_r>:
 8008a70:	6893      	ldr	r3, [r2, #8]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	b410      	push	{r4}
 8008a78:	6093      	str	r3, [r2, #8]
 8008a7a:	da08      	bge.n	8008a8e <__sfputc_r+0x1e>
 8008a7c:	6994      	ldr	r4, [r2, #24]
 8008a7e:	42a3      	cmp	r3, r4
 8008a80:	db01      	blt.n	8008a86 <__sfputc_r+0x16>
 8008a82:	290a      	cmp	r1, #10
 8008a84:	d103      	bne.n	8008a8e <__sfputc_r+0x1e>
 8008a86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a8a:	f000 b933 	b.w	8008cf4 <__swbuf_r>
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	1c58      	adds	r0, r3, #1
 8008a92:	6010      	str	r0, [r2, #0]
 8008a94:	7019      	strb	r1, [r3, #0]
 8008a96:	4608      	mov	r0, r1
 8008a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <__sfputs_r>:
 8008a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa0:	4606      	mov	r6, r0
 8008aa2:	460f      	mov	r7, r1
 8008aa4:	4614      	mov	r4, r2
 8008aa6:	18d5      	adds	r5, r2, r3
 8008aa8:	42ac      	cmp	r4, r5
 8008aaa:	d101      	bne.n	8008ab0 <__sfputs_r+0x12>
 8008aac:	2000      	movs	r0, #0
 8008aae:	e007      	b.n	8008ac0 <__sfputs_r+0x22>
 8008ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab4:	463a      	mov	r2, r7
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f7ff ffda 	bl	8008a70 <__sfputc_r>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d1f3      	bne.n	8008aa8 <__sfputs_r+0xa>
 8008ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ac4 <_vfiprintf_r>:
 8008ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac8:	460d      	mov	r5, r1
 8008aca:	b09d      	sub	sp, #116	@ 0x74
 8008acc:	4614      	mov	r4, r2
 8008ace:	4698      	mov	r8, r3
 8008ad0:	4606      	mov	r6, r0
 8008ad2:	b118      	cbz	r0, 8008adc <_vfiprintf_r+0x18>
 8008ad4:	6a03      	ldr	r3, [r0, #32]
 8008ad6:	b90b      	cbnz	r3, 8008adc <_vfiprintf_r+0x18>
 8008ad8:	f7fe f8f2 	bl	8006cc0 <__sinit>
 8008adc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ade:	07d9      	lsls	r1, r3, #31
 8008ae0:	d405      	bmi.n	8008aee <_vfiprintf_r+0x2a>
 8008ae2:	89ab      	ldrh	r3, [r5, #12]
 8008ae4:	059a      	lsls	r2, r3, #22
 8008ae6:	d402      	bmi.n	8008aee <_vfiprintf_r+0x2a>
 8008ae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aea:	f7fe fa16 	bl	8006f1a <__retarget_lock_acquire_recursive>
 8008aee:	89ab      	ldrh	r3, [r5, #12]
 8008af0:	071b      	lsls	r3, r3, #28
 8008af2:	d501      	bpl.n	8008af8 <_vfiprintf_r+0x34>
 8008af4:	692b      	ldr	r3, [r5, #16]
 8008af6:	b99b      	cbnz	r3, 8008b20 <_vfiprintf_r+0x5c>
 8008af8:	4629      	mov	r1, r5
 8008afa:	4630      	mov	r0, r6
 8008afc:	f000 f938 	bl	8008d70 <__swsetup_r>
 8008b00:	b170      	cbz	r0, 8008b20 <_vfiprintf_r+0x5c>
 8008b02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b04:	07dc      	lsls	r4, r3, #31
 8008b06:	d504      	bpl.n	8008b12 <_vfiprintf_r+0x4e>
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0c:	b01d      	add	sp, #116	@ 0x74
 8008b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b12:	89ab      	ldrh	r3, [r5, #12]
 8008b14:	0598      	lsls	r0, r3, #22
 8008b16:	d4f7      	bmi.n	8008b08 <_vfiprintf_r+0x44>
 8008b18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b1a:	f7fe f9ff 	bl	8006f1c <__retarget_lock_release_recursive>
 8008b1e:	e7f3      	b.n	8008b08 <_vfiprintf_r+0x44>
 8008b20:	2300      	movs	r3, #0
 8008b22:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b24:	2320      	movs	r3, #32
 8008b26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b2e:	2330      	movs	r3, #48	@ 0x30
 8008b30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ce0 <_vfiprintf_r+0x21c>
 8008b34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b38:	f04f 0901 	mov.w	r9, #1
 8008b3c:	4623      	mov	r3, r4
 8008b3e:	469a      	mov	sl, r3
 8008b40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b44:	b10a      	cbz	r2, 8008b4a <_vfiprintf_r+0x86>
 8008b46:	2a25      	cmp	r2, #37	@ 0x25
 8008b48:	d1f9      	bne.n	8008b3e <_vfiprintf_r+0x7a>
 8008b4a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b4e:	d00b      	beq.n	8008b68 <_vfiprintf_r+0xa4>
 8008b50:	465b      	mov	r3, fp
 8008b52:	4622      	mov	r2, r4
 8008b54:	4629      	mov	r1, r5
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7ff ffa1 	bl	8008a9e <__sfputs_r>
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	f000 80a7 	beq.w	8008cb0 <_vfiprintf_r+0x1ec>
 8008b62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b64:	445a      	add	r2, fp
 8008b66:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b68:	f89a 3000 	ldrb.w	r3, [sl]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 809f 	beq.w	8008cb0 <_vfiprintf_r+0x1ec>
 8008b72:	2300      	movs	r3, #0
 8008b74:	f04f 32ff 	mov.w	r2, #4294967295
 8008b78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b7c:	f10a 0a01 	add.w	sl, sl, #1
 8008b80:	9304      	str	r3, [sp, #16]
 8008b82:	9307      	str	r3, [sp, #28]
 8008b84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b88:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b8a:	4654      	mov	r4, sl
 8008b8c:	2205      	movs	r2, #5
 8008b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b92:	4853      	ldr	r0, [pc, #332]	@ (8008ce0 <_vfiprintf_r+0x21c>)
 8008b94:	f7f7 fb3c 	bl	8000210 <memchr>
 8008b98:	9a04      	ldr	r2, [sp, #16]
 8008b9a:	b9d8      	cbnz	r0, 8008bd4 <_vfiprintf_r+0x110>
 8008b9c:	06d1      	lsls	r1, r2, #27
 8008b9e:	bf44      	itt	mi
 8008ba0:	2320      	movmi	r3, #32
 8008ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ba6:	0713      	lsls	r3, r2, #28
 8008ba8:	bf44      	itt	mi
 8008baa:	232b      	movmi	r3, #43	@ 0x2b
 8008bac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bb6:	d015      	beq.n	8008be4 <_vfiprintf_r+0x120>
 8008bb8:	9a07      	ldr	r2, [sp, #28]
 8008bba:	4654      	mov	r4, sl
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	f04f 0c0a 	mov.w	ip, #10
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bc8:	3b30      	subs	r3, #48	@ 0x30
 8008bca:	2b09      	cmp	r3, #9
 8008bcc:	d94b      	bls.n	8008c66 <_vfiprintf_r+0x1a2>
 8008bce:	b1b0      	cbz	r0, 8008bfe <_vfiprintf_r+0x13a>
 8008bd0:	9207      	str	r2, [sp, #28]
 8008bd2:	e014      	b.n	8008bfe <_vfiprintf_r+0x13a>
 8008bd4:	eba0 0308 	sub.w	r3, r0, r8
 8008bd8:	fa09 f303 	lsl.w	r3, r9, r3
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	9304      	str	r3, [sp, #16]
 8008be0:	46a2      	mov	sl, r4
 8008be2:	e7d2      	b.n	8008b8a <_vfiprintf_r+0xc6>
 8008be4:	9b03      	ldr	r3, [sp, #12]
 8008be6:	1d19      	adds	r1, r3, #4
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	9103      	str	r1, [sp, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	bfbb      	ittet	lt
 8008bf0:	425b      	neglt	r3, r3
 8008bf2:	f042 0202 	orrlt.w	r2, r2, #2
 8008bf6:	9307      	strge	r3, [sp, #28]
 8008bf8:	9307      	strlt	r3, [sp, #28]
 8008bfa:	bfb8      	it	lt
 8008bfc:	9204      	strlt	r2, [sp, #16]
 8008bfe:	7823      	ldrb	r3, [r4, #0]
 8008c00:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c02:	d10a      	bne.n	8008c1a <_vfiprintf_r+0x156>
 8008c04:	7863      	ldrb	r3, [r4, #1]
 8008c06:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c08:	d132      	bne.n	8008c70 <_vfiprintf_r+0x1ac>
 8008c0a:	9b03      	ldr	r3, [sp, #12]
 8008c0c:	1d1a      	adds	r2, r3, #4
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	9203      	str	r2, [sp, #12]
 8008c12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c16:	3402      	adds	r4, #2
 8008c18:	9305      	str	r3, [sp, #20]
 8008c1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008cf0 <_vfiprintf_r+0x22c>
 8008c1e:	7821      	ldrb	r1, [r4, #0]
 8008c20:	2203      	movs	r2, #3
 8008c22:	4650      	mov	r0, sl
 8008c24:	f7f7 faf4 	bl	8000210 <memchr>
 8008c28:	b138      	cbz	r0, 8008c3a <_vfiprintf_r+0x176>
 8008c2a:	9b04      	ldr	r3, [sp, #16]
 8008c2c:	eba0 000a 	sub.w	r0, r0, sl
 8008c30:	2240      	movs	r2, #64	@ 0x40
 8008c32:	4082      	lsls	r2, r0
 8008c34:	4313      	orrs	r3, r2
 8008c36:	3401      	adds	r4, #1
 8008c38:	9304      	str	r3, [sp, #16]
 8008c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c3e:	4829      	ldr	r0, [pc, #164]	@ (8008ce4 <_vfiprintf_r+0x220>)
 8008c40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c44:	2206      	movs	r2, #6
 8008c46:	f7f7 fae3 	bl	8000210 <memchr>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d03f      	beq.n	8008cce <_vfiprintf_r+0x20a>
 8008c4e:	4b26      	ldr	r3, [pc, #152]	@ (8008ce8 <_vfiprintf_r+0x224>)
 8008c50:	bb1b      	cbnz	r3, 8008c9a <_vfiprintf_r+0x1d6>
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	3307      	adds	r3, #7
 8008c56:	f023 0307 	bic.w	r3, r3, #7
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	9303      	str	r3, [sp, #12]
 8008c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c60:	443b      	add	r3, r7
 8008c62:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c64:	e76a      	b.n	8008b3c <_vfiprintf_r+0x78>
 8008c66:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	2001      	movs	r0, #1
 8008c6e:	e7a8      	b.n	8008bc2 <_vfiprintf_r+0xfe>
 8008c70:	2300      	movs	r3, #0
 8008c72:	3401      	adds	r4, #1
 8008c74:	9305      	str	r3, [sp, #20]
 8008c76:	4619      	mov	r1, r3
 8008c78:	f04f 0c0a 	mov.w	ip, #10
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c82:	3a30      	subs	r2, #48	@ 0x30
 8008c84:	2a09      	cmp	r2, #9
 8008c86:	d903      	bls.n	8008c90 <_vfiprintf_r+0x1cc>
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d0c6      	beq.n	8008c1a <_vfiprintf_r+0x156>
 8008c8c:	9105      	str	r1, [sp, #20]
 8008c8e:	e7c4      	b.n	8008c1a <_vfiprintf_r+0x156>
 8008c90:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c94:	4604      	mov	r4, r0
 8008c96:	2301      	movs	r3, #1
 8008c98:	e7f0      	b.n	8008c7c <_vfiprintf_r+0x1b8>
 8008c9a:	ab03      	add	r3, sp, #12
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	462a      	mov	r2, r5
 8008ca0:	4b12      	ldr	r3, [pc, #72]	@ (8008cec <_vfiprintf_r+0x228>)
 8008ca2:	a904      	add	r1, sp, #16
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f7fd fbc9 	bl	800643c <_printf_float>
 8008caa:	4607      	mov	r7, r0
 8008cac:	1c78      	adds	r0, r7, #1
 8008cae:	d1d6      	bne.n	8008c5e <_vfiprintf_r+0x19a>
 8008cb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cb2:	07d9      	lsls	r1, r3, #31
 8008cb4:	d405      	bmi.n	8008cc2 <_vfiprintf_r+0x1fe>
 8008cb6:	89ab      	ldrh	r3, [r5, #12]
 8008cb8:	059a      	lsls	r2, r3, #22
 8008cba:	d402      	bmi.n	8008cc2 <_vfiprintf_r+0x1fe>
 8008cbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cbe:	f7fe f92d 	bl	8006f1c <__retarget_lock_release_recursive>
 8008cc2:	89ab      	ldrh	r3, [r5, #12]
 8008cc4:	065b      	lsls	r3, r3, #25
 8008cc6:	f53f af1f 	bmi.w	8008b08 <_vfiprintf_r+0x44>
 8008cca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ccc:	e71e      	b.n	8008b0c <_vfiprintf_r+0x48>
 8008cce:	ab03      	add	r3, sp, #12
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	462a      	mov	r2, r5
 8008cd4:	4b05      	ldr	r3, [pc, #20]	@ (8008cec <_vfiprintf_r+0x228>)
 8008cd6:	a904      	add	r1, sp, #16
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f7fd fe47 	bl	800696c <_printf_i>
 8008cde:	e7e4      	b.n	8008caa <_vfiprintf_r+0x1e6>
 8008ce0:	0800941a 	.word	0x0800941a
 8008ce4:	08009424 	.word	0x08009424
 8008ce8:	0800643d 	.word	0x0800643d
 8008cec:	08008a9f 	.word	0x08008a9f
 8008cf0:	08009420 	.word	0x08009420

08008cf4 <__swbuf_r>:
 8008cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf6:	460e      	mov	r6, r1
 8008cf8:	4614      	mov	r4, r2
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	b118      	cbz	r0, 8008d06 <__swbuf_r+0x12>
 8008cfe:	6a03      	ldr	r3, [r0, #32]
 8008d00:	b90b      	cbnz	r3, 8008d06 <__swbuf_r+0x12>
 8008d02:	f7fd ffdd 	bl	8006cc0 <__sinit>
 8008d06:	69a3      	ldr	r3, [r4, #24]
 8008d08:	60a3      	str	r3, [r4, #8]
 8008d0a:	89a3      	ldrh	r3, [r4, #12]
 8008d0c:	071a      	lsls	r2, r3, #28
 8008d0e:	d501      	bpl.n	8008d14 <__swbuf_r+0x20>
 8008d10:	6923      	ldr	r3, [r4, #16]
 8008d12:	b943      	cbnz	r3, 8008d26 <__swbuf_r+0x32>
 8008d14:	4621      	mov	r1, r4
 8008d16:	4628      	mov	r0, r5
 8008d18:	f000 f82a 	bl	8008d70 <__swsetup_r>
 8008d1c:	b118      	cbz	r0, 8008d26 <__swbuf_r+0x32>
 8008d1e:	f04f 37ff 	mov.w	r7, #4294967295
 8008d22:	4638      	mov	r0, r7
 8008d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	6922      	ldr	r2, [r4, #16]
 8008d2a:	1a98      	subs	r0, r3, r2
 8008d2c:	6963      	ldr	r3, [r4, #20]
 8008d2e:	b2f6      	uxtb	r6, r6
 8008d30:	4283      	cmp	r3, r0
 8008d32:	4637      	mov	r7, r6
 8008d34:	dc05      	bgt.n	8008d42 <__swbuf_r+0x4e>
 8008d36:	4621      	mov	r1, r4
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f7ff fdbf 	bl	80088bc <_fflush_r>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d1ed      	bne.n	8008d1e <__swbuf_r+0x2a>
 8008d42:	68a3      	ldr	r3, [r4, #8]
 8008d44:	3b01      	subs	r3, #1
 8008d46:	60a3      	str	r3, [r4, #8]
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	1c5a      	adds	r2, r3, #1
 8008d4c:	6022      	str	r2, [r4, #0]
 8008d4e:	701e      	strb	r6, [r3, #0]
 8008d50:	6962      	ldr	r2, [r4, #20]
 8008d52:	1c43      	adds	r3, r0, #1
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d004      	beq.n	8008d62 <__swbuf_r+0x6e>
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	07db      	lsls	r3, r3, #31
 8008d5c:	d5e1      	bpl.n	8008d22 <__swbuf_r+0x2e>
 8008d5e:	2e0a      	cmp	r6, #10
 8008d60:	d1df      	bne.n	8008d22 <__swbuf_r+0x2e>
 8008d62:	4621      	mov	r1, r4
 8008d64:	4628      	mov	r0, r5
 8008d66:	f7ff fda9 	bl	80088bc <_fflush_r>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d0d9      	beq.n	8008d22 <__swbuf_r+0x2e>
 8008d6e:	e7d6      	b.n	8008d1e <__swbuf_r+0x2a>

08008d70 <__swsetup_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4b29      	ldr	r3, [pc, #164]	@ (8008e18 <__swsetup_r+0xa8>)
 8008d74:	4605      	mov	r5, r0
 8008d76:	6818      	ldr	r0, [r3, #0]
 8008d78:	460c      	mov	r4, r1
 8008d7a:	b118      	cbz	r0, 8008d84 <__swsetup_r+0x14>
 8008d7c:	6a03      	ldr	r3, [r0, #32]
 8008d7e:	b90b      	cbnz	r3, 8008d84 <__swsetup_r+0x14>
 8008d80:	f7fd ff9e 	bl	8006cc0 <__sinit>
 8008d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d88:	0719      	lsls	r1, r3, #28
 8008d8a:	d422      	bmi.n	8008dd2 <__swsetup_r+0x62>
 8008d8c:	06da      	lsls	r2, r3, #27
 8008d8e:	d407      	bmi.n	8008da0 <__swsetup_r+0x30>
 8008d90:	2209      	movs	r2, #9
 8008d92:	602a      	str	r2, [r5, #0]
 8008d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d98:	81a3      	strh	r3, [r4, #12]
 8008d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9e:	e033      	b.n	8008e08 <__swsetup_r+0x98>
 8008da0:	0758      	lsls	r0, r3, #29
 8008da2:	d512      	bpl.n	8008dca <__swsetup_r+0x5a>
 8008da4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008da6:	b141      	cbz	r1, 8008dba <__swsetup_r+0x4a>
 8008da8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dac:	4299      	cmp	r1, r3
 8008dae:	d002      	beq.n	8008db6 <__swsetup_r+0x46>
 8008db0:	4628      	mov	r0, r5
 8008db2:	f7fe ff2d 	bl	8007c10 <_free_r>
 8008db6:	2300      	movs	r3, #0
 8008db8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dba:	89a3      	ldrh	r3, [r4, #12]
 8008dbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008dc0:	81a3      	strh	r3, [r4, #12]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	6063      	str	r3, [r4, #4]
 8008dc6:	6923      	ldr	r3, [r4, #16]
 8008dc8:	6023      	str	r3, [r4, #0]
 8008dca:	89a3      	ldrh	r3, [r4, #12]
 8008dcc:	f043 0308 	orr.w	r3, r3, #8
 8008dd0:	81a3      	strh	r3, [r4, #12]
 8008dd2:	6923      	ldr	r3, [r4, #16]
 8008dd4:	b94b      	cbnz	r3, 8008dea <__swsetup_r+0x7a>
 8008dd6:	89a3      	ldrh	r3, [r4, #12]
 8008dd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008de0:	d003      	beq.n	8008dea <__swsetup_r+0x7a>
 8008de2:	4621      	mov	r1, r4
 8008de4:	4628      	mov	r0, r5
 8008de6:	f000 f88b 	bl	8008f00 <__smakebuf_r>
 8008dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dee:	f013 0201 	ands.w	r2, r3, #1
 8008df2:	d00a      	beq.n	8008e0a <__swsetup_r+0x9a>
 8008df4:	2200      	movs	r2, #0
 8008df6:	60a2      	str	r2, [r4, #8]
 8008df8:	6962      	ldr	r2, [r4, #20]
 8008dfa:	4252      	negs	r2, r2
 8008dfc:	61a2      	str	r2, [r4, #24]
 8008dfe:	6922      	ldr	r2, [r4, #16]
 8008e00:	b942      	cbnz	r2, 8008e14 <__swsetup_r+0xa4>
 8008e02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e06:	d1c5      	bne.n	8008d94 <__swsetup_r+0x24>
 8008e08:	bd38      	pop	{r3, r4, r5, pc}
 8008e0a:	0799      	lsls	r1, r3, #30
 8008e0c:	bf58      	it	pl
 8008e0e:	6962      	ldrpl	r2, [r4, #20]
 8008e10:	60a2      	str	r2, [r4, #8]
 8008e12:	e7f4      	b.n	8008dfe <__swsetup_r+0x8e>
 8008e14:	2000      	movs	r0, #0
 8008e16:	e7f7      	b.n	8008e08 <__swsetup_r+0x98>
 8008e18:	20000048 	.word	0x20000048

08008e1c <_raise_r>:
 8008e1c:	291f      	cmp	r1, #31
 8008e1e:	b538      	push	{r3, r4, r5, lr}
 8008e20:	4605      	mov	r5, r0
 8008e22:	460c      	mov	r4, r1
 8008e24:	d904      	bls.n	8008e30 <_raise_r+0x14>
 8008e26:	2316      	movs	r3, #22
 8008e28:	6003      	str	r3, [r0, #0]
 8008e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2e:	bd38      	pop	{r3, r4, r5, pc}
 8008e30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008e32:	b112      	cbz	r2, 8008e3a <_raise_r+0x1e>
 8008e34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e38:	b94b      	cbnz	r3, 8008e4e <_raise_r+0x32>
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	f000 f830 	bl	8008ea0 <_getpid_r>
 8008e40:	4622      	mov	r2, r4
 8008e42:	4601      	mov	r1, r0
 8008e44:	4628      	mov	r0, r5
 8008e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e4a:	f000 b817 	b.w	8008e7c <_kill_r>
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d00a      	beq.n	8008e68 <_raise_r+0x4c>
 8008e52:	1c59      	adds	r1, r3, #1
 8008e54:	d103      	bne.n	8008e5e <_raise_r+0x42>
 8008e56:	2316      	movs	r3, #22
 8008e58:	6003      	str	r3, [r0, #0]
 8008e5a:	2001      	movs	r0, #1
 8008e5c:	e7e7      	b.n	8008e2e <_raise_r+0x12>
 8008e5e:	2100      	movs	r1, #0
 8008e60:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008e64:	4620      	mov	r0, r4
 8008e66:	4798      	blx	r3
 8008e68:	2000      	movs	r0, #0
 8008e6a:	e7e0      	b.n	8008e2e <_raise_r+0x12>

08008e6c <raise>:
 8008e6c:	4b02      	ldr	r3, [pc, #8]	@ (8008e78 <raise+0xc>)
 8008e6e:	4601      	mov	r1, r0
 8008e70:	6818      	ldr	r0, [r3, #0]
 8008e72:	f7ff bfd3 	b.w	8008e1c <_raise_r>
 8008e76:	bf00      	nop
 8008e78:	20000048 	.word	0x20000048

08008e7c <_kill_r>:
 8008e7c:	b538      	push	{r3, r4, r5, lr}
 8008e7e:	4d07      	ldr	r5, [pc, #28]	@ (8008e9c <_kill_r+0x20>)
 8008e80:	2300      	movs	r3, #0
 8008e82:	4604      	mov	r4, r0
 8008e84:	4608      	mov	r0, r1
 8008e86:	4611      	mov	r1, r2
 8008e88:	602b      	str	r3, [r5, #0]
 8008e8a:	f7f9 f911 	bl	80020b0 <_kill>
 8008e8e:	1c43      	adds	r3, r0, #1
 8008e90:	d102      	bne.n	8008e98 <_kill_r+0x1c>
 8008e92:	682b      	ldr	r3, [r5, #0]
 8008e94:	b103      	cbz	r3, 8008e98 <_kill_r+0x1c>
 8008e96:	6023      	str	r3, [r4, #0]
 8008e98:	bd38      	pop	{r3, r4, r5, pc}
 8008e9a:	bf00      	nop
 8008e9c:	200006b8 	.word	0x200006b8

08008ea0 <_getpid_r>:
 8008ea0:	f7f9 b8fe 	b.w	80020a0 <_getpid>

08008ea4 <_malloc_usable_size_r>:
 8008ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ea8:	1f18      	subs	r0, r3, #4
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	bfbc      	itt	lt
 8008eae:	580b      	ldrlt	r3, [r1, r0]
 8008eb0:	18c0      	addlt	r0, r0, r3
 8008eb2:	4770      	bx	lr

08008eb4 <__swhatbuf_r>:
 8008eb4:	b570      	push	{r4, r5, r6, lr}
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ebc:	2900      	cmp	r1, #0
 8008ebe:	b096      	sub	sp, #88	@ 0x58
 8008ec0:	4615      	mov	r5, r2
 8008ec2:	461e      	mov	r6, r3
 8008ec4:	da0d      	bge.n	8008ee2 <__swhatbuf_r+0x2e>
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ecc:	f04f 0100 	mov.w	r1, #0
 8008ed0:	bf14      	ite	ne
 8008ed2:	2340      	movne	r3, #64	@ 0x40
 8008ed4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ed8:	2000      	movs	r0, #0
 8008eda:	6031      	str	r1, [r6, #0]
 8008edc:	602b      	str	r3, [r5, #0]
 8008ede:	b016      	add	sp, #88	@ 0x58
 8008ee0:	bd70      	pop	{r4, r5, r6, pc}
 8008ee2:	466a      	mov	r2, sp
 8008ee4:	f000 f848 	bl	8008f78 <_fstat_r>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	dbec      	blt.n	8008ec6 <__swhatbuf_r+0x12>
 8008eec:	9901      	ldr	r1, [sp, #4]
 8008eee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ef2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ef6:	4259      	negs	r1, r3
 8008ef8:	4159      	adcs	r1, r3
 8008efa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008efe:	e7eb      	b.n	8008ed8 <__swhatbuf_r+0x24>

08008f00 <__smakebuf_r>:
 8008f00:	898b      	ldrh	r3, [r1, #12]
 8008f02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f04:	079d      	lsls	r5, r3, #30
 8008f06:	4606      	mov	r6, r0
 8008f08:	460c      	mov	r4, r1
 8008f0a:	d507      	bpl.n	8008f1c <__smakebuf_r+0x1c>
 8008f0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	6123      	str	r3, [r4, #16]
 8008f14:	2301      	movs	r3, #1
 8008f16:	6163      	str	r3, [r4, #20]
 8008f18:	b003      	add	sp, #12
 8008f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f1c:	ab01      	add	r3, sp, #4
 8008f1e:	466a      	mov	r2, sp
 8008f20:	f7ff ffc8 	bl	8008eb4 <__swhatbuf_r>
 8008f24:	9f00      	ldr	r7, [sp, #0]
 8008f26:	4605      	mov	r5, r0
 8008f28:	4639      	mov	r1, r7
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f7fe fee4 	bl	8007cf8 <_malloc_r>
 8008f30:	b948      	cbnz	r0, 8008f46 <__smakebuf_r+0x46>
 8008f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f36:	059a      	lsls	r2, r3, #22
 8008f38:	d4ee      	bmi.n	8008f18 <__smakebuf_r+0x18>
 8008f3a:	f023 0303 	bic.w	r3, r3, #3
 8008f3e:	f043 0302 	orr.w	r3, r3, #2
 8008f42:	81a3      	strh	r3, [r4, #12]
 8008f44:	e7e2      	b.n	8008f0c <__smakebuf_r+0xc>
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	6020      	str	r0, [r4, #0]
 8008f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f4e:	81a3      	strh	r3, [r4, #12]
 8008f50:	9b01      	ldr	r3, [sp, #4]
 8008f52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f56:	b15b      	cbz	r3, 8008f70 <__smakebuf_r+0x70>
 8008f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	f000 f81d 	bl	8008f9c <_isatty_r>
 8008f62:	b128      	cbz	r0, 8008f70 <__smakebuf_r+0x70>
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	f023 0303 	bic.w	r3, r3, #3
 8008f6a:	f043 0301 	orr.w	r3, r3, #1
 8008f6e:	81a3      	strh	r3, [r4, #12]
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	431d      	orrs	r5, r3
 8008f74:	81a5      	strh	r5, [r4, #12]
 8008f76:	e7cf      	b.n	8008f18 <__smakebuf_r+0x18>

08008f78 <_fstat_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4d07      	ldr	r5, [pc, #28]	@ (8008f98 <_fstat_r+0x20>)
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4604      	mov	r4, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	4611      	mov	r1, r2
 8008f84:	602b      	str	r3, [r5, #0]
 8008f86:	f7f9 f8f3 	bl	8002170 <_fstat>
 8008f8a:	1c43      	adds	r3, r0, #1
 8008f8c:	d102      	bne.n	8008f94 <_fstat_r+0x1c>
 8008f8e:	682b      	ldr	r3, [r5, #0]
 8008f90:	b103      	cbz	r3, 8008f94 <_fstat_r+0x1c>
 8008f92:	6023      	str	r3, [r4, #0]
 8008f94:	bd38      	pop	{r3, r4, r5, pc}
 8008f96:	bf00      	nop
 8008f98:	200006b8 	.word	0x200006b8

08008f9c <_isatty_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	4d06      	ldr	r5, [pc, #24]	@ (8008fb8 <_isatty_r+0x1c>)
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	4608      	mov	r0, r1
 8008fa6:	602b      	str	r3, [r5, #0]
 8008fa8:	f7f9 f8f2 	bl	8002190 <_isatty>
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	d102      	bne.n	8008fb6 <_isatty_r+0x1a>
 8008fb0:	682b      	ldr	r3, [r5, #0]
 8008fb2:	b103      	cbz	r3, 8008fb6 <_isatty_r+0x1a>
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	200006b8 	.word	0x200006b8

08008fbc <_init>:
 8008fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fbe:	bf00      	nop
 8008fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc2:	bc08      	pop	{r3}
 8008fc4:	469e      	mov	lr, r3
 8008fc6:	4770      	bx	lr

08008fc8 <_fini>:
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fca:	bf00      	nop
 8008fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fce:	bc08      	pop	{r3}
 8008fd0:	469e      	mov	lr, r3
 8008fd2:	4770      	bx	lr
