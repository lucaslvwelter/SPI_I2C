
TRABALHO_SPI_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081fc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  080083d0  080083d0  000093d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a24  08008a24  0000a200  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008a24  08008a24  00009a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a2c  08008a2c  0000a200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a2c  08008a2c  00009a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a30  08008a30  00009a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08008a34  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  20000200  08008c34  0000a200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  08008c34  0000a6b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144be  00000000  00000000  0000a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b2  00000000  00000000  0001e6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  000217a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000246e0  00000000  00000000  00022ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00019171  00000000  00000000  000471c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d7343  00000000  00000000  00060331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00137674  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000eff  00000000  00000000  001376b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061dc  00000000  00000000  001385b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013e794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080083b4 	.word	0x080083b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	080083b4 	.word	0x080083b4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	@ 0x28
 8000fb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b39      	ldr	r3, [pc, #228]	@ (80010b4 <MX_GPIO_Init+0x100>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a38      	ldr	r2, [pc, #224]	@ (80010b4 <MX_GPIO_Init+0x100>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b36      	ldr	r3, [pc, #216]	@ (80010b4 <MX_GPIO_Init+0x100>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b32      	ldr	r3, [pc, #200]	@ (80010b4 <MX_GPIO_Init+0x100>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a31      	ldr	r2, [pc, #196]	@ (80010b4 <MX_GPIO_Init+0x100>)
 8000ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b2f      	ldr	r3, [pc, #188]	@ (80010b4 <MX_GPIO_Init+0x100>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	4b2b      	ldr	r3, [pc, #172]	@ (80010b4 <MX_GPIO_Init+0x100>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a2a      	ldr	r2, [pc, #168]	@ (80010b4 <MX_GPIO_Init+0x100>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b28      	ldr	r3, [pc, #160]	@ (80010b4 <MX_GPIO_Init+0x100>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b24      	ldr	r3, [pc, #144]	@ (80010b4 <MX_GPIO_Init+0x100>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a23      	ldr	r2, [pc, #140]	@ (80010b4 <MX_GPIO_Init+0x100>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b21      	ldr	r3, [pc, #132]	@ (80010b4 <MX_GPIO_Init+0x100>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f249 0120 	movw	r1, #36896	@ 0x9020
 8001040:	481d      	ldr	r0, [pc, #116]	@ (80010b8 <MX_GPIO_Init+0x104>)
 8001042:	f001 fb75 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CE_GPIO_Port, LCD_CE_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800104c:	481b      	ldr	r0, [pc, #108]	@ (80010bc <MX_GPIO_Init+0x108>)
 800104e:	f001 fb6f 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001052:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001058:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800105c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	4814      	ldr	r0, [pc, #80]	@ (80010bc <MX_GPIO_Init+0x108>)
 800106a:	f001 f9cd 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_RST_Pin|LCD_DC_Pin;
 800106e:	f249 0320 	movw	r3, #36896	@ 0x9020
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	480c      	ldr	r0, [pc, #48]	@ (80010b8 <MX_GPIO_Init+0x104>)
 8001088:	f001 f9be 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CE_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin;
 800108c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CE_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	@ (80010bc <MX_GPIO_Init+0x108>)
 80010a6:	f001 f9af 	bl	8002408 <HAL_GPIO_Init>

}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	@ 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000
 80010bc:	40020800 	.word	0x40020800

080010c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010c6:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <MX_I2C1_Init+0x54>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010cc:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <MX_I2C1_Init+0x58>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f0:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010fe:	f001 fb31 	bl	8002764 <HAL_I2C_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001108:	f000 fc52 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000021c 	.word	0x2000021c
 8001114:	40005400 	.word	0x40005400
 8001118:	000186a0 	.word	0x000186a0

0800111c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	@ 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a19      	ldr	r2, [pc, #100]	@ (80011a0 <HAL_I2C_MspInit+0x84>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d12b      	bne.n	8001196 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a17      	ldr	r2, [pc, #92]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800115a:	23c0      	movs	r3, #192	@ 0xc0
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115e:	2312      	movs	r3, #18
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116a:	2304      	movs	r3, #4
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <HAL_I2C_MspInit+0x8c>)
 8001176:	f001 f947 	bl	8002408 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 8001184:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001188:	6413      	str	r3, [r2, #64]	@ 0x40
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	@ 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40005400 	.word	0x40005400
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400

080011ac <LCD5110_update>:
#include "lcd5110_hal.h"
#include "lcd5110_graphics.h"

static uint8_t scrbuf[504];

void LCD5110_update(void) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
    LCD5110_SetXY(0, 0);
 80011b2:	2100      	movs	r1, #0
 80011b4:	2000      	movs	r0, #0
 80011b6:	f000 f992 	bl	80014de <LCD5110_SetXY>
    for (int i = 0; i < 504; i++) {
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	e009      	b.n	80011d4 <LCD5110_update+0x28>
        LCD5110_SendData(scrbuf[i]);
 80011c0:	4a09      	ldr	r2, [pc, #36]	@ (80011e8 <LCD5110_update+0x3c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f939 	bl	8001440 <LCD5110_SendData>
    for (int i = 0; i < 504; i++) {
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3301      	adds	r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 80011da:	dbf1      	blt.n	80011c0 <LCD5110_update+0x14>
    }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000270 	.word	0x20000270

080011ec <LCD5110_clrScr>:

void LCD5110_clrScr(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
    for (int i = 0; i < 504; i++) {
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	e007      	b.n	8001208 <LCD5110_clrScr+0x1c>
        scrbuf[i] = 0x00;
 80011f8:	4a08      	ldr	r2, [pc, #32]	@ (800121c <LCD5110_clrScr+0x30>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 504; i++) {
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3301      	adds	r3, #1
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 800120e:	dbf3      	blt.n	80011f8 <LCD5110_clrScr+0xc>
    }
    LCD5110_update();
 8001210:	f7ff ffcc 	bl	80011ac <LCD5110_update>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000270 	.word	0x20000270

08001220 <LCD5110_setPixel>:
        scrbuf[i] = 0xFF;
    }
    LCD5110_update();
}

void LCD5110_setPixel(uint16_t x, uint16_t y) {
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	460a      	mov	r2, r1
 800122a:	80fb      	strh	r3, [r7, #6]
 800122c:	4613      	mov	r3, r2
 800122e:	80bb      	strh	r3, [r7, #4]
    if (x >= 84 || y >= 48) return;
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	2b53      	cmp	r3, #83	@ 0x53
 8001234:	d821      	bhi.n	800127a <LCD5110_setPixel+0x5a>
 8001236:	88bb      	ldrh	r3, [r7, #4]
 8001238:	2b2f      	cmp	r3, #47	@ 0x2f
 800123a:	d81e      	bhi.n	800127a <LCD5110_setPixel+0x5a>
    scrbuf[(y/8)*84 + x] |= (1 << (y % 8));
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	08db      	lsrs	r3, r3, #3
 8001240:	b298      	uxth	r0, r3
 8001242:	4602      	mov	r2, r0
 8001244:	2354      	movs	r3, #84	@ 0x54
 8001246:	fb03 f202 	mul.w	r2, r3, r2
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	4413      	add	r3, r2
 800124e:	4a0e      	ldr	r2, [pc, #56]	@ (8001288 <LCD5110_setPixel+0x68>)
 8001250:	5cd3      	ldrb	r3, [r2, r3]
 8001252:	b25a      	sxtb	r2, r3
 8001254:	88bb      	ldrh	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	2101      	movs	r1, #1
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	b25b      	sxtb	r3, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	b259      	sxtb	r1, r3
 8001266:	4602      	mov	r2, r0
 8001268:	2354      	movs	r3, #84	@ 0x54
 800126a:	fb03 f202 	mul.w	r2, r3, r2
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	4413      	add	r3, r2
 8001272:	b2c9      	uxtb	r1, r1
 8001274:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <LCD5110_setPixel+0x68>)
 8001276:	54d1      	strb	r1, [r2, r3]
 8001278:	e000      	b.n	800127c <LCD5110_setPixel+0x5c>
    if (x >= 84 || y >= 48) return;
 800127a:	bf00      	nop
}
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000270 	.word	0x20000270

0800128c <LCD5110_drawLine>:
        LCD5110_clrPixel(x, y+i);
    }
    LCD5110_update();
}

void LCD5110_drawLine(int x1, int y1, int x2, int y2) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	603b      	str	r3, [r7, #0]
    int dx = abs(x2 - x1);
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bfb8      	it	lt
 80012a4:	425b      	neglt	r3, r3
 80012a6:	623b      	str	r3, [r7, #32]
    int dy = abs(y2 - y1);
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	bfb8      	it	lt
 80012b2:	425b      	neglt	r3, r3
 80012b4:	61fb      	str	r3, [r7, #28]
    int sx = (x1 < x2) ? 1 : -1;
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	da01      	bge.n	80012c2 <LCD5110_drawLine+0x36>
 80012be:	2301      	movs	r3, #1
 80012c0:	e001      	b.n	80012c6 <LCD5110_drawLine+0x3a>
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	61bb      	str	r3, [r7, #24]
    int sy = (y1 < y2) ? 1 : -1;
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	da01      	bge.n	80012d4 <LCD5110_drawLine+0x48>
 80012d0:	2301      	movs	r3, #1
 80012d2:	e001      	b.n	80012d8 <LCD5110_drawLine+0x4c>
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	617b      	str	r3, [r7, #20]
    int err = dx - dy;
 80012da:	6a3a      	ldr	r2, [r7, #32]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24

    while (1) {
        LCD5110_setPixel(x1, y1);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	b292      	uxth	r2, r2
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff97 	bl	8001220 <LCD5110_setPixel>
        if (x1 == x2 && y1 == y2) break;
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d103      	bne.n	8001302 <LCD5110_drawLine+0x76>
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d01c      	beq.n	800133c <LCD5110_drawLine+0xb0>
        int e2 = 2 * err;
 8001302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	613b      	str	r3, [r7, #16]
        if (e2 > -dy) { err -= dy; x1 += sx; }
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	425b      	negs	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	429a      	cmp	r2, r3
 8001310:	dd07      	ble.n	8001322 <LCD5110_drawLine+0x96>
 8001312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
        if (e2 < dx)  { err += dx; y1 += sy; }
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	429a      	cmp	r2, r3
 8001328:	dadb      	bge.n	80012e2 <LCD5110_drawLine+0x56>
 800132a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	4413      	add	r3, r2
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	4413      	add	r3, r2
 8001338:	60bb      	str	r3, [r7, #8]
    while (1) {
 800133a:	e7d2      	b.n	80012e2 <LCD5110_drawLine+0x56>
        if (x1 == x2 && y1 == y2) break;
 800133c:	bf00      	nop
    }
    LCD5110_update();
 800133e:	f7ff ff35 	bl	80011ac <LCD5110_update>
}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	@ 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <LCD5110_Delay>:
#include "lcd5110_hal.h"
#include "font6_8.h" // fonte 6x8

static void LCD5110_Delay(uint32_t ms) {
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 ff22 	bl	800219c <HAL_Delay>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <LCD5110_DC>:

static void LCD5110_DC(uint8_t val) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	bf14      	ite	ne
 8001370:	2301      	movne	r3, #1
 8001372:	2300      	moveq	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	461a      	mov	r2, r3
 8001378:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800137c:	4803      	ldr	r0, [pc, #12]	@ (800138c <LCD5110_DC+0x2c>)
 800137e:	f001 f9d7 	bl	8002730 <HAL_GPIO_WritePin>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40020000 	.word	0x40020000

08001390 <LCD5110_RST>:

static void LCD5110_RST(uint8_t val) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	bf14      	ite	ne
 80013a0:	2301      	movne	r3, #1
 80013a2:	2300      	moveq	r3, #0
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013ac:	4803      	ldr	r0, [pc, #12]	@ (80013bc <LCD5110_RST+0x2c>)
 80013ae:	f001 f9bf 	bl	8002730 <HAL_GPIO_WritePin>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40020000 	.word	0x40020000

080013c0 <LCD5110_CE>:

static void LCD5110_CE(uint8_t val) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CE_GPIO_Port, LCD_CE_Pin, val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	bf14      	ite	ne
 80013d0:	2301      	movne	r3, #1
 80013d2:	2300      	moveq	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013dc:	4803      	ldr	r0, [pc, #12]	@ (80013ec <LCD5110_CE+0x2c>)
 80013de:	f001 f9a7 	bl	8002730 <HAL_GPIO_WritePin>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40020800 	.word	0x40020800

080013f0 <LCD5110_Send>:

void LCD5110_Send(uint8_t data) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80013fa:	1df9      	adds	r1, r7, #7
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	2201      	movs	r2, #1
 8001402:	4803      	ldr	r0, [pc, #12]	@ (8001410 <LCD5110_Send+0x20>)
 8001404:	f003 f843 	bl	800448e <HAL_SPI_Transmit>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000474 	.word	0x20000474

08001414 <LCD5110_SendCommand>:

void LCD5110_SendCommand(uint8_t cmd) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
    LCD5110_DC(0);
 800141e:	2000      	movs	r0, #0
 8001420:	f7ff ff9e 	bl	8001360 <LCD5110_DC>
    LCD5110_CE(0);
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff ffcb 	bl	80013c0 <LCD5110_CE>
    LCD5110_Send(cmd);
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ffdf 	bl	80013f0 <LCD5110_Send>
    LCD5110_CE(1);
 8001432:	2001      	movs	r0, #1
 8001434:	f7ff ffc4 	bl	80013c0 <LCD5110_CE>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <LCD5110_SendData>:

void LCD5110_SendData(uint8_t data) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
    LCD5110_DC(1);
 800144a:	2001      	movs	r0, #1
 800144c:	f7ff ff88 	bl	8001360 <LCD5110_DC>
    LCD5110_CE(0);
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff ffb5 	bl	80013c0 <LCD5110_CE>
    LCD5110_Send(data);
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ffc9 	bl	80013f0 <LCD5110_Send>
    LCD5110_CE(1);
 800145e:	2001      	movs	r0, #1
 8001460:	f7ff ffae 	bl	80013c0 <LCD5110_CE>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <LCD5110_Init>:

void LCD5110_Init(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
    LCD5110_RST(0);
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff ff8d 	bl	8001390 <LCD5110_RST>
    LCD5110_Delay(10);
 8001476:	200a      	movs	r0, #10
 8001478:	f7ff ff67 	bl	800134a <LCD5110_Delay>
    LCD5110_RST(1);
 800147c:	2001      	movs	r0, #1
 800147e:	f7ff ff87 	bl	8001390 <LCD5110_RST>

    LCD5110_SendCommand(0x21); // Extended commands
 8001482:	2021      	movs	r0, #33	@ 0x21
 8001484:	f7ff ffc6 	bl	8001414 <LCD5110_SendCommand>
    LCD5110_SendCommand(0xC6); // Vop (contrast)
 8001488:	20c6      	movs	r0, #198	@ 0xc6
 800148a:	f7ff ffc3 	bl	8001414 <LCD5110_SendCommand>
    LCD5110_SendCommand(0x06); // Temp coef
 800148e:	2006      	movs	r0, #6
 8001490:	f7ff ffc0 	bl	8001414 <LCD5110_SendCommand>
    LCD5110_SendCommand(0x13); // Bias
 8001494:	2013      	movs	r0, #19
 8001496:	f7ff ffbd 	bl	8001414 <LCD5110_SendCommand>
    LCD5110_SendCommand(0x20); // Basic commands
 800149a:	2020      	movs	r0, #32
 800149c:	f7ff ffba 	bl	8001414 <LCD5110_SendCommand>
    LCD5110_SendCommand(0x0C); // Normal display
 80014a0:	200c      	movs	r0, #12
 80014a2:	f7ff ffb7 	bl	8001414 <LCD5110_SendCommand>

    LCD5110_Clear();
 80014a6:	f000 f802 	bl	80014ae <LCD5110_Clear>
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}

080014ae <LCD5110_Clear>:

void LCD5110_Clear(void) {
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
    for (int i = 0; i < 504; i++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	e005      	b.n	80014c6 <LCD5110_Clear+0x18>
        LCD5110_SendData(0x00);
 80014ba:	2000      	movs	r0, #0
 80014bc:	f7ff ffc0 	bl	8001440 <LCD5110_SendData>
    for (int i = 0; i < 504; i++)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3301      	adds	r3, #1
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 80014cc:	dbf5      	blt.n	80014ba <LCD5110_Clear+0xc>
    LCD5110_SetXY(0, 0);
 80014ce:	2100      	movs	r1, #0
 80014d0:	2000      	movs	r0, #0
 80014d2:	f000 f804 	bl	80014de <LCD5110_SetXY>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <LCD5110_SetXY>:

void LCD5110_SetXY(uint8_t x, uint8_t y) {
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	460a      	mov	r2, r1
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	4613      	mov	r3, r2
 80014ec:	71bb      	strb	r3, [r7, #6]
    LCD5110_SendCommand(0x80 | (x * 6));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	461a      	mov	r2, r3
 80014f2:	0052      	lsls	r2, r2, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001500:	b25b      	sxtb	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff85 	bl	8001414 <LCD5110_SendCommand>
    LCD5110_SendCommand(0x40 | y);
 800150a:	79bb      	ldrb	r3, [r7, #6]
 800150c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff7e 	bl	8001414 <LCD5110_SendCommand>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <LCD5110_WriteChar>:

void LCD5110_WriteChar(char c) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
    if (c < 32 || c > 127) c = '?';
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b1f      	cmp	r3, #31
 800152e:	d903      	bls.n	8001538 <LCD5110_WriteChar+0x18>
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	da01      	bge.n	800153c <LCD5110_WriteChar+0x1c>
 8001538:	233f      	movs	r3, #63	@ 0x3f
 800153a:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 6; i++)
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	e011      	b.n	8001566 <LCD5110_WriteChar+0x46>
        LCD5110_SendData(font6_8[c - 32][i]);
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	f1a3 0220 	sub.w	r2, r3, #32
 8001548:	490b      	ldr	r1, [pc, #44]	@ (8001578 <LCD5110_WriteChar+0x58>)
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	18ca      	adds	r2, r1, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff70 	bl	8001440 <LCD5110_SendData>
    for (int i = 0; i < 6; i++)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3301      	adds	r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b05      	cmp	r3, #5
 800156a:	ddea      	ble.n	8001542 <LCD5110_WriteChar+0x22>
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	080083f4 	.word	0x080083f4

0800157c <LCD5110_WriteString>:

void LCD5110_WriteString(char *s) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
    while (*s) {
 8001584:	e006      	b.n	8001594 <LCD5110_WriteString+0x18>
        LCD5110_WriteChar(*s++);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ffc6 	bl	8001520 <LCD5110_WriteChar>
    while (*s) {
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f4      	bne.n	8001586 <LCD5110_WriteString+0xa>
    }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ae:	f000 fd83 	bl	80020b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b2:	f000 f8a7 	bl	8001704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b6:	f7ff fcfd 	bl	8000fb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015ba:	f000 fce1 	bl	8001f80 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80015be:	f000 fabb 	bl	8001b38 <MX_SPI2_Init>
  MX_I2C1_Init();
 80015c2:	f7ff fd7d 	bl	80010c0 <MX_I2C1_Init>
  MX_TIM10_Init();
 80015c6:	f000 fc8f 	bl	8001ee8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  mpu6050Init(); // Inicializa o sensor
 80015ca:	f000 f9f7 	bl	80019bc <mpu6050Init>
  LCD5110_Init();
 80015ce:	f7ff ff4d 	bl	800146c <LCD5110_Init>
  LCD5110_clrScr();
 80015d2:	f7ff fe0b 	bl	80011ec <LCD5110_clrScr>
  HAL_TIM_Base_Start_IT(&htim10);
 80015d6:	4845      	ldr	r0, [pc, #276]	@ (80016ec <main+0x144>)
 80015d8:	f003 f9ca 	bl	8004970 <HAL_TIM_Base_Start_IT>

  srand(HAL_GetTick());
 80015dc:	f000 fdd2 	bl	8002184 <HAL_GetTick>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 f81c 	bl	8005620 <srand>
  Direcao direcaoAtual = DIR_NEUTRO;
 80015e8:	2304      	movs	r3, #4
 80015ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tempoSeta = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
  uint8_t aguardandoMovimento = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mpu6050ReadAccel(&leituraA);
 80015f4:	483e      	ldr	r0, [pc, #248]	@ (80016f0 <main+0x148>)
 80015f6:	f000 fa61 	bl	8001abc <mpu6050ReadAccel>
	  float ax = leituraA.accelX / 16384.0;
 80015fa:	4b3d      	ldr	r3, [pc, #244]	@ (80016f0 <main+0x148>)
 80015fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ffaf 	bl	8000564 <__aeabi_i2d>
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	4b3a      	ldr	r3, [pc, #232]	@ (80016f4 <main+0x14c>)
 800160c:	f7ff f93e 	bl	800088c <__aeabi_ddiv>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f7ff fae6 	bl	8000be8 <__aeabi_d2f>
 800161c:	4603      	mov	r3, r0
 800161e:	60bb      	str	r3, [r7, #8]
	  float ay = leituraA.accelY / 16384.0;
 8001620:	4b33      	ldr	r3, [pc, #204]	@ (80016f0 <main+0x148>)
 8001622:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff9c 	bl	8000564 <__aeabi_i2d>
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4b30      	ldr	r3, [pc, #192]	@ (80016f4 <main+0x14c>)
 8001632:	f7ff f92b 	bl	800088c <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fad3 	bl	8000be8 <__aeabi_d2f>
 8001642:	4603      	mov	r3, r0
 8001644:	607b      	str	r3, [r7, #4]

	  if (!aguardandoMovimento) {
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d11c      	bne.n	8001686 <main+0xde>
		  static Direcao direcaoAnterior = DIR_NEUTRO;
		  do {
		  	direcaoAtual = (Direcao)(rand() % 4);  // Gera de 0 a 3
 800164c:	f004 f816 	bl	800567c <rand>
 8001650:	4603      	mov	r3, r0
 8001652:	425a      	negs	r2, r3
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	f002 0203 	and.w	r2, r2, #3
 800165c:	bf58      	it	pl
 800165e:	4253      	negpl	r3, r2
 8001660:	75fb      	strb	r3, [r7, #23]
		  } while (direcaoAtual == direcaoAnterior);
 8001662:	4b25      	ldr	r3, [pc, #148]	@ (80016f8 <main+0x150>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	7dfa      	ldrb	r2, [r7, #23]
 8001668:	429a      	cmp	r2, r3
 800166a:	d0ef      	beq.n	800164c <main+0xa4>
		  direcaoAnterior = direcaoAtual;
 800166c:	4a22      	ldr	r2, [pc, #136]	@ (80016f8 <main+0x150>)
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	7013      	strb	r3, [r2, #0]
		  desenharSeta(direcaoAtual);
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f8b3 	bl	80017e0 <desenharSeta>
		  tempoSeta = HAL_GetTick();
 800167a:	f000 fd83 	bl	8002184 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]
		  aguardandoMovimento = 1;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	e02e      	b.n	80016e4 <main+0x13c>
	  } else {
		  if (HAL_GetTick() - tempoSeta > 1000) {
 8001686:	f000 fd7d 	bl	8002184 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001694:	d926      	bls.n	80016e4 <main+0x13c>
		      Direcao mov = detectarMovimento(ax, ay, THRESHOLD);
 8001696:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <main+0x154>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	eeb0 1a67 	vmov.f32	s2, s15
 80016a0:	edd7 0a01 	vldr	s1, [r7, #4]
 80016a4:	ed97 0a02 	vldr	s0, [r7, #8]
 80016a8:	f000 f902 	bl	80018b0 <detectarMovimento>
 80016ac:	4603      	mov	r3, r0
 80016ae:	70fb      	strb	r3, [r7, #3]

		      if (mov != DIR_NEUTRO) {
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d016      	beq.n	80016e4 <main+0x13c>
		          if (mov == direcaoAtual) {
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d108      	bne.n	80016d0 <main+0x128>
		              mostrarResultado(1);  // acertou
 80016be:	2001      	movs	r0, #1
 80016c0:	f000 f936 	bl	8001930 <mostrarResultado>
		              acertosSequencia += 1;
 80016c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <main+0x158>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	3301      	adds	r3, #1
 80016ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <main+0x158>)
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e005      	b.n	80016dc <main+0x134>
		          } else {
		              mostrarResultado(0);  // errou
 80016d0:	2000      	movs	r0, #0
 80016d2:	f000 f92d 	bl	8001930 <mostrarResultado>
		              acertosSequencia = 0;
 80016d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <main+0x158>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
		          }
		          enviarAcertosSequencia();
 80016dc:	f000 f94a 	bl	8001974 <enviarAcertosSequencia>
		          aguardandoMovimento = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]
		      }
		      // Se mov == NEUTRO, apenas ignora e espera próxima leitura
		  }
	  }

	  HAL_Delay(50);  // Suaviza leitura
 80016e4:	2032      	movs	r0, #50	@ 0x32
 80016e6:	f000 fd59 	bl	800219c <HAL_Delay>
  {
 80016ea:	e783      	b.n	80015f4 <main+0x4c>
 80016ec:	200004d0 	.word	0x200004d0
 80016f0:	20000468 	.word	0x20000468
 80016f4:	40d00000 	.word	0x40d00000
 80016f8:	20000004 	.word	0x20000004
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000470 	.word	0x20000470

08001704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b094      	sub	sp, #80	@ 0x50
 8001708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170a:	f107 031c 	add.w	r3, r7, #28
 800170e:	2234      	movs	r2, #52	@ 0x34
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f004 fd81 	bl	800621a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	4b2a      	ldr	r3, [pc, #168]	@ (80017d8 <SystemClock_Config+0xd4>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001730:	4a29      	ldr	r2, [pc, #164]	@ (80017d8 <SystemClock_Config+0xd4>)
 8001732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001736:	6413      	str	r3, [r2, #64]	@ 0x40
 8001738:	4b27      	ldr	r3, [pc, #156]	@ (80017d8 <SystemClock_Config+0xd4>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001744:	2300      	movs	r3, #0
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	4b24      	ldr	r3, [pc, #144]	@ (80017dc <SystemClock_Config+0xd8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001750:	4a22      	ldr	r2, [pc, #136]	@ (80017dc <SystemClock_Config+0xd8>)
 8001752:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b20      	ldr	r3, [pc, #128]	@ (80017dc <SystemClock_Config+0xd8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001764:	2302      	movs	r3, #2
 8001766:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001768:	2301      	movs	r3, #1
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800176c:	2310      	movs	r3, #16
 800176e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001770:	2302      	movs	r3, #2
 8001772:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001774:	2300      	movs	r3, #0
 8001776:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001778:	2310      	movs	r3, #16
 800177a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800177c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001780:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001782:	2304      	movs	r3, #4
 8001784:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001786:	2302      	movs	r3, #2
 8001788:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800178a:	2302      	movs	r3, #2
 800178c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	4618      	mov	r0, r3
 8001794:	f002 fb54 	bl	8003e40 <HAL_RCC_OscConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800179e:	f000 f907 	bl	80019b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a2:	230f      	movs	r3, #15
 80017a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a6:	2302      	movs	r3, #2
 80017a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	2102      	movs	r1, #2
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 fff4 	bl	80037ac <HAL_RCC_ClockConfig>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80017ca:	f000 f8f1 	bl	80019b0 <Error_Handler>
  }
}
 80017ce:	bf00      	nop
 80017d0:	3750      	adds	r7, #80	@ 0x50
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40007000 	.word	0x40007000

080017e0 <desenharSeta>:

/* USER CODE BEGIN 4 */
void desenharSeta(Direcao dir) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
	LCD5110_clrScr();
 80017ea:	f7ff fcff 	bl	80011ec <LCD5110_clrScr>

    switch (dir) {
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d857      	bhi.n	80018a4 <desenharSeta+0xc4>
 80017f4:	a201      	add	r2, pc, #4	@ (adr r2, 80017fc <desenharSeta+0x1c>)
 80017f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fa:	bf00      	nop
 80017fc:	0800180d 	.word	0x0800180d
 8001800:	08001833 	.word	0x08001833
 8001804:	08001859 	.word	0x08001859
 8001808:	0800187f 	.word	0x0800187f
        case DIR_CIMA:
        	LCD5110_drawLine(42, 30, 42, 10);
 800180c:	230a      	movs	r3, #10
 800180e:	222a      	movs	r2, #42	@ 0x2a
 8001810:	211e      	movs	r1, #30
 8001812:	202a      	movs	r0, #42	@ 0x2a
 8001814:	f7ff fd3a 	bl	800128c <LCD5110_drawLine>
			LCD5110_drawLine(42, 10, 36, 16);
 8001818:	2310      	movs	r3, #16
 800181a:	2224      	movs	r2, #36	@ 0x24
 800181c:	210a      	movs	r1, #10
 800181e:	202a      	movs	r0, #42	@ 0x2a
 8001820:	f7ff fd34 	bl	800128c <LCD5110_drawLine>
			LCD5110_drawLine(42, 10, 48, 16);
 8001824:	2310      	movs	r3, #16
 8001826:	2230      	movs	r2, #48	@ 0x30
 8001828:	210a      	movs	r1, #10
 800182a:	202a      	movs	r0, #42	@ 0x2a
 800182c:	f7ff fd2e 	bl	800128c <LCD5110_drawLine>
			break;
 8001830:	e039      	b.n	80018a6 <desenharSeta+0xc6>
        case DIR_BAIXO:
			LCD5110_drawLine(42, 10, 42, 30);
 8001832:	231e      	movs	r3, #30
 8001834:	222a      	movs	r2, #42	@ 0x2a
 8001836:	210a      	movs	r1, #10
 8001838:	202a      	movs	r0, #42	@ 0x2a
 800183a:	f7ff fd27 	bl	800128c <LCD5110_drawLine>
			LCD5110_drawLine(42, 30, 36, 24);
 800183e:	2318      	movs	r3, #24
 8001840:	2224      	movs	r2, #36	@ 0x24
 8001842:	211e      	movs	r1, #30
 8001844:	202a      	movs	r0, #42	@ 0x2a
 8001846:	f7ff fd21 	bl	800128c <LCD5110_drawLine>
			LCD5110_drawLine(42, 30, 48, 24);
 800184a:	2318      	movs	r3, #24
 800184c:	2230      	movs	r2, #48	@ 0x30
 800184e:	211e      	movs	r1, #30
 8001850:	202a      	movs	r0, #42	@ 0x2a
 8001852:	f7ff fd1b 	bl	800128c <LCD5110_drawLine>
			break;
 8001856:	e026      	b.n	80018a6 <desenharSeta+0xc6>
        case DIR_ESQUERDA:
			LCD5110_drawLine(50, 24, 30, 24);
 8001858:	2318      	movs	r3, #24
 800185a:	221e      	movs	r2, #30
 800185c:	2118      	movs	r1, #24
 800185e:	2032      	movs	r0, #50	@ 0x32
 8001860:	f7ff fd14 	bl	800128c <LCD5110_drawLine>
			LCD5110_drawLine(30, 24, 36, 18);
 8001864:	2312      	movs	r3, #18
 8001866:	2224      	movs	r2, #36	@ 0x24
 8001868:	2118      	movs	r1, #24
 800186a:	201e      	movs	r0, #30
 800186c:	f7ff fd0e 	bl	800128c <LCD5110_drawLine>
			LCD5110_drawLine(30, 24, 36, 30);
 8001870:	231e      	movs	r3, #30
 8001872:	2224      	movs	r2, #36	@ 0x24
 8001874:	2118      	movs	r1, #24
 8001876:	201e      	movs	r0, #30
 8001878:	f7ff fd08 	bl	800128c <LCD5110_drawLine>
			break;
 800187c:	e013      	b.n	80018a6 <desenharSeta+0xc6>
        case DIR_DIREITA:
			LCD5110_drawLine(30, 24, 50, 24);
 800187e:	2318      	movs	r3, #24
 8001880:	2232      	movs	r2, #50	@ 0x32
 8001882:	2118      	movs	r1, #24
 8001884:	201e      	movs	r0, #30
 8001886:	f7ff fd01 	bl	800128c <LCD5110_drawLine>
			LCD5110_drawLine(50, 24, 44, 18);
 800188a:	2312      	movs	r3, #18
 800188c:	222c      	movs	r2, #44	@ 0x2c
 800188e:	2118      	movs	r1, #24
 8001890:	2032      	movs	r0, #50	@ 0x32
 8001892:	f7ff fcfb 	bl	800128c <LCD5110_drawLine>
			LCD5110_drawLine(50, 24, 44, 30);
 8001896:	231e      	movs	r3, #30
 8001898:	222c      	movs	r2, #44	@ 0x2c
 800189a:	2118      	movs	r1, #24
 800189c:	2032      	movs	r0, #50	@ 0x32
 800189e:	f7ff fcf5 	bl	800128c <LCD5110_drawLine>
			break;
 80018a2:	e000      	b.n	80018a6 <desenharSeta+0xc6>
        default:
            break;
 80018a4:	bf00      	nop
    }
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop

080018b0 <detectarMovimento>:

Direcao detectarMovimento(float ax, float ay, float threshold)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80018ba:	edc7 0a02 	vstr	s1, [r7, #8]
 80018be:	ed87 1a01 	vstr	s2, [r7, #4]
	if (ay < -threshold) return DIR_ESQUERDA;
 80018c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c6:	eef1 7a67 	vneg.f32	s15, s15
 80018ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80018ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	d501      	bpl.n	80018dc <detectarMovimento+0x2c>
 80018d8:	2302      	movs	r3, #2
 80018da:	e023      	b.n	8001924 <detectarMovimento+0x74>
	if (ay > threshold) return DIR_DIREITA;
 80018dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80018e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ec:	dd01      	ble.n	80018f2 <detectarMovimento+0x42>
 80018ee:	2303      	movs	r3, #3
 80018f0:	e018      	b.n	8001924 <detectarMovimento+0x74>
	if (ax > threshold) return DIR_BAIXO;
 80018f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80018f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80018fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001902:	dd01      	ble.n	8001908 <detectarMovimento+0x58>
 8001904:	2301      	movs	r3, #1
 8001906:	e00d      	b.n	8001924 <detectarMovimento+0x74>
	if (ax < -threshold) return DIR_CIMA;
 8001908:	edd7 7a01 	vldr	s15, [r7, #4]
 800190c:	eef1 7a67 	vneg.f32	s15, s15
 8001910:	ed97 7a03 	vldr	s14, [r7, #12]
 8001914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191c:	d501      	bpl.n	8001922 <detectarMovimento+0x72>
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <detectarMovimento+0x74>
	return DIR_NEUTRO;
 8001922:	2304      	movs	r3, #4
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <mostrarResultado>:

void mostrarResultado(uint8_t acertou) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
    LCD5110_Clear();
 800193a:	f7ff fdb8 	bl	80014ae <LCD5110_Clear>
    LCD5110_SetXY(0, 0);
 800193e:	2100      	movs	r1, #0
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff fdcc 	bl	80014de <LCD5110_SetXY>

    if (acertou == 1) {
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d103      	bne.n	8001954 <mostrarResultado+0x24>
        LCD5110_WriteString("Acertou!");
 800194c:	4807      	ldr	r0, [pc, #28]	@ (800196c <mostrarResultado+0x3c>)
 800194e:	f7ff fe15 	bl	800157c <LCD5110_WriteString>
 8001952:	e002      	b.n	800195a <mostrarResultado+0x2a>
    } else {
        LCD5110_WriteString("Errou!");
 8001954:	4806      	ldr	r0, [pc, #24]	@ (8001970 <mostrarResultado+0x40>)
 8001956:	f7ff fe11 	bl	800157c <LCD5110_WriteString>
    }

    HAL_Delay(1000);  // Dá tempo para ver o resultado
 800195a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800195e:	f000 fc1d 	bl	800219c <HAL_Delay>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	080083d0 	.word	0x080083d0
 8001970:	080083dc 	.word	0x080083dc

08001974 <enviarAcertosSequencia>:

void enviarAcertosSequencia(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
    char buffer[32];
    int len = snprintf(buffer, sizeof(buffer), "ACERTOS:%d\r\n", acertosSequencia);
 800197a:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <enviarAcertosSequencia+0x30>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	1d38      	adds	r0, r7, #4
 8001980:	4a09      	ldr	r2, [pc, #36]	@ (80019a8 <enviarAcertosSequencia+0x34>)
 8001982:	2120      	movs	r1, #32
 8001984:	f004 fbd0 	bl	8006128 <sniprintf>
 8001988:	6278      	str	r0, [r7, #36]	@ 0x24
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	b29a      	uxth	r2, r3
 800198e:	1d39      	adds	r1, r7, #4
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <enviarAcertosSequencia+0x38>)
 8001996:	f003 fa87 	bl	8004ea8 <HAL_UART_Transmit>
}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	@ 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000470 	.word	0x20000470
 80019a8:	080083e4 	.word	0x080083e4
 80019ac:	20000518 	.word	0x20000518

080019b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b4:	b672      	cpsid	i
}
 80019b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <Error_Handler+0x8>

080019bc <mpu6050Init>:
#include "i2c.h"
#include "usart.h"

static uint8_t mpu6050Addr = (0x68 << 1);

void mpu6050Init(void) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af04      	add	r7, sp, #16
    static const uint8_t gyroConfigReg = 0x1B;
    static unsigned char msgErro[] = "Erro na inicializacao do MPU6050";
    uint8_t check;
    uint8_t data;

    HAL_I2C_Mem_Read(&hi2c1, mpu6050Addr, whoAmIReg, 1, &check, 1, 1000);
 80019c2:	4b35      	ldr	r3, [pc, #212]	@ (8001a98 <mpu6050Init+0xdc>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	4619      	mov	r1, r3
 80019c8:	4b34      	ldr	r3, [pc, #208]	@ (8001a9c <mpu6050Init+0xe0>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d2:	9302      	str	r3, [sp, #8]
 80019d4:	2301      	movs	r3, #1
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	1dfb      	adds	r3, r7, #7
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2301      	movs	r3, #1
 80019de:	4830      	ldr	r0, [pc, #192]	@ (8001aa0 <mpu6050Init+0xe4>)
 80019e0:	f001 f8fe 	bl	8002be0 <HAL_I2C_Mem_Read>
    if(check == 0x68) {
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2b68      	cmp	r3, #104	@ 0x68
 80019e8:	d14c      	bne.n	8001a84 <mpu6050Init+0xc8>
        data = 0x08;
 80019ea:	2308      	movs	r3, #8
 80019ec:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, mpu6050Addr, pwrMgmt1Reg, 1, &data, 1, 1000);
 80019ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001a98 <mpu6050Init+0xdc>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4619      	mov	r1, r3
 80019f4:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa4 <mpu6050Init+0xe8>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019fe:	9302      	str	r3, [sp, #8]
 8001a00:	2301      	movs	r3, #1
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	1dbb      	adds	r3, r7, #6
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	4825      	ldr	r0, [pc, #148]	@ (8001aa0 <mpu6050Init+0xe4>)
 8001a0c:	f000 ffee 	bl	80029ec <HAL_I2C_Mem_Write>
        data = 0x06;
 8001a10:	2306      	movs	r3, #6
 8001a12:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, mpu6050Addr, configReg, 1, &data, 1, 1000);
 8001a14:	4b20      	ldr	r3, [pc, #128]	@ (8001a98 <mpu6050Init+0xdc>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <mpu6050Init+0xec>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2301      	movs	r3, #1
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	1dbb      	adds	r3, r7, #6
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2301      	movs	r3, #1
 8001a30:	481b      	ldr	r0, [pc, #108]	@ (8001aa0 <mpu6050Init+0xe4>)
 8001a32:	f000 ffdb 	bl	80029ec <HAL_I2C_Mem_Write>
        data = 0x00;
 8001a36:	2300      	movs	r3, #0
 8001a38:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, mpu6050Addr, accelConfigReg, 1, &data, 1, 1000);
 8001a3a:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <mpu6050Init+0xdc>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <mpu6050Init+0xf0>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	1dbb      	adds	r3, r7, #6
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	2301      	movs	r3, #1
 8001a56:	4812      	ldr	r0, [pc, #72]	@ (8001aa0 <mpu6050Init+0xe4>)
 8001a58:	f000 ffc8 	bl	80029ec <HAL_I2C_Mem_Write>
        data = 0x00;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, mpu6050Addr, gyroConfigReg, 1, &data, 1, 1000);
 8001a60:	4b0d      	ldr	r3, [pc, #52]	@ (8001a98 <mpu6050Init+0xdc>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <mpu6050Init+0xf4>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a70:	9302      	str	r3, [sp, #8]
 8001a72:	2301      	movs	r3, #1
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	1dbb      	adds	r3, r7, #6
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	4808      	ldr	r0, [pc, #32]	@ (8001aa0 <mpu6050Init+0xe4>)
 8001a7e:	f000 ffb5 	bl	80029ec <HAL_I2C_Mem_Write>
    } else {
        HAL_UART_Transmit(&huart2, msgErro, sizeof(msgErro), 100);
    }
}
 8001a82:	e005      	b.n	8001a90 <mpu6050Init+0xd4>
        HAL_UART_Transmit(&huart2, msgErro, sizeof(msgErro), 100);
 8001a84:	2364      	movs	r3, #100	@ 0x64
 8001a86:	2221      	movs	r2, #33	@ 0x21
 8001a88:	490a      	ldr	r1, [pc, #40]	@ (8001ab4 <mpu6050Init+0xf8>)
 8001a8a:	480b      	ldr	r0, [pc, #44]	@ (8001ab8 <mpu6050Init+0xfc>)
 8001a8c:	f003 fa0c 	bl	8004ea8 <HAL_UART_Transmit>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000005 	.word	0x20000005
 8001a9c:	08008634 	.word	0x08008634
 8001aa0:	2000021c 	.word	0x2000021c
 8001aa4:	08008635 	.word	0x08008635
 8001aa8:	08008636 	.word	0x08008636
 8001aac:	08008637 	.word	0x08008637
 8001ab0:	08008638 	.word	0x08008638
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	20000518 	.word	0x20000518

08001abc <mpu6050ReadAccel>:

void mpu6050ReadAccel(leituraAcel *leitura) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af04      	add	r7, sp, #16
 8001ac2:	6078      	str	r0, [r7, #4]
    static const uint8_t accelXoutHReg = 0x3B;
    uint8_t recData[6];
    HAL_I2C_Mem_Read(&hi2c1, mpu6050Addr, accelXoutHReg, 1, recData, 6, 1000);
 8001ac4:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <mpu6050ReadAccel+0x70>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <mpu6050ReadAccel+0x74>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ad4:	9302      	str	r3, [sp, #8]
 8001ad6:	2306      	movs	r3, #6
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	4814      	ldr	r0, [pc, #80]	@ (8001b34 <mpu6050ReadAccel+0x78>)
 8001ae4:	f001 f87c 	bl	8002be0 <HAL_I2C_Mem_Read>
    leitura->accelX = (int16_t)(recData[0] << 8 | recData[1]);
 8001ae8:	7a3b      	ldrb	r3, [r7, #8]
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	b21a      	sxth	r2, r3
 8001af0:	7a7b      	ldrb	r3, [r7, #9]
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	4313      	orrs	r3, r2
 8001af6:	b21a      	sxth	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	801a      	strh	r2, [r3, #0]
    leitura->accelY = (int16_t)(recData[2] << 8 | recData[3]);
 8001afc:	7abb      	ldrb	r3, [r7, #10]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	b21a      	sxth	r2, r3
 8001b04:	7afb      	ldrb	r3, [r7, #11]
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b21a      	sxth	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	805a      	strh	r2, [r3, #2]
    leitura->accelZ = (int16_t)(recData[4] << 8 | recData[5]);
 8001b10:	7b3b      	ldrb	r3, [r7, #12]
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	7b7b      	ldrb	r3, [r7, #13]
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b21a      	sxth	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	809a      	strh	r2, [r3, #4]
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000005 	.word	0x20000005
 8001b30:	08008639 	.word	0x08008639
 8001b34:	2000021c 	.word	0x2000021c

08001b38 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001b3c:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <MX_SPI2_Init+0x64>)
 8001b3e:	4a18      	ldr	r2, [pc, #96]	@ (8001ba0 <MX_SPI2_Init+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b42:	4b16      	ldr	r3, [pc, #88]	@ (8001b9c <MX_SPI2_Init+0x64>)
 8001b44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b4a:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <MX_SPI2_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <MX_SPI2_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b56:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <MX_SPI2_Init+0x64>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <MX_SPI2_Init+0x64>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <MX_SPI2_Init+0x64>)
 8001b64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <MX_SPI2_Init+0x64>)
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b70:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <MX_SPI2_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b76:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <MX_SPI2_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b7c:	4b07      	ldr	r3, [pc, #28]	@ (8001b9c <MX_SPI2_Init+0x64>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <MX_SPI2_Init+0x64>)
 8001b84:	220a      	movs	r2, #10
 8001b86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b88:	4804      	ldr	r0, [pc, #16]	@ (8001b9c <MX_SPI2_Init+0x64>)
 8001b8a:	f002 fbf7 	bl	800437c <HAL_SPI_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b94:	f7ff ff0c 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000474 	.word	0x20000474
 8001ba0:	40003800 	.word	0x40003800

08001ba4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	@ 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a28      	ldr	r2, [pc, #160]	@ (8001c64 <HAL_SPI_MspInit+0xc0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d14a      	bne.n	8001c5c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <HAL_SPI_MspInit+0xc4>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	4a26      	ldr	r2, [pc, #152]	@ (8001c68 <HAL_SPI_MspInit+0xc4>)
 8001bd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd6:	4b24      	ldr	r3, [pc, #144]	@ (8001c68 <HAL_SPI_MspInit+0xc4>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b20      	ldr	r3, [pc, #128]	@ (8001c68 <HAL_SPI_MspInit+0xc4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a1f      	ldr	r2, [pc, #124]	@ (8001c68 <HAL_SPI_MspInit+0xc4>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <HAL_SPI_MspInit+0xc4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <HAL_SPI_MspInit+0xc4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a18      	ldr	r2, [pc, #96]	@ (8001c68 <HAL_SPI_MspInit+0xc4>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <HAL_SPI_MspInit+0xc4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c2a:	2305      	movs	r3, #5
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	480d      	ldr	r0, [pc, #52]	@ (8001c6c <HAL_SPI_MspInit+0xc8>)
 8001c36:	f000 fbe7 	bl	8002408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001c3a:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c4c:	2305      	movs	r3, #5
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4619      	mov	r1, r3
 8001c56:	4806      	ldr	r0, [pc, #24]	@ (8001c70 <HAL_SPI_MspInit+0xcc>)
 8001c58:	f000 fbd6 	bl	8002408 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3728      	adds	r7, #40	@ 0x28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40003800 	.word	0x40003800
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020800 	.word	0x40020800
 8001c70:	40020400 	.word	0x40020400

08001c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	4a08      	ldr	r2, [pc, #32]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cb2:	2007      	movs	r0, #7
 8001cb4:	f000 fb66 	bl	8002384 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <NMI_Handler+0x4>

08001ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <HardFault_Handler+0x4>

08001cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <MemManage_Handler+0x4>

08001cdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1a:	f000 fa1f 	bl	800215c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d2a:	f002 fe91 	bl	8004a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200004d0 	.word	0x200004d0

08001d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return 1;
 8001d3c:	2301      	movs	r3, #1
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <_kill>:

int _kill(int pid, int sig)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d52:	f004 fab5 	bl	80062c0 <__errno>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2216      	movs	r2, #22
 8001d5a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <_exit>:

void _exit (int status)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ffe7 	bl	8001d48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d7a:	bf00      	nop
 8001d7c:	e7fd      	b.n	8001d7a <_exit+0x12>

08001d7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	e00a      	b.n	8001da6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d90:	f3af 8000 	nop.w
 8001d94:	4601      	mov	r1, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	60ba      	str	r2, [r7, #8]
 8001d9c:	b2ca      	uxtb	r2, r1
 8001d9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	3301      	adds	r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	dbf0      	blt.n	8001d90 <_read+0x12>
  }

  return len;
 8001dae:	687b      	ldr	r3, [r7, #4]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	e009      	b.n	8001dde <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	60ba      	str	r2, [r7, #8]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	dbf1      	blt.n	8001dca <_write+0x12>
  }
  return len;
 8001de6:	687b      	ldr	r3, [r7, #4]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_close>:

int _close(int file)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e18:	605a      	str	r2, [r3, #4]
  return 0;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_isatty>:

int _isatty(int file)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e30:	2301      	movs	r3, #1
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b085      	sub	sp, #20
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e60:	4a14      	ldr	r2, [pc, #80]	@ (8001eb4 <_sbrk+0x5c>)
 8001e62:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <_sbrk+0x60>)
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e6c:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d102      	bne.n	8001e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e74:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <_sbrk+0x64>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	@ (8001ec0 <_sbrk+0x68>)
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7a:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <_sbrk+0x64>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d207      	bcs.n	8001e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e88:	f004 fa1a 	bl	80062c0 <__errno>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	220c      	movs	r2, #12
 8001e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	e009      	b.n	8001eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e98:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9e:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <_sbrk+0x64>)
 8001ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20020000 	.word	0x20020000
 8001eb8:	00000400 	.word	0x00000400
 8001ebc:	200004cc 	.word	0x200004cc
 8001ec0:	200006b0 	.word	0x200006b0

08001ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <SystemInit+0x20>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ece:	4a05      	ldr	r2, [pc, #20]	@ (8001ee4 <SystemInit+0x20>)
 8001ed0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ed4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001eec:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <MX_TIM10_Init+0x40>)
 8001eee:	4a0f      	ldr	r2, [pc, #60]	@ (8001f2c <MX_TIM10_Init+0x44>)
 8001ef0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4999;
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <MX_TIM10_Init+0x40>)
 8001ef4:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001ef8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efa:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <MX_TIM10_Init+0x40>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8399;
 8001f00:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <MX_TIM10_Init+0x40>)
 8001f02:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001f06:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f08:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <MX_TIM10_Init+0x40>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <MX_TIM10_Init+0x40>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f14:	4804      	ldr	r0, [pc, #16]	@ (8001f28 <MX_TIM10_Init+0x40>)
 8001f16:	f002 fcdb 	bl	80048d0 <HAL_TIM_Base_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001f20:	f7ff fd46 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200004d0 	.word	0x200004d0
 8001f2c:	40014400 	.word	0x40014400

08001f30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f78 <HAL_TIM_Base_MspInit+0x48>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d115      	bne.n	8001f6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b0d      	ldr	r3, [pc, #52]	@ (8001f7c <HAL_TIM_Base_MspInit+0x4c>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f7c <HAL_TIM_Base_MspInit+0x4c>)
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f52:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <HAL_TIM_Base_MspInit+0x4c>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	2019      	movs	r0, #25
 8001f64:	f000 fa19 	bl	800239a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f68:	2019      	movs	r0, #25
 8001f6a:	f000 fa32 	bl	80023d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40014400 	.word	0x40014400
 8001f7c:	40023800 	.word	0x40023800

08001f80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	@ (8001fd0 <MX_USART2_UART_Init+0x50>)
 8001f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001f8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f98:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fb6:	4805      	ldr	r0, [pc, #20]	@ (8001fcc <MX_USART2_UART_Init+0x4c>)
 8001fb8:	f002 ff26 	bl	8004e08 <HAL_UART_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fc2:	f7ff fcf5 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000518 	.word	0x20000518
 8001fd0:	40004400 	.word	0x40004400

08001fd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	@ 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a19      	ldr	r2, [pc, #100]	@ (8002058 <HAL_UART_MspInit+0x84>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d12b      	bne.n	800204e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	4b18      	ldr	r3, [pc, #96]	@ (800205c <HAL_UART_MspInit+0x88>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	4a17      	ldr	r2, [pc, #92]	@ (800205c <HAL_UART_MspInit+0x88>)
 8002000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002004:	6413      	str	r3, [r2, #64]	@ 0x40
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <HAL_UART_MspInit+0x88>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b11      	ldr	r3, [pc, #68]	@ (800205c <HAL_UART_MspInit+0x88>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	4a10      	ldr	r2, [pc, #64]	@ (800205c <HAL_UART_MspInit+0x88>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6313      	str	r3, [r2, #48]	@ 0x30
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <HAL_UART_MspInit+0x88>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800202e:	230c      	movs	r3, #12
 8002030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800203e:	2307      	movs	r3, #7
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	4805      	ldr	r0, [pc, #20]	@ (8002060 <HAL_UART_MspInit+0x8c>)
 800204a:	f000 f9dd 	bl	8002408 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800204e:	bf00      	nop
 8002050:	3728      	adds	r7, #40	@ 0x28
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40004400 	.word	0x40004400
 800205c:	40023800 	.word	0x40023800
 8002060:	40020000 	.word	0x40020000

08002064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002064:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800209c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002068:	f7ff ff2c 	bl	8001ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800206c:	480c      	ldr	r0, [pc, #48]	@ (80020a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800206e:	490d      	ldr	r1, [pc, #52]	@ (80020a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002070:	4a0d      	ldr	r2, [pc, #52]	@ (80020a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002074:	e002      	b.n	800207c <LoopCopyDataInit>

08002076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207a:	3304      	adds	r3, #4

0800207c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800207c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002080:	d3f9      	bcc.n	8002076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002082:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002084:	4c0a      	ldr	r4, [pc, #40]	@ (80020b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002088:	e001      	b.n	800208e <LoopFillZerobss>

0800208a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800208a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800208c:	3204      	adds	r2, #4

0800208e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002090:	d3fb      	bcc.n	800208a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002092:	f004 f91b 	bl	80062cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002096:	f7ff fa87 	bl	80015a8 <main>
  bx  lr    
 800209a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800209c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80020a8:	08008a34 	.word	0x08008a34
  ldr r2, =_sbss
 80020ac:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80020b0:	200006b0 	.word	0x200006b0

080020b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b4:	e7fe      	b.n	80020b4 <ADC_IRQHandler>
	...

080020b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020bc:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <HAL_Init+0x40>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0d      	ldr	r2, [pc, #52]	@ (80020f8 <HAL_Init+0x40>)
 80020c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <HAL_Init+0x40>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0a      	ldr	r2, [pc, #40]	@ (80020f8 <HAL_Init+0x40>)
 80020ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d4:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <HAL_Init+0x40>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a07      	ldr	r2, [pc, #28]	@ (80020f8 <HAL_Init+0x40>)
 80020da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e0:	2003      	movs	r0, #3
 80020e2:	f000 f94f 	bl	8002384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e6:	2000      	movs	r0, #0
 80020e8:	f000 f808 	bl	80020fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ec:	f7ff fdc2 	bl	8001c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023c00 	.word	0x40023c00

080020fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002104:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <HAL_InitTick+0x54>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <HAL_InitTick+0x58>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	4619      	mov	r1, r3
 800210e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002112:	fbb3 f3f1 	udiv	r3, r3, r1
 8002116:	fbb2 f3f3 	udiv	r3, r2, r3
 800211a:	4618      	mov	r0, r3
 800211c:	f000 f967 	bl	80023ee <HAL_SYSTICK_Config>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e00e      	b.n	8002148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b0f      	cmp	r3, #15
 800212e:	d80a      	bhi.n	8002146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002130:	2200      	movs	r2, #0
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f000 f92f 	bl	800239a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800213c:	4a06      	ldr	r2, [pc, #24]	@ (8002158 <HAL_InitTick+0x5c>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	e000      	b.n	8002148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	2000002c 	.word	0x2000002c
 8002154:	20000034 	.word	0x20000034
 8002158:	20000030 	.word	0x20000030

0800215c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <HAL_IncTick+0x20>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <HAL_IncTick+0x24>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4413      	add	r3, r2
 800216c:	4a04      	ldr	r2, [pc, #16]	@ (8002180 <HAL_IncTick+0x24>)
 800216e:	6013      	str	r3, [r2, #0]
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000034 	.word	0x20000034
 8002180:	20000560 	.word	0x20000560

08002184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return uwTick;
 8002188:	4b03      	ldr	r3, [pc, #12]	@ (8002198 <HAL_GetTick+0x14>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000560 	.word	0x20000560

0800219c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a4:	f7ff ffee 	bl	8002184 <HAL_GetTick>
 80021a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d005      	beq.n	80021c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b6:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <HAL_Delay+0x44>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021c2:	bf00      	nop
 80021c4:	f7ff ffde 	bl	8002184 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d8f7      	bhi.n	80021c4 <HAL_Delay+0x28>
  {
  }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000034 	.word	0x20000034

080021e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002200:	4013      	ands	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800220c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002216:	4a04      	ldr	r2, [pc, #16]	@ (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	60d3      	str	r3, [r2, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002230:	4b04      	ldr	r3, [pc, #16]	@ (8002244 <__NVIC_GetPriorityGrouping+0x18>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 0307 	and.w	r3, r3, #7
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	2b00      	cmp	r3, #0
 8002258:	db0b      	blt.n	8002272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	f003 021f 	and.w	r2, r3, #31
 8002260:	4907      	ldr	r1, [pc, #28]	@ (8002280 <__NVIC_EnableIRQ+0x38>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2001      	movs	r0, #1
 800226a:	fa00 f202 	lsl.w	r2, r0, r2
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000e100 	.word	0xe000e100

08002284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	2b00      	cmp	r3, #0
 8002296:	db0a      	blt.n	80022ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	490c      	ldr	r1, [pc, #48]	@ (80022d0 <__NVIC_SetPriority+0x4c>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	0112      	lsls	r2, r2, #4
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	440b      	add	r3, r1
 80022a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ac:	e00a      	b.n	80022c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4908      	ldr	r1, [pc, #32]	@ (80022d4 <__NVIC_SetPriority+0x50>)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	3b04      	subs	r3, #4
 80022bc:	0112      	lsls	r2, r2, #4
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	440b      	add	r3, r1
 80022c2:	761a      	strb	r2, [r3, #24]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000e100 	.word	0xe000e100
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	@ 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f1c3 0307 	rsb	r3, r3, #7
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	bf28      	it	cs
 80022f6:	2304      	movcs	r3, #4
 80022f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d902      	bls.n	8002308 <NVIC_EncodePriority+0x30>
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3b03      	subs	r3, #3
 8002306:	e000      	b.n	800230a <NVIC_EncodePriority+0x32>
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	f04f 32ff 	mov.w	r2, #4294967295
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43da      	mvns	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	401a      	ands	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002320:	f04f 31ff 	mov.w	r1, #4294967295
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	43d9      	mvns	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	4313      	orrs	r3, r2
         );
}
 8002332:	4618      	mov	r0, r3
 8002334:	3724      	adds	r7, #36	@ 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002350:	d301      	bcc.n	8002356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002352:	2301      	movs	r3, #1
 8002354:	e00f      	b.n	8002376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002356:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <SysTick_Config+0x40>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235e:	210f      	movs	r1, #15
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	f7ff ff8e 	bl	8002284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002368:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <SysTick_Config+0x40>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236e:	4b04      	ldr	r3, [pc, #16]	@ (8002380 <SysTick_Config+0x40>)
 8002370:	2207      	movs	r2, #7
 8002372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	e000e010 	.word	0xe000e010

08002384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff29 	bl	80021e4 <__NVIC_SetPriorityGrouping>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ac:	f7ff ff3e 	bl	800222c <__NVIC_GetPriorityGrouping>
 80023b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	6978      	ldr	r0, [r7, #20]
 80023b8:	f7ff ff8e 	bl	80022d8 <NVIC_EncodePriority>
 80023bc:	4602      	mov	r2, r0
 80023be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff5d 	bl	8002284 <__NVIC_SetPriority>
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff31 	bl	8002248 <__NVIC_EnableIRQ>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ffa2 	bl	8002340 <SysTick_Config>
 80023fc:	4603      	mov	r3, r0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	@ 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	e165      	b.n	80026f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002424:	2201      	movs	r2, #1
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	429a      	cmp	r2, r3
 800243e:	f040 8154 	bne.w	80026ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d005      	beq.n	800245a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	2b02      	cmp	r3, #2
 8002458:	d130      	bne.n	80024bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002490:	2201      	movs	r2, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 0201 	and.w	r2, r3, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d017      	beq.n	80024f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d123      	bne.n	800254c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	08da      	lsrs	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3208      	adds	r2, #8
 800250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	220f      	movs	r2, #15
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	08da      	lsrs	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3208      	adds	r2, #8
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0203 	and.w	r2, r3, #3
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80ae 	beq.w	80026ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b5d      	ldr	r3, [pc, #372]	@ (8002708 <HAL_GPIO_Init+0x300>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	4a5c      	ldr	r2, [pc, #368]	@ (8002708 <HAL_GPIO_Init+0x300>)
 8002598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800259c:	6453      	str	r3, [r2, #68]	@ 0x44
 800259e:	4b5a      	ldr	r3, [pc, #360]	@ (8002708 <HAL_GPIO_Init+0x300>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025aa:	4a58      	ldr	r2, [pc, #352]	@ (800270c <HAL_GPIO_Init+0x304>)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	3302      	adds	r3, #2
 80025b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	220f      	movs	r2, #15
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002710 <HAL_GPIO_Init+0x308>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d025      	beq.n	8002622 <HAL_GPIO_Init+0x21a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002714 <HAL_GPIO_Init+0x30c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d01f      	beq.n	800261e <HAL_GPIO_Init+0x216>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002718 <HAL_GPIO_Init+0x310>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d019      	beq.n	800261a <HAL_GPIO_Init+0x212>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4c      	ldr	r2, [pc, #304]	@ (800271c <HAL_GPIO_Init+0x314>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_GPIO_Init+0x20e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002720 <HAL_GPIO_Init+0x318>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00d      	beq.n	8002612 <HAL_GPIO_Init+0x20a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002724 <HAL_GPIO_Init+0x31c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <HAL_GPIO_Init+0x206>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a49      	ldr	r2, [pc, #292]	@ (8002728 <HAL_GPIO_Init+0x320>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_GPIO_Init+0x202>
 8002606:	2306      	movs	r3, #6
 8002608:	e00c      	b.n	8002624 <HAL_GPIO_Init+0x21c>
 800260a:	2307      	movs	r3, #7
 800260c:	e00a      	b.n	8002624 <HAL_GPIO_Init+0x21c>
 800260e:	2305      	movs	r3, #5
 8002610:	e008      	b.n	8002624 <HAL_GPIO_Init+0x21c>
 8002612:	2304      	movs	r3, #4
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x21c>
 8002616:	2303      	movs	r3, #3
 8002618:	e004      	b.n	8002624 <HAL_GPIO_Init+0x21c>
 800261a:	2302      	movs	r3, #2
 800261c:	e002      	b.n	8002624 <HAL_GPIO_Init+0x21c>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_GPIO_Init+0x21c>
 8002622:	2300      	movs	r3, #0
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	f002 0203 	and.w	r2, r2, #3
 800262a:	0092      	lsls	r2, r2, #2
 800262c:	4093      	lsls	r3, r2
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002634:	4935      	ldr	r1, [pc, #212]	@ (800270c <HAL_GPIO_Init+0x304>)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	3302      	adds	r3, #2
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002642:	4b3a      	ldr	r3, [pc, #232]	@ (800272c <HAL_GPIO_Init+0x324>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002666:	4a31      	ldr	r2, [pc, #196]	@ (800272c <HAL_GPIO_Init+0x324>)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800266c:	4b2f      	ldr	r3, [pc, #188]	@ (800272c <HAL_GPIO_Init+0x324>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002690:	4a26      	ldr	r2, [pc, #152]	@ (800272c <HAL_GPIO_Init+0x324>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002696:	4b25      	ldr	r3, [pc, #148]	@ (800272c <HAL_GPIO_Init+0x324>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ba:	4a1c      	ldr	r2, [pc, #112]	@ (800272c <HAL_GPIO_Init+0x324>)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c0:	4b1a      	ldr	r3, [pc, #104]	@ (800272c <HAL_GPIO_Init+0x324>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e4:	4a11      	ldr	r2, [pc, #68]	@ (800272c <HAL_GPIO_Init+0x324>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3301      	adds	r3, #1
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	f67f ae96 	bls.w	8002424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3724      	adds	r7, #36	@ 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800
 800270c:	40013800 	.word	0x40013800
 8002710:	40020000 	.word	0x40020000
 8002714:	40020400 	.word	0x40020400
 8002718:	40020800 	.word	0x40020800
 800271c:	40020c00 	.word	0x40020c00
 8002720:	40021000 	.word	0x40021000
 8002724:	40021400 	.word	0x40021400
 8002728:	40021800 	.word	0x40021800
 800272c:	40013c00 	.word	0x40013c00

08002730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	807b      	strh	r3, [r7, #2]
 800273c:	4613      	mov	r3, r2
 800273e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002740:	787b      	ldrb	r3, [r7, #1]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800274c:	e003      	b.n	8002756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800274e:	887b      	ldrh	r3, [r7, #2]
 8002750:	041a      	lsls	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	619a      	str	r2, [r3, #24]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e12b      	b.n	80029ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe fcc6 	bl	800111c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2224      	movs	r2, #36	@ 0x24
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027c8:	f001 f8e2 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 80027cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4a81      	ldr	r2, [pc, #516]	@ (80029d8 <HAL_I2C_Init+0x274>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d807      	bhi.n	80027e8 <HAL_I2C_Init+0x84>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4a80      	ldr	r2, [pc, #512]	@ (80029dc <HAL_I2C_Init+0x278>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	bf94      	ite	ls
 80027e0:	2301      	movls	r3, #1
 80027e2:	2300      	movhi	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e006      	b.n	80027f6 <HAL_I2C_Init+0x92>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4a7d      	ldr	r2, [pc, #500]	@ (80029e0 <HAL_I2C_Init+0x27c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	bf94      	ite	ls
 80027f0:	2301      	movls	r3, #1
 80027f2:	2300      	movhi	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e0e7      	b.n	80029ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a78      	ldr	r2, [pc, #480]	@ (80029e4 <HAL_I2C_Init+0x280>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	0c9b      	lsrs	r3, r3, #18
 8002808:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a6a      	ldr	r2, [pc, #424]	@ (80029d8 <HAL_I2C_Init+0x274>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d802      	bhi.n	8002838 <HAL_I2C_Init+0xd4>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	3301      	adds	r3, #1
 8002836:	e009      	b.n	800284c <HAL_I2C_Init+0xe8>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800283e:	fb02 f303 	mul.w	r3, r2, r3
 8002842:	4a69      	ldr	r2, [pc, #420]	@ (80029e8 <HAL_I2C_Init+0x284>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	3301      	adds	r3, #1
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	430b      	orrs	r3, r1
 8002852:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800285e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	495c      	ldr	r1, [pc, #368]	@ (80029d8 <HAL_I2C_Init+0x274>)
 8002868:	428b      	cmp	r3, r1
 800286a:	d819      	bhi.n	80028a0 <HAL_I2C_Init+0x13c>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1e59      	subs	r1, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fbb1 f3f3 	udiv	r3, r1, r3
 800287a:	1c59      	adds	r1, r3, #1
 800287c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002880:	400b      	ands	r3, r1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_I2C_Init+0x138>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1e59      	subs	r1, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fbb1 f3f3 	udiv	r3, r1, r3
 8002894:	3301      	adds	r3, #1
 8002896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289a:	e051      	b.n	8002940 <HAL_I2C_Init+0x1dc>
 800289c:	2304      	movs	r3, #4
 800289e:	e04f      	b.n	8002940 <HAL_I2C_Init+0x1dc>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d111      	bne.n	80028cc <HAL_I2C_Init+0x168>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e58      	subs	r0, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	440b      	add	r3, r1
 80028b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	e012      	b.n	80028f2 <HAL_I2C_Init+0x18e>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1e58      	subs	r0, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	0099      	lsls	r1, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Init+0x196>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e022      	b.n	8002940 <HAL_I2C_Init+0x1dc>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10e      	bne.n	8002920 <HAL_I2C_Init+0x1bc>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1e58      	subs	r0, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	460b      	mov	r3, r1
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	440b      	add	r3, r1
 8002910:	fbb0 f3f3 	udiv	r3, r0, r3
 8002914:	3301      	adds	r3, #1
 8002916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800291e:	e00f      	b.n	8002940 <HAL_I2C_Init+0x1dc>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e58      	subs	r0, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	0099      	lsls	r1, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	6809      	ldr	r1, [r1, #0]
 8002944:	4313      	orrs	r3, r2
 8002946:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69da      	ldr	r2, [r3, #28]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800296e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6911      	ldr	r1, [r2, #16]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68d2      	ldr	r2, [r2, #12]
 800297a:	4311      	orrs	r1, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	430b      	orrs	r3, r1
 8002982:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	000186a0 	.word	0x000186a0
 80029dc:	001e847f 	.word	0x001e847f
 80029e0:	003d08ff 	.word	0x003d08ff
 80029e4:	431bde83 	.word	0x431bde83
 80029e8:	10624dd3 	.word	0x10624dd3

080029ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	4608      	mov	r0, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	817b      	strh	r3, [r7, #10]
 80029fe:	460b      	mov	r3, r1
 8002a00:	813b      	strh	r3, [r7, #8]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a06:	f7ff fbbd 	bl	8002184 <HAL_GetTick>
 8002a0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	f040 80d9 	bne.w	8002bcc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	2319      	movs	r3, #25
 8002a20:	2201      	movs	r2, #1
 8002a22:	496d      	ldr	r1, [pc, #436]	@ (8002bd8 <HAL_I2C_Mem_Write+0x1ec>)
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fc8b 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a30:	2302      	movs	r3, #2
 8002a32:	e0cc      	b.n	8002bce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2C_Mem_Write+0x56>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e0c5      	b.n	8002bce <HAL_I2C_Mem_Write+0x1e2>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d007      	beq.n	8002a68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2221      	movs	r2, #33	@ 0x21
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2240      	movs	r2, #64	@ 0x40
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a3a      	ldr	r2, [r7, #32]
 8002a92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4a4d      	ldr	r2, [pc, #308]	@ (8002bdc <HAL_I2C_Mem_Write+0x1f0>)
 8002aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aaa:	88f8      	ldrh	r0, [r7, #6]
 8002aac:	893a      	ldrh	r2, [r7, #8]
 8002aae:	8979      	ldrh	r1, [r7, #10]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	4603      	mov	r3, r0
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fac2 	bl	8003044 <I2C_RequestMemoryWrite>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d052      	beq.n	8002b6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e081      	b.n	8002bce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fd50 	bl	8003574 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00d      	beq.n	8002af6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d107      	bne.n	8002af2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002af0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06b      	b.n	8002bce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d11b      	bne.n	8002b6c <HAL_I2C_Mem_Write+0x180>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d017      	beq.n	8002b6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	781a      	ldrb	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1aa      	bne.n	8002aca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 fd43 	bl	8003604 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00d      	beq.n	8002ba0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d107      	bne.n	8002b9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e016      	b.n	8002bce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e000      	b.n	8002bce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	00100002 	.word	0x00100002
 8002bdc:	ffff0000 	.word	0xffff0000

08002be0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08c      	sub	sp, #48	@ 0x30
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	4608      	mov	r0, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	461a      	mov	r2, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	817b      	strh	r3, [r7, #10]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	813b      	strh	r3, [r7, #8]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bfa:	f7ff fac3 	bl	8002184 <HAL_GetTick>
 8002bfe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	f040 8214 	bne.w	8003036 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2319      	movs	r3, #25
 8002c14:	2201      	movs	r2, #1
 8002c16:	497b      	ldr	r1, [pc, #492]	@ (8002e04 <HAL_I2C_Mem_Read+0x224>)
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fb91 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
 8002c26:	e207      	b.n	8003038 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_I2C_Mem_Read+0x56>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e200      	b.n	8003038 <HAL_I2C_Mem_Read+0x458>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d007      	beq.n	8002c5c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2222      	movs	r2, #34	@ 0x22
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2240      	movs	r2, #64	@ 0x40
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a5b      	ldr	r2, [pc, #364]	@ (8002e08 <HAL_I2C_Mem_Read+0x228>)
 8002c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c9e:	88f8      	ldrh	r0, [r7, #6]
 8002ca0:	893a      	ldrh	r2, [r7, #8]
 8002ca2:	8979      	ldrh	r1, [r7, #10]
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	4603      	mov	r3, r0
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fa5e 	bl	8003170 <I2C_RequestMemoryRead>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e1bc      	b.n	8003038 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d113      	bne.n	8002cee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	623b      	str	r3, [r7, #32]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	623b      	str	r3, [r7, #32]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	623b      	str	r3, [r7, #32]
 8002cda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	e190      	b.n	8003010 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d11b      	bne.n	8002d2e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	e170      	b.n	8003010 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d11b      	bne.n	8002d6e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	e150      	b.n	8003010 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d84:	e144      	b.n	8003010 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	f200 80f1 	bhi.w	8002f72 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d123      	bne.n	8002de0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fc79 	bl	8003694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e145      	b.n	8003038 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dde:	e117      	b.n	8003010 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d14e      	bne.n	8002e86 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dee:	2200      	movs	r2, #0
 8002df0:	4906      	ldr	r1, [pc, #24]	@ (8002e0c <HAL_I2C_Mem_Read+0x22c>)
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 faa4 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e11a      	b.n	8003038 <HAL_I2C_Mem_Read+0x458>
 8002e02:	bf00      	nop
 8002e04:	00100002 	.word	0x00100002
 8002e08:	ffff0000 	.word	0xffff0000
 8002e0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e84:	e0c4      	b.n	8003010 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	496c      	ldr	r1, [pc, #432]	@ (8003040 <HAL_I2C_Mem_Read+0x460>)
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fa55 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0cb      	b.n	8003038 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee8:	2200      	movs	r2, #0
 8002eea:	4955      	ldr	r1, [pc, #340]	@ (8003040 <HAL_I2C_Mem_Read+0x460>)
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fa27 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e09d      	b.n	8003038 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f70:	e04e      	b.n	8003010 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fb8c 	bl	8003694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e058      	b.n	8003038 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d124      	bne.n	8003010 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d107      	bne.n	8002fde <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fdc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003014:	2b00      	cmp	r3, #0
 8003016:	f47f aeb6 	bne.w	8002d86 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
  }
}
 8003038:	4618      	mov	r0, r3
 800303a:	3728      	adds	r7, #40	@ 0x28
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	00010004 	.word	0x00010004

08003044 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af02      	add	r7, sp, #8
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	4608      	mov	r0, r1
 800304e:	4611      	mov	r1, r2
 8003050:	461a      	mov	r2, r3
 8003052:	4603      	mov	r3, r0
 8003054:	817b      	strh	r3, [r7, #10]
 8003056:	460b      	mov	r3, r1
 8003058:	813b      	strh	r3, [r7, #8]
 800305a:	4613      	mov	r3, r2
 800305c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800306c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	2200      	movs	r2, #0
 8003076:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f960 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00d      	beq.n	80030a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003090:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003094:	d103      	bne.n	800309e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800309c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e05f      	b.n	8003162 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030a2:	897b      	ldrh	r3, [r7, #10]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	6a3a      	ldr	r2, [r7, #32]
 80030b6:	492d      	ldr	r1, [pc, #180]	@ (800316c <I2C_RequestMemoryWrite+0x128>)
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f9bb 	bl	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e04c      	b.n	8003162 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e0:	6a39      	ldr	r1, [r7, #32]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fa46 	bl	8003574 <I2C_WaitOnTXEFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00d      	beq.n	800310a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d107      	bne.n	8003106 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003104:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e02b      	b.n	8003162 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003110:	893b      	ldrh	r3, [r7, #8]
 8003112:	b2da      	uxtb	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	611a      	str	r2, [r3, #16]
 800311a:	e021      	b.n	8003160 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800311c:	893b      	ldrh	r3, [r7, #8]
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	b29b      	uxth	r3, r3
 8003122:	b2da      	uxtb	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800312a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312c:	6a39      	ldr	r1, [r7, #32]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fa20 	bl	8003574 <I2C_WaitOnTXEFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00d      	beq.n	8003156 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	2b04      	cmp	r3, #4
 8003140:	d107      	bne.n	8003152 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003150:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e005      	b.n	8003162 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003156:	893b      	ldrh	r3, [r7, #8]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	00010002 	.word	0x00010002

08003170 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	461a      	mov	r2, r3
 800317e:	4603      	mov	r3, r0
 8003180:	817b      	strh	r3, [r7, #10]
 8003182:	460b      	mov	r3, r1
 8003184:	813b      	strh	r3, [r7, #8]
 8003186:	4613      	mov	r3, r2
 8003188:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003198:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f8c2 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00d      	beq.n	80031de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031d0:	d103      	bne.n	80031da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e0aa      	b.n	8003334 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031de:	897b      	ldrh	r3, [r7, #10]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	6a3a      	ldr	r2, [r7, #32]
 80031f2:	4952      	ldr	r1, [pc, #328]	@ (800333c <I2C_RequestMemoryRead+0x1cc>)
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f91d 	bl	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e097      	b.n	8003334 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800321a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800321c:	6a39      	ldr	r1, [r7, #32]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f9a8 	bl	8003574 <I2C_WaitOnTXEFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00d      	beq.n	8003246 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	2b04      	cmp	r3, #4
 8003230:	d107      	bne.n	8003242 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003240:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e076      	b.n	8003334 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d105      	bne.n	8003258 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800324c:	893b      	ldrh	r3, [r7, #8]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	611a      	str	r2, [r3, #16]
 8003256:	e021      	b.n	800329c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003258:	893b      	ldrh	r3, [r7, #8]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	b29b      	uxth	r3, r3
 800325e:	b2da      	uxtb	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003268:	6a39      	ldr	r1, [r7, #32]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f982 	bl	8003574 <I2C_WaitOnTXEFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	2b04      	cmp	r3, #4
 800327c:	d107      	bne.n	800328e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800328c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e050      	b.n	8003334 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003292:	893b      	ldrh	r3, [r7, #8]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800329c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800329e:	6a39      	ldr	r1, [r7, #32]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f967 	bl	8003574 <I2C_WaitOnTXEFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00d      	beq.n	80032c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d107      	bne.n	80032c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e035      	b.n	8003334 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	2200      	movs	r2, #0
 80032e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f82b 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00d      	beq.n	800330c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032fe:	d103      	bne.n	8003308 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003306:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e013      	b.n	8003334 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800330c:	897b      	ldrh	r3, [r7, #10]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	b2da      	uxtb	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331e:	6a3a      	ldr	r2, [r7, #32]
 8003320:	4906      	ldr	r1, [pc, #24]	@ (800333c <I2C_RequestMemoryRead+0x1cc>)
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f886 	bl	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	00010002 	.word	0x00010002

08003340 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003350:	e048      	b.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003358:	d044      	beq.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335a:	f7fe ff13 	bl	8002184 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d302      	bcc.n	8003370 <I2C_WaitOnFlagUntilTimeout+0x30>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d139      	bne.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	0c1b      	lsrs	r3, r3, #16
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d10d      	bne.n	8003396 <I2C_WaitOnFlagUntilTimeout+0x56>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	43da      	mvns	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	4013      	ands	r3, r2
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	e00c      	b.n	80033b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	43da      	mvns	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4013      	ands	r3, r2
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d116      	bne.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e023      	b.n	800342c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	0c1b      	lsrs	r3, r3, #16
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10d      	bne.n	800340a <I2C_WaitOnFlagUntilTimeout+0xca>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	43da      	mvns	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	4013      	ands	r3, r2
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	e00c      	b.n	8003424 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	43da      	mvns	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	4013      	ands	r3, r2
 8003416:	b29b      	uxth	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	429a      	cmp	r2, r3
 8003428:	d093      	beq.n	8003352 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003442:	e071      	b.n	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003452:	d123      	bne.n	800349c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003462:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800346c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003488:	f043 0204 	orr.w	r2, r3, #4
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e067      	b.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d041      	beq.n	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a4:	f7fe fe6e 	bl	8002184 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d302      	bcc.n	80034ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d136      	bne.n	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	0c1b      	lsrs	r3, r3, #16
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d10c      	bne.n	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	43da      	mvns	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4013      	ands	r3, r2
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bf14      	ite	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	2300      	moveq	r3, #0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	e00b      	b.n	80034f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	43da      	mvns	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e021      	b.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	0c1b      	lsrs	r3, r3, #16
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d10c      	bne.n	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	43da      	mvns	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4013      	ands	r3, r2
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf14      	ite	ne
 8003544:	2301      	movne	r3, #1
 8003546:	2300      	moveq	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e00b      	b.n	8003564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	43da      	mvns	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4013      	ands	r3, r2
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	bf14      	ite	ne
 800355e:	2301      	movne	r3, #1
 8003560:	2300      	moveq	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	f47f af6d 	bne.w	8003444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003580:	e034      	b.n	80035ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f8e3 	bl	800374e <I2C_IsAcknowledgeFailed>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e034      	b.n	80035fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d028      	beq.n	80035ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359a:	f7fe fdf3 	bl	8002184 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d302      	bcc.n	80035b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d11d      	bne.n	80035ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ba:	2b80      	cmp	r3, #128	@ 0x80
 80035bc:	d016      	beq.n	80035ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d8:	f043 0220 	orr.w	r2, r3, #32
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e007      	b.n	80035fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f6:	2b80      	cmp	r3, #128	@ 0x80
 80035f8:	d1c3      	bne.n	8003582 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003610:	e034      	b.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f89b 	bl	800374e <I2C_IsAcknowledgeFailed>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e034      	b.n	800368c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d028      	beq.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362a:	f7fe fdab 	bl	8002184 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	429a      	cmp	r2, r3
 8003638:	d302      	bcc.n	8003640 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d11d      	bne.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b04      	cmp	r3, #4
 800364c:	d016      	beq.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	f043 0220 	orr.w	r2, r3, #32
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e007      	b.n	800368c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b04      	cmp	r3, #4
 8003688:	d1c3      	bne.n	8003612 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036a0:	e049      	b.n	8003736 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d119      	bne.n	80036e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0210 	mvn.w	r2, #16
 80036b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e030      	b.n	8003746 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e4:	f7fe fd4e 	bl	8002184 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d302      	bcc.n	80036fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d11d      	bne.n	8003736 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003704:	2b40      	cmp	r3, #64	@ 0x40
 8003706:	d016      	beq.n	8003736 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003722:	f043 0220 	orr.w	r2, r3, #32
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e007      	b.n	8003746 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003740:	2b40      	cmp	r3, #64	@ 0x40
 8003742:	d1ae      	bne.n	80036a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003764:	d11b      	bne.n	800379e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800376e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	f043 0204 	orr.w	r2, r3, #4
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0cc      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037c0:	4b68      	ldr	r3, [pc, #416]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d90c      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b65      	ldr	r3, [pc, #404]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b63      	ldr	r3, [pc, #396]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0b8      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d020      	beq.n	8003836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003800:	4b59      	ldr	r3, [pc, #356]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a58      	ldr	r2, [pc, #352]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800380a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003818:	4b53      	ldr	r3, [pc, #332]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4a52      	ldr	r2, [pc, #328]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003824:	4b50      	ldr	r3, [pc, #320]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	494d      	ldr	r1, [pc, #308]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d044      	beq.n	80038cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	4b47      	ldr	r3, [pc, #284]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d119      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e07f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d003      	beq.n	800386a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003866:	2b03      	cmp	r3, #3
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386a:	4b3f      	ldr	r3, [pc, #252]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e06f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387a:	4b3b      	ldr	r3, [pc, #236]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e067      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800388a:	4b37      	ldr	r3, [pc, #220]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f023 0203 	bic.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4934      	ldr	r1, [pc, #208]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	4313      	orrs	r3, r2
 800389a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800389c:	f7fe fc72 	bl	8002184 <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a4:	f7fe fc6e 	bl	8002184 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e04f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 020c 	and.w	r2, r3, #12
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d1eb      	bne.n	80038a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038cc:	4b25      	ldr	r3, [pc, #148]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d20c      	bcs.n	80038f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b22      	ldr	r3, [pc, #136]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	4b20      	ldr	r3, [pc, #128]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e032      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003900:	4b19      	ldr	r3, [pc, #100]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4916      	ldr	r1, [pc, #88]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800391e:	4b12      	ldr	r3, [pc, #72]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	490e      	ldr	r1, [pc, #56]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003932:	f000 f855 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 8003936:	4602      	mov	r2, r0
 8003938:	4b0b      	ldr	r3, [pc, #44]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	490a      	ldr	r1, [pc, #40]	@ (800396c <HAL_RCC_ClockConfig+0x1c0>)
 8003944:	5ccb      	ldrb	r3, [r1, r3]
 8003946:	fa22 f303 	lsr.w	r3, r2, r3
 800394a:	4a09      	ldr	r2, [pc, #36]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800394e:	4b09      	ldr	r3, [pc, #36]	@ (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe fbd2 	bl	80020fc <HAL_InitTick>

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40023c00 	.word	0x40023c00
 8003968:	40023800 	.word	0x40023800
 800396c:	0800863c 	.word	0x0800863c
 8003970:	2000002c 	.word	0x2000002c
 8003974:	20000030 	.word	0x20000030

08003978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800397c:	4b03      	ldr	r3, [pc, #12]	@ (800398c <HAL_RCC_GetHCLKFreq+0x14>)
 800397e:	681b      	ldr	r3, [r3, #0]
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	2000002c 	.word	0x2000002c

08003990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003994:	f7ff fff0 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	0a9b      	lsrs	r3, r3, #10
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4903      	ldr	r1, [pc, #12]	@ (80039b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40023800 	.word	0x40023800
 80039b4:	0800864c 	.word	0x0800864c

080039b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039bc:	f7ff ffdc 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	0b5b      	lsrs	r3, r3, #13
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4903      	ldr	r1, [pc, #12]	@ (80039dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40023800 	.word	0x40023800
 80039dc:	0800864c 	.word	0x0800864c

080039e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e4:	b0ae      	sub	sp, #184	@ 0xb8
 80039e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a06:	4bcb      	ldr	r3, [pc, #812]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	f200 8206 	bhi.w	8003e20 <HAL_RCC_GetSysClockFreq+0x440>
 8003a14:	a201      	add	r2, pc, #4	@ (adr r2, 8003a1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a51 	.word	0x08003a51
 8003a20:	08003e21 	.word	0x08003e21
 8003a24:	08003e21 	.word	0x08003e21
 8003a28:	08003e21 	.word	0x08003e21
 8003a2c:	08003a59 	.word	0x08003a59
 8003a30:	08003e21 	.word	0x08003e21
 8003a34:	08003e21 	.word	0x08003e21
 8003a38:	08003e21 	.word	0x08003e21
 8003a3c:	08003a61 	.word	0x08003a61
 8003a40:	08003e21 	.word	0x08003e21
 8003a44:	08003e21 	.word	0x08003e21
 8003a48:	08003e21 	.word	0x08003e21
 8003a4c:	08003c51 	.word	0x08003c51
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a50:	4bb9      	ldr	r3, [pc, #740]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a56:	e1e7      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a58:	4bb8      	ldr	r3, [pc, #736]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a5e:	e1e3      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a60:	4bb4      	ldr	r3, [pc, #720]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a6c:	4bb1      	ldr	r3, [pc, #708]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d071      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a78:	4bae      	ldr	r3, [pc, #696]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	099b      	lsrs	r3, r3, #6
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a84:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003a88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a94:	2300      	movs	r3, #0
 8003a96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a9e:	4622      	mov	r2, r4
 8003aa0:	462b      	mov	r3, r5
 8003aa2:	f04f 0000 	mov.w	r0, #0
 8003aa6:	f04f 0100 	mov.w	r1, #0
 8003aaa:	0159      	lsls	r1, r3, #5
 8003aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab0:	0150      	lsls	r0, r2, #5
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	1a51      	subs	r1, r2, r1
 8003aba:	6439      	str	r1, [r7, #64]	@ 0x40
 8003abc:	4629      	mov	r1, r5
 8003abe:	eb63 0301 	sbc.w	r3, r3, r1
 8003ac2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003ad0:	4649      	mov	r1, r9
 8003ad2:	018b      	lsls	r3, r1, #6
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ada:	4641      	mov	r1, r8
 8003adc:	018a      	lsls	r2, r1, #6
 8003ade:	4641      	mov	r1, r8
 8003ae0:	1a51      	subs	r1, r2, r1
 8003ae2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003af8:	4649      	mov	r1, r9
 8003afa:	00cb      	lsls	r3, r1, #3
 8003afc:	4641      	mov	r1, r8
 8003afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b02:	4641      	mov	r1, r8
 8003b04:	00ca      	lsls	r2, r1, #3
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4622      	mov	r2, r4
 8003b0e:	189b      	adds	r3, r3, r2
 8003b10:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b12:	462b      	mov	r3, r5
 8003b14:	460a      	mov	r2, r1
 8003b16:	eb42 0303 	adc.w	r3, r2, r3
 8003b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b28:	4629      	mov	r1, r5
 8003b2a:	024b      	lsls	r3, r1, #9
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b32:	4621      	mov	r1, r4
 8003b34:	024a      	lsls	r2, r1, #9
 8003b36:	4610      	mov	r0, r2
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b48:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003b4c:	f7fd f89c 	bl	8000c88 <__aeabi_uldivmod>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4613      	mov	r3, r2
 8003b56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b5a:	e067      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5c:	4b75      	ldr	r3, [pc, #468]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	099b      	lsrs	r3, r3, #6
 8003b62:	2200      	movs	r2, #0
 8003b64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b68:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b76:	2300      	movs	r3, #0
 8003b78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b7a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003b7e:	4622      	mov	r2, r4
 8003b80:	462b      	mov	r3, r5
 8003b82:	f04f 0000 	mov.w	r0, #0
 8003b86:	f04f 0100 	mov.w	r1, #0
 8003b8a:	0159      	lsls	r1, r3, #5
 8003b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b90:	0150      	lsls	r0, r2, #5
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4621      	mov	r1, r4
 8003b98:	1a51      	subs	r1, r2, r1
 8003b9a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	018b      	lsls	r3, r1, #6
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bba:	4641      	mov	r1, r8
 8003bbc:	018a      	lsls	r2, r1, #6
 8003bbe:	4641      	mov	r1, r8
 8003bc0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bd6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bde:	4692      	mov	sl, r2
 8003be0:	469b      	mov	fp, r3
 8003be2:	4623      	mov	r3, r4
 8003be4:	eb1a 0303 	adds.w	r3, sl, r3
 8003be8:	623b      	str	r3, [r7, #32]
 8003bea:	462b      	mov	r3, r5
 8003bec:	eb4b 0303 	adc.w	r3, fp, r3
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003bfe:	4629      	mov	r1, r5
 8003c00:	028b      	lsls	r3, r1, #10
 8003c02:	4621      	mov	r1, r4
 8003c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c08:	4621      	mov	r1, r4
 8003c0a:	028a      	lsls	r2, r1, #10
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c14:	2200      	movs	r2, #0
 8003c16:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c18:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c1e:	f7fd f833 	bl	8000c88 <__aeabi_uldivmod>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4613      	mov	r3, r2
 8003c28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c2c:	4b41      	ldr	r3, [pc, #260]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	0c1b      	lsrs	r3, r3, #16
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	3301      	adds	r3, #1
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c4e:	e0eb      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c50:	4b38      	ldr	r3, [pc, #224]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c5c:	4b35      	ldr	r3, [pc, #212]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d06b      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c68:	4b32      	ldr	r3, [pc, #200]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	2200      	movs	r2, #0
 8003c70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c80:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003c84:	4622      	mov	r2, r4
 8003c86:	462b      	mov	r3, r5
 8003c88:	f04f 0000 	mov.w	r0, #0
 8003c8c:	f04f 0100 	mov.w	r1, #0
 8003c90:	0159      	lsls	r1, r3, #5
 8003c92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c96:	0150      	lsls	r0, r2, #5
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	1a51      	subs	r1, r2, r1
 8003ca0:	61b9      	str	r1, [r7, #24]
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003cb6:	4659      	mov	r1, fp
 8003cb8:	018b      	lsls	r3, r1, #6
 8003cba:	4651      	mov	r1, sl
 8003cbc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cc0:	4651      	mov	r1, sl
 8003cc2:	018a      	lsls	r2, r1, #6
 8003cc4:	4651      	mov	r1, sl
 8003cc6:	ebb2 0801 	subs.w	r8, r2, r1
 8003cca:	4659      	mov	r1, fp
 8003ccc:	eb63 0901 	sbc.w	r9, r3, r1
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cdc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ce0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ce4:	4690      	mov	r8, r2
 8003ce6:	4699      	mov	r9, r3
 8003ce8:	4623      	mov	r3, r4
 8003cea:	eb18 0303 	adds.w	r3, r8, r3
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	462b      	mov	r3, r5
 8003cf2:	eb49 0303 	adc.w	r3, r9, r3
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003d04:	4629      	mov	r1, r5
 8003d06:	024b      	lsls	r3, r1, #9
 8003d08:	4621      	mov	r1, r4
 8003d0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d0e:	4621      	mov	r1, r4
 8003d10:	024a      	lsls	r2, r1, #9
 8003d12:	4610      	mov	r0, r2
 8003d14:	4619      	mov	r1, r3
 8003d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d1e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003d20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d24:	f7fc ffb0 	bl	8000c88 <__aeabi_uldivmod>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d32:	e065      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x420>
 8003d34:	40023800 	.word	0x40023800
 8003d38:	00f42400 	.word	0x00f42400
 8003d3c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d40:	4b3d      	ldr	r3, [pc, #244]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	099b      	lsrs	r3, r3, #6
 8003d46:	2200      	movs	r2, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d50:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d52:	2300      	movs	r3, #0
 8003d54:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d56:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003d5a:	4642      	mov	r2, r8
 8003d5c:	464b      	mov	r3, r9
 8003d5e:	f04f 0000 	mov.w	r0, #0
 8003d62:	f04f 0100 	mov.w	r1, #0
 8003d66:	0159      	lsls	r1, r3, #5
 8003d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d6c:	0150      	lsls	r0, r2, #5
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4641      	mov	r1, r8
 8003d74:	1a51      	subs	r1, r2, r1
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	4649      	mov	r1, r9
 8003d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d8c:	4659      	mov	r1, fp
 8003d8e:	018b      	lsls	r3, r1, #6
 8003d90:	4651      	mov	r1, sl
 8003d92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d96:	4651      	mov	r1, sl
 8003d98:	018a      	lsls	r2, r1, #6
 8003d9a:	4651      	mov	r1, sl
 8003d9c:	1a54      	subs	r4, r2, r1
 8003d9e:	4659      	mov	r1, fp
 8003da0:	eb63 0501 	sbc.w	r5, r3, r1
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	00eb      	lsls	r3, r5, #3
 8003dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003db2:	00e2      	lsls	r2, r4, #3
 8003db4:	4614      	mov	r4, r2
 8003db6:	461d      	mov	r5, r3
 8003db8:	4643      	mov	r3, r8
 8003dba:	18e3      	adds	r3, r4, r3
 8003dbc:	603b      	str	r3, [r7, #0]
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	eb45 0303 	adc.w	r3, r5, r3
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	028b      	lsls	r3, r1, #10
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ddc:	4621      	mov	r1, r4
 8003dde:	028a      	lsls	r2, r1, #10
 8003de0:	4610      	mov	r0, r2
 8003de2:	4619      	mov	r1, r3
 8003de4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003de8:	2200      	movs	r2, #0
 8003dea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003dee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003df2:	f7fc ff49 	bl	8000c88 <__aeabi_uldivmod>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e00:	4b0d      	ldr	r3, [pc, #52]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	0f1b      	lsrs	r3, r3, #28
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e1e:	e003      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e20:	4b06      	ldr	r3, [pc, #24]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	37b8      	adds	r7, #184	@ 0xb8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e36:	bf00      	nop
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	00f42400 	.word	0x00f42400

08003e40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e28d      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8083 	beq.w	8003f66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e60:	4b94      	ldr	r3, [pc, #592]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d019      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e6c:	4b91      	ldr	r3, [pc, #580]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d106      	bne.n	8003e86 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e78:	4b8e      	ldr	r3, [pc, #568]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e84:	d00c      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e86:	4b8b      	ldr	r3, [pc, #556]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	d112      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e92:	4b88      	ldr	r3, [pc, #544]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea0:	4b84      	ldr	r3, [pc, #528]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d05b      	beq.n	8003f64 <HAL_RCC_OscConfig+0x124>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d157      	bne.n	8003f64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e25a      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec0:	d106      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x90>
 8003ec2:	4b7c      	ldr	r3, [pc, #496]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a7b      	ldr	r2, [pc, #492]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e01d      	b.n	8003f0c <HAL_RCC_OscConfig+0xcc>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xb4>
 8003eda:	4b76      	ldr	r3, [pc, #472]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a75      	ldr	r2, [pc, #468]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b73      	ldr	r3, [pc, #460]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a72      	ldr	r2, [pc, #456]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e00b      	b.n	8003f0c <HAL_RCC_OscConfig+0xcc>
 8003ef4:	4b6f      	ldr	r3, [pc, #444]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a6e      	ldr	r2, [pc, #440]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003efa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b6c      	ldr	r3, [pc, #432]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a6b      	ldr	r2, [pc, #428]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d013      	beq.n	8003f3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fe f936 	bl	8002184 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f1c:	f7fe f932 	bl	8002184 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	@ 0x64
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e21f      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	4b61      	ldr	r3, [pc, #388]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0xdc>
 8003f3a:	e014      	b.n	8003f66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fe f922 	bl	8002184 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fe f91e 	bl	8002184 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	@ 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e20b      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f56:	4b57      	ldr	r3, [pc, #348]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x104>
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d06f      	beq.n	8004052 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f72:	4b50      	ldr	r3, [pc, #320]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d017      	beq.n	8003fae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f7e:	4b4d      	ldr	r3, [pc, #308]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d105      	bne.n	8003f96 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f8a:	4b4a      	ldr	r3, [pc, #296]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00b      	beq.n	8003fae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f96:	4b47      	ldr	r3, [pc, #284]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	d11c      	bne.n	8003fdc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa2:	4b44      	ldr	r3, [pc, #272]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d116      	bne.n	8003fdc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fae:	4b41      	ldr	r3, [pc, #260]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x186>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e1d3      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4937      	ldr	r1, [pc, #220]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fda:	e03a      	b.n	8004052 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d020      	beq.n	8004026 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe4:	4b34      	ldr	r3, [pc, #208]	@ (80040b8 <HAL_RCC_OscConfig+0x278>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fea:	f7fe f8cb 	bl	8002184 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff2:	f7fe f8c7 	bl	8002184 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e1b4      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004004:	4b2b      	ldr	r3, [pc, #172]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004010:	4b28      	ldr	r3, [pc, #160]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4925      	ldr	r1, [pc, #148]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004020:	4313      	orrs	r3, r2
 8004022:	600b      	str	r3, [r1, #0]
 8004024:	e015      	b.n	8004052 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004026:	4b24      	ldr	r3, [pc, #144]	@ (80040b8 <HAL_RCC_OscConfig+0x278>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fe f8aa 	bl	8002184 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004034:	f7fe f8a6 	bl	8002184 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e193      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004046:	4b1b      	ldr	r3, [pc, #108]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d036      	beq.n	80040cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d016      	beq.n	8004094 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004066:	4b15      	ldr	r3, [pc, #84]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8004068:	2201      	movs	r2, #1
 800406a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fe f88a 	bl	8002184 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004074:	f7fe f886 	bl	8002184 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e173      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004086:	4b0b      	ldr	r3, [pc, #44]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x234>
 8004092:	e01b      	b.n	80040cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004094:	4b09      	ldr	r3, [pc, #36]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409a:	f7fe f873 	bl	8002184 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a0:	e00e      	b.n	80040c0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a2:	f7fe f86f 	bl	8002184 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d907      	bls.n	80040c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e15c      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 80040b4:	40023800 	.word	0x40023800
 80040b8:	42470000 	.word	0x42470000
 80040bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c0:	4b8a      	ldr	r3, [pc, #552]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ea      	bne.n	80040a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8097 	beq.w	8004208 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040da:	2300      	movs	r3, #0
 80040dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040de:	4b83      	ldr	r3, [pc, #524]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10f      	bne.n	800410a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	4b7f      	ldr	r3, [pc, #508]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	4a7e      	ldr	r2, [pc, #504]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040fa:	4b7c      	ldr	r3, [pc, #496]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004106:	2301      	movs	r3, #1
 8004108:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410a:	4b79      	ldr	r3, [pc, #484]	@ (80042f0 <HAL_RCC_OscConfig+0x4b0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d118      	bne.n	8004148 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004116:	4b76      	ldr	r3, [pc, #472]	@ (80042f0 <HAL_RCC_OscConfig+0x4b0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a75      	ldr	r2, [pc, #468]	@ (80042f0 <HAL_RCC_OscConfig+0x4b0>)
 800411c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004122:	f7fe f82f 	bl	8002184 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800412a:	f7fe f82b 	bl	8002184 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e118      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413c:	4b6c      	ldr	r3, [pc, #432]	@ (80042f0 <HAL_RCC_OscConfig+0x4b0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d106      	bne.n	800415e <HAL_RCC_OscConfig+0x31e>
 8004150:	4b66      	ldr	r3, [pc, #408]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004154:	4a65      	ldr	r2, [pc, #404]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	6713      	str	r3, [r2, #112]	@ 0x70
 800415c:	e01c      	b.n	8004198 <HAL_RCC_OscConfig+0x358>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b05      	cmp	r3, #5
 8004164:	d10c      	bne.n	8004180 <HAL_RCC_OscConfig+0x340>
 8004166:	4b61      	ldr	r3, [pc, #388]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416a:	4a60      	ldr	r2, [pc, #384]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 800416c:	f043 0304 	orr.w	r3, r3, #4
 8004170:	6713      	str	r3, [r2, #112]	@ 0x70
 8004172:	4b5e      	ldr	r3, [pc, #376]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004176:	4a5d      	ldr	r2, [pc, #372]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	6713      	str	r3, [r2, #112]	@ 0x70
 800417e:	e00b      	b.n	8004198 <HAL_RCC_OscConfig+0x358>
 8004180:	4b5a      	ldr	r3, [pc, #360]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004184:	4a59      	ldr	r2, [pc, #356]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	6713      	str	r3, [r2, #112]	@ 0x70
 800418c:	4b57      	ldr	r3, [pc, #348]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 800418e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004190:	4a56      	ldr	r2, [pc, #344]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004192:	f023 0304 	bic.w	r3, r3, #4
 8004196:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d015      	beq.n	80041cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a0:	f7fd fff0 	bl	8002184 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a6:	e00a      	b.n	80041be <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a8:	f7fd ffec 	bl	8002184 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e0d7      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041be:	4b4b      	ldr	r3, [pc, #300]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80041c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0ee      	beq.n	80041a8 <HAL_RCC_OscConfig+0x368>
 80041ca:	e014      	b.n	80041f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041cc:	f7fd ffda 	bl	8002184 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d2:	e00a      	b.n	80041ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d4:	f7fd ffd6 	bl	8002184 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e0c1      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ea:	4b40      	ldr	r3, [pc, #256]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1ee      	bne.n	80041d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d105      	bne.n	8004208 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fc:	4b3b      	ldr	r3, [pc, #236]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	4a3a      	ldr	r2, [pc, #232]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004206:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80ad 	beq.w	800436c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004212:	4b36      	ldr	r3, [pc, #216]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
 800421a:	2b08      	cmp	r3, #8
 800421c:	d060      	beq.n	80042e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d145      	bne.n	80042b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004226:	4b33      	ldr	r3, [pc, #204]	@ (80042f4 <HAL_RCC_OscConfig+0x4b4>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fd ffaa 	bl	8002184 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004234:	f7fd ffa6 	bl	8002184 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e093      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004246:	4b29      	ldr	r3, [pc, #164]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	019b      	lsls	r3, r3, #6
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	3b01      	subs	r3, #1
 800426c:	041b      	lsls	r3, r3, #16
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004274:	061b      	lsls	r3, r3, #24
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427c:	071b      	lsls	r3, r3, #28
 800427e:	491b      	ldr	r1, [pc, #108]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004284:	4b1b      	ldr	r3, [pc, #108]	@ (80042f4 <HAL_RCC_OscConfig+0x4b4>)
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7fd ff7b 	bl	8002184 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004292:	f7fd ff77 	bl	8002184 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e064      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a4:	4b11      	ldr	r3, [pc, #68]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCC_OscConfig+0x452>
 80042b0:	e05c      	b.n	800436c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b2:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <HAL_RCC_OscConfig+0x4b4>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fd ff64 	bl	8002184 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c0:	f7fd ff60 	bl	8002184 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e04d      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d2:	4b06      	ldr	r3, [pc, #24]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0x480>
 80042de:	e045      	b.n	800436c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d107      	bne.n	80042f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e040      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 80042ec:	40023800 	.word	0x40023800
 80042f0:	40007000 	.word	0x40007000
 80042f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004378 <HAL_RCC_OscConfig+0x538>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d030      	beq.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d129      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431e:	429a      	cmp	r2, r3
 8004320:	d122      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004328:	4013      	ands	r3, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800432e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004330:	4293      	cmp	r3, r2
 8004332:	d119      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433e:	085b      	lsrs	r3, r3, #1
 8004340:	3b01      	subs	r3, #1
 8004342:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d10f      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004352:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d107      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004362:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d001      	beq.n	800436c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800

0800437c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e07b      	b.n	8004486 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	2b00      	cmp	r3, #0
 8004394:	d108      	bne.n	80043a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800439e:	d009      	beq.n	80043b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	61da      	str	r2, [r3, #28]
 80043a6:	e005      	b.n	80043b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fd fbe8 	bl	8001ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004438:	ea42 0103 	orr.w	r1, r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004440:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	f003 0104 	and.w	r1, r3, #4
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	f003 0210 	and.w	r2, r3, #16
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004474:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b088      	sub	sp, #32
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	603b      	str	r3, [r7, #0]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800449e:	f7fd fe71 	bl	8002184 <HAL_GetTick>
 80044a2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d001      	beq.n	80044b8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
 80044b6:	e12a      	b.n	800470e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_SPI_Transmit+0x36>
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e122      	b.n	800470e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_SPI_Transmit+0x48>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e11b      	b.n	800470e <HAL_SPI_Transmit+0x280>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2203      	movs	r2, #3
 80044e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	88fa      	ldrh	r2, [r7, #6]
 80044fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004524:	d10f      	bne.n	8004546 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004534:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004544:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004550:	2b40      	cmp	r3, #64	@ 0x40
 8004552:	d007      	beq.n	8004564 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800456c:	d152      	bne.n	8004614 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_SPI_Transmit+0xee>
 8004576:	8b7b      	ldrh	r3, [r7, #26]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d145      	bne.n	8004608 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004580:	881a      	ldrh	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458c:	1c9a      	adds	r2, r3, #2
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045a0:	e032      	b.n	8004608 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d112      	bne.n	80045d6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b4:	881a      	ldrh	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c0:	1c9a      	adds	r2, r3, #2
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045d4:	e018      	b.n	8004608 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045d6:	f7fd fdd5 	bl	8002184 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d803      	bhi.n	80045ee <HAL_SPI_Transmit+0x160>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ec:	d102      	bne.n	80045f4 <HAL_SPI_Transmit+0x166>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d109      	bne.n	8004608 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e082      	b.n	800470e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1c7      	bne.n	80045a2 <HAL_SPI_Transmit+0x114>
 8004612:	e053      	b.n	80046bc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_SPI_Transmit+0x194>
 800461c:	8b7b      	ldrh	r3, [r7, #26]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d147      	bne.n	80046b2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004648:	e033      	b.n	80046b2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b02      	cmp	r3, #2
 8004656:	d113      	bne.n	8004680 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	7812      	ldrb	r2, [r2, #0]
 8004664:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800467e:	e018      	b.n	80046b2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004680:	f7fd fd80 	bl	8002184 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d803      	bhi.n	8004698 <HAL_SPI_Transmit+0x20a>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d102      	bne.n	800469e <HAL_SPI_Transmit+0x210>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e02d      	b.n	800470e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1c6      	bne.n	800464a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	6839      	ldr	r1, [r7, #0]
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f8b1 	bl	8004828 <SPI_EndRxTxTransaction>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800470c:	2300      	movs	r3, #0
  }
}
 800470e:	4618      	mov	r0, r3
 8004710:	3720      	adds	r7, #32
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	4613      	mov	r3, r2
 8004726:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004728:	f7fd fd2c 	bl	8002184 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	4413      	add	r3, r2
 8004736:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004738:	f7fd fd24 	bl	8002184 <HAL_GetTick>
 800473c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800473e:	4b39      	ldr	r3, [pc, #228]	@ (8004824 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	015b      	lsls	r3, r3, #5
 8004744:	0d1b      	lsrs	r3, r3, #20
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	fb02 f303 	mul.w	r3, r2, r3
 800474c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800474e:	e055      	b.n	80047fc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004756:	d051      	beq.n	80047fc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004758:	f7fd fd14 	bl	8002184 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	429a      	cmp	r2, r3
 8004766:	d902      	bls.n	800476e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d13d      	bne.n	80047ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800477c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004786:	d111      	bne.n	80047ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004790:	d004      	beq.n	800479c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800479a:	d107      	bne.n	80047ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047b4:	d10f      	bne.n	80047d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e018      	b.n	800481c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d102      	bne.n	80047f6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]
 80047f4:	e002      	b.n	80047fc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4013      	ands	r3, r2
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	429a      	cmp	r2, r3
 800480a:	bf0c      	ite	eq
 800480c:	2301      	moveq	r3, #1
 800480e:	2300      	movne	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	429a      	cmp	r2, r3
 8004818:	d19a      	bne.n	8004750 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3720      	adds	r7, #32
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	2000002c 	.word	0x2000002c

08004828 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af02      	add	r7, sp, #8
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2201      	movs	r2, #1
 800483c:	2102      	movs	r1, #2
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f7ff ff6a 	bl	8004718 <SPI_WaitFlagStateUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484e:	f043 0220 	orr.w	r2, r3, #32
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e032      	b.n	80048c0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800485a:	4b1b      	ldr	r3, [pc, #108]	@ (80048c8 <SPI_EndRxTxTransaction+0xa0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1b      	ldr	r2, [pc, #108]	@ (80048cc <SPI_EndRxTxTransaction+0xa4>)
 8004860:	fba2 2303 	umull	r2, r3, r2, r3
 8004864:	0d5b      	lsrs	r3, r3, #21
 8004866:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800486a:	fb02 f303 	mul.w	r3, r2, r3
 800486e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004878:	d112      	bne.n	80048a0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2200      	movs	r2, #0
 8004882:	2180      	movs	r1, #128	@ 0x80
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7ff ff47 	bl	8004718 <SPI_WaitFlagStateUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d016      	beq.n	80048be <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004894:	f043 0220 	orr.w	r2, r3, #32
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e00f      	b.n	80048c0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b6:	2b80      	cmp	r3, #128	@ 0x80
 80048b8:	d0f2      	beq.n	80048a0 <SPI_EndRxTxTransaction+0x78>
 80048ba:	e000      	b.n	80048be <SPI_EndRxTxTransaction+0x96>
        break;
 80048bc:	bf00      	nop
  }

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	2000002c 	.word	0x2000002c
 80048cc:	165e9f81 	.word	0x165e9f81

080048d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e041      	b.n	8004966 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd fb1a 	bl	8001f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3304      	adds	r3, #4
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f000 f9c0 	bl	8004c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b01      	cmp	r3, #1
 8004982:	d001      	beq.n	8004988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e04e      	b.n	8004a26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a23      	ldr	r2, [pc, #140]	@ (8004a34 <HAL_TIM_Base_Start_IT+0xc4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d022      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049b2:	d01d      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a38 <HAL_TIM_Base_Start_IT+0xc8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d018      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a3c <HAL_TIM_Base_Start_IT+0xcc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a40 <HAL_TIM_Base_Start_IT+0xd0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00e      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a44 <HAL_TIM_Base_Start_IT+0xd4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d009      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a19      	ldr	r2, [pc, #100]	@ (8004a48 <HAL_TIM_Base_Start_IT+0xd8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a18      	ldr	r2, [pc, #96]	@ (8004a4c <HAL_TIM_Base_Start_IT+0xdc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d111      	bne.n	8004a14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b06      	cmp	r3, #6
 8004a00:	d010      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0201 	orr.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a12:	e007      	b.n	8004a24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40010000 	.word	0x40010000
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	40000800 	.word	0x40000800
 8004a40:	40000c00 	.word	0x40000c00
 8004a44:	40010400 	.word	0x40010400
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40001800 	.word	0x40001800

08004a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d020      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01b      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0202 	mvn.w	r2, #2
 8004a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f8dc 	bl	8004c58 <HAL_TIM_IC_CaptureCallback>
 8004aa0:	e005      	b.n	8004aae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f8ce 	bl	8004c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f8df 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d020      	beq.n	8004b00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01b      	beq.n	8004b00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0204 	mvn.w	r2, #4
 8004ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f8b6 	bl	8004c58 <HAL_TIM_IC_CaptureCallback>
 8004aec:	e005      	b.n	8004afa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f8a8 	bl	8004c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f8b9 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d020      	beq.n	8004b4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01b      	beq.n	8004b4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0208 	mvn.w	r2, #8
 8004b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2204      	movs	r2, #4
 8004b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f890 	bl	8004c58 <HAL_TIM_IC_CaptureCallback>
 8004b38:	e005      	b.n	8004b46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f882 	bl	8004c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f893 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d020      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01b      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0210 	mvn.w	r2, #16
 8004b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f86a 	bl	8004c58 <HAL_TIM_IC_CaptureCallback>
 8004b84:	e005      	b.n	8004b92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f85c 	bl	8004c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f86d 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00c      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0201 	mvn.w	r2, #1
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f83a 	bl	8004c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00c      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f90a 	bl	8004df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00c      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d007      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f83e 	bl	8004c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00c      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0220 	mvn.w	r2, #32
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f8dc 	bl	8004de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c28:	bf00      	nop
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a43      	ldr	r2, [pc, #268]	@ (8004db4 <TIM_Base_SetConfig+0x120>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d013      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb2:	d00f      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a40      	ldr	r2, [pc, #256]	@ (8004db8 <TIM_Base_SetConfig+0x124>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00b      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a3f      	ldr	r2, [pc, #252]	@ (8004dbc <TIM_Base_SetConfig+0x128>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d007      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a3e      	ldr	r2, [pc, #248]	@ (8004dc0 <TIM_Base_SetConfig+0x12c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d003      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a3d      	ldr	r2, [pc, #244]	@ (8004dc4 <TIM_Base_SetConfig+0x130>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d108      	bne.n	8004ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a32      	ldr	r2, [pc, #200]	@ (8004db4 <TIM_Base_SetConfig+0x120>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d02b      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf4:	d027      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a2f      	ldr	r2, [pc, #188]	@ (8004db8 <TIM_Base_SetConfig+0x124>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d023      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2e      	ldr	r2, [pc, #184]	@ (8004dbc <TIM_Base_SetConfig+0x128>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d01f      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc0 <TIM_Base_SetConfig+0x12c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01b      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2c      	ldr	r2, [pc, #176]	@ (8004dc4 <TIM_Base_SetConfig+0x130>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d017      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc8 <TIM_Base_SetConfig+0x134>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d013      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a2a      	ldr	r2, [pc, #168]	@ (8004dcc <TIM_Base_SetConfig+0x138>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00f      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a29      	ldr	r2, [pc, #164]	@ (8004dd0 <TIM_Base_SetConfig+0x13c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00b      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a28      	ldr	r2, [pc, #160]	@ (8004dd4 <TIM_Base_SetConfig+0x140>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d007      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a27      	ldr	r2, [pc, #156]	@ (8004dd8 <TIM_Base_SetConfig+0x144>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d003      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a26      	ldr	r2, [pc, #152]	@ (8004ddc <TIM_Base_SetConfig+0x148>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d108      	bne.n	8004d58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a0e      	ldr	r2, [pc, #56]	@ (8004db4 <TIM_Base_SetConfig+0x120>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d003      	beq.n	8004d86 <TIM_Base_SetConfig+0xf2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a10      	ldr	r2, [pc, #64]	@ (8004dc4 <TIM_Base_SetConfig+0x130>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d103      	bne.n	8004d8e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f043 0204 	orr.w	r2, r3, #4
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	601a      	str	r2, [r3, #0]
}
 8004da6:	bf00      	nop
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40010000 	.word	0x40010000
 8004db8:	40000400 	.word	0x40000400
 8004dbc:	40000800 	.word	0x40000800
 8004dc0:	40000c00 	.word	0x40000c00
 8004dc4:	40010400 	.word	0x40010400
 8004dc8:	40014000 	.word	0x40014000
 8004dcc:	40014400 	.word	0x40014400
 8004dd0:	40014800 	.word	0x40014800
 8004dd4:	40001800 	.word	0x40001800
 8004dd8:	40001c00 	.word	0x40001c00
 8004ddc:	40002000 	.word	0x40002000

08004de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e042      	b.n	8004ea0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fd f8d0 	bl	8001fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2224      	movs	r2, #36	@ 0x24
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f973 	bl	8005138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695a      	ldr	r2, [r3, #20]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08a      	sub	sp, #40	@ 0x28
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d175      	bne.n	8004fb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_UART_Transmit+0x2c>
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e06e      	b.n	8004fb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2221      	movs	r2, #33	@ 0x21
 8004ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ee6:	f7fd f94d 	bl	8002184 <HAL_GetTick>
 8004eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	88fa      	ldrh	r2, [r7, #6]
 8004ef0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	88fa      	ldrh	r2, [r7, #6]
 8004ef6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f00:	d108      	bne.n	8004f14 <HAL_UART_Transmit+0x6c>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	e003      	b.n	8004f1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f1c:	e02e      	b.n	8004f7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2200      	movs	r2, #0
 8004f26:	2180      	movs	r1, #128	@ 0x80
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 f848 	bl	8004fbe <UART_WaitOnFlagUntilTimeout>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e03a      	b.n	8004fb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10b      	bne.n	8004f5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	3302      	adds	r3, #2
 8004f5a:	61bb      	str	r3, [r7, #24]
 8004f5c:	e007      	b.n	8004f6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	781a      	ldrb	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1cb      	bne.n	8004f1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2140      	movs	r1, #64	@ 0x40
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f814 	bl	8004fbe <UART_WaitOnFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e006      	b.n	8004fb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	e000      	b.n	8004fb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fb4:	2302      	movs	r3, #2
  }
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3720      	adds	r7, #32
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b086      	sub	sp, #24
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fce:	e03b      	b.n	8005048 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd6:	d037      	beq.n	8005048 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd8:	f7fd f8d4 	bl	8002184 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	6a3a      	ldr	r2, [r7, #32]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d302      	bcc.n	8004fee <UART_WaitOnFlagUntilTimeout+0x30>
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e03a      	b.n	8005068 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d023      	beq.n	8005048 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b80      	cmp	r3, #128	@ 0x80
 8005004:	d020      	beq.n	8005048 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b40      	cmp	r3, #64	@ 0x40
 800500a:	d01d      	beq.n	8005048 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b08      	cmp	r3, #8
 8005018:	d116      	bne.n	8005048 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f81d 	bl	8005070 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2208      	movs	r2, #8
 800503a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e00f      	b.n	8005068 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4013      	ands	r3, r2
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	429a      	cmp	r2, r3
 8005056:	bf0c      	ite	eq
 8005058:	2301      	moveq	r3, #1
 800505a:	2300      	movne	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	429a      	cmp	r2, r3
 8005064:	d0b4      	beq.n	8004fd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005070:	b480      	push	{r7}
 8005072:	b095      	sub	sp, #84	@ 0x54
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800508e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	330c      	adds	r3, #12
 8005096:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005098:	643a      	str	r2, [r7, #64]	@ 0x40
 800509a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800509e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050a0:	e841 2300 	strex	r3, r2, [r1]
 80050a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e5      	bne.n	8005078 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3314      	adds	r3, #20
 80050b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f023 0301 	bic.w	r3, r3, #1
 80050c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3314      	adds	r3, #20
 80050ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e5      	bne.n	80050ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d119      	bne.n	800511c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	330c      	adds	r3, #12
 80050ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f023 0310 	bic.w	r3, r3, #16
 80050fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	330c      	adds	r3, #12
 8005106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005108:	61ba      	str	r2, [r7, #24]
 800510a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	6979      	ldr	r1, [r7, #20]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	613b      	str	r3, [r7, #16]
   return(result);
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e5      	bne.n	80050e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800512a:	bf00      	nop
 800512c:	3754      	adds	r7, #84	@ 0x54
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
	...

08005138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800513c:	b0c0      	sub	sp, #256	@ 0x100
 800513e:	af00      	add	r7, sp, #0
 8005140:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005154:	68d9      	ldr	r1, [r3, #12]
 8005156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	ea40 0301 	orr.w	r3, r0, r1
 8005160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	431a      	orrs	r2, r3
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	431a      	orrs	r2, r3
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005190:	f021 010c 	bic.w	r1, r1, #12
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800519e:	430b      	orrs	r3, r1
 80051a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b2:	6999      	ldr	r1, [r3, #24]
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	ea40 0301 	orr.w	r3, r0, r1
 80051be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b8f      	ldr	r3, [pc, #572]	@ (8005404 <UART_SetConfig+0x2cc>)
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d005      	beq.n	80051d8 <UART_SetConfig+0xa0>
 80051cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	4b8d      	ldr	r3, [pc, #564]	@ (8005408 <UART_SetConfig+0x2d0>)
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d104      	bne.n	80051e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051d8:	f7fe fbee 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 80051dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80051e0:	e003      	b.n	80051ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051e2:	f7fe fbd5 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 80051e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051f4:	f040 810c 	bne.w	8005410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051fc:	2200      	movs	r2, #0
 80051fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005202:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800520a:	4622      	mov	r2, r4
 800520c:	462b      	mov	r3, r5
 800520e:	1891      	adds	r1, r2, r2
 8005210:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005212:	415b      	adcs	r3, r3
 8005214:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800521a:	4621      	mov	r1, r4
 800521c:	eb12 0801 	adds.w	r8, r2, r1
 8005220:	4629      	mov	r1, r5
 8005222:	eb43 0901 	adc.w	r9, r3, r1
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800523a:	4690      	mov	r8, r2
 800523c:	4699      	mov	r9, r3
 800523e:	4623      	mov	r3, r4
 8005240:	eb18 0303 	adds.w	r3, r8, r3
 8005244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005248:	462b      	mov	r3, r5
 800524a:	eb49 0303 	adc.w	r3, r9, r3
 800524e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800525e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005266:	460b      	mov	r3, r1
 8005268:	18db      	adds	r3, r3, r3
 800526a:	653b      	str	r3, [r7, #80]	@ 0x50
 800526c:	4613      	mov	r3, r2
 800526e:	eb42 0303 	adc.w	r3, r2, r3
 8005272:	657b      	str	r3, [r7, #84]	@ 0x54
 8005274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800527c:	f7fb fd04 	bl	8000c88 <__aeabi_uldivmod>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4b61      	ldr	r3, [pc, #388]	@ (800540c <UART_SetConfig+0x2d4>)
 8005286:	fba3 2302 	umull	r2, r3, r3, r2
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	011c      	lsls	r4, r3, #4
 800528e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005292:	2200      	movs	r2, #0
 8005294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005298:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800529c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80052a0:	4642      	mov	r2, r8
 80052a2:	464b      	mov	r3, r9
 80052a4:	1891      	adds	r1, r2, r2
 80052a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052a8:	415b      	adcs	r3, r3
 80052aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052b0:	4641      	mov	r1, r8
 80052b2:	eb12 0a01 	adds.w	sl, r2, r1
 80052b6:	4649      	mov	r1, r9
 80052b8:	eb43 0b01 	adc.w	fp, r3, r1
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052d0:	4692      	mov	sl, r2
 80052d2:	469b      	mov	fp, r3
 80052d4:	4643      	mov	r3, r8
 80052d6:	eb1a 0303 	adds.w	r3, sl, r3
 80052da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052de:	464b      	mov	r3, r9
 80052e0:	eb4b 0303 	adc.w	r3, fp, r3
 80052e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80052f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80052fc:	460b      	mov	r3, r1
 80052fe:	18db      	adds	r3, r3, r3
 8005300:	643b      	str	r3, [r7, #64]	@ 0x40
 8005302:	4613      	mov	r3, r2
 8005304:	eb42 0303 	adc.w	r3, r2, r3
 8005308:	647b      	str	r3, [r7, #68]	@ 0x44
 800530a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800530e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005312:	f7fb fcb9 	bl	8000c88 <__aeabi_uldivmod>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4611      	mov	r1, r2
 800531c:	4b3b      	ldr	r3, [pc, #236]	@ (800540c <UART_SetConfig+0x2d4>)
 800531e:	fba3 2301 	umull	r2, r3, r3, r1
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	2264      	movs	r2, #100	@ 0x64
 8005326:	fb02 f303 	mul.w	r3, r2, r3
 800532a:	1acb      	subs	r3, r1, r3
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005332:	4b36      	ldr	r3, [pc, #216]	@ (800540c <UART_SetConfig+0x2d4>)
 8005334:	fba3 2302 	umull	r2, r3, r3, r2
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005340:	441c      	add	r4, r3
 8005342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005346:	2200      	movs	r2, #0
 8005348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800534c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005354:	4642      	mov	r2, r8
 8005356:	464b      	mov	r3, r9
 8005358:	1891      	adds	r1, r2, r2
 800535a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800535c:	415b      	adcs	r3, r3
 800535e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005364:	4641      	mov	r1, r8
 8005366:	1851      	adds	r1, r2, r1
 8005368:	6339      	str	r1, [r7, #48]	@ 0x30
 800536a:	4649      	mov	r1, r9
 800536c:	414b      	adcs	r3, r1
 800536e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800537c:	4659      	mov	r1, fp
 800537e:	00cb      	lsls	r3, r1, #3
 8005380:	4651      	mov	r1, sl
 8005382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005386:	4651      	mov	r1, sl
 8005388:	00ca      	lsls	r2, r1, #3
 800538a:	4610      	mov	r0, r2
 800538c:	4619      	mov	r1, r3
 800538e:	4603      	mov	r3, r0
 8005390:	4642      	mov	r2, r8
 8005392:	189b      	adds	r3, r3, r2
 8005394:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005398:	464b      	mov	r3, r9
 800539a:	460a      	mov	r2, r1
 800539c:	eb42 0303 	adc.w	r3, r2, r3
 80053a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053b8:	460b      	mov	r3, r1
 80053ba:	18db      	adds	r3, r3, r3
 80053bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053be:	4613      	mov	r3, r2
 80053c0:	eb42 0303 	adc.w	r3, r2, r3
 80053c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80053ce:	f7fb fc5b 	bl	8000c88 <__aeabi_uldivmod>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4b0d      	ldr	r3, [pc, #52]	@ (800540c <UART_SetConfig+0x2d4>)
 80053d8:	fba3 1302 	umull	r1, r3, r3, r2
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	2164      	movs	r1, #100	@ 0x64
 80053e0:	fb01 f303 	mul.w	r3, r1, r3
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	3332      	adds	r3, #50	@ 0x32
 80053ea:	4a08      	ldr	r2, [pc, #32]	@ (800540c <UART_SetConfig+0x2d4>)
 80053ec:	fba2 2303 	umull	r2, r3, r2, r3
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	f003 0207 	and.w	r2, r3, #7
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4422      	add	r2, r4
 80053fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005400:	e106      	b.n	8005610 <UART_SetConfig+0x4d8>
 8005402:	bf00      	nop
 8005404:	40011000 	.word	0x40011000
 8005408:	40011400 	.word	0x40011400
 800540c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005414:	2200      	movs	r2, #0
 8005416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800541a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800541e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005422:	4642      	mov	r2, r8
 8005424:	464b      	mov	r3, r9
 8005426:	1891      	adds	r1, r2, r2
 8005428:	6239      	str	r1, [r7, #32]
 800542a:	415b      	adcs	r3, r3
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24
 800542e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005432:	4641      	mov	r1, r8
 8005434:	1854      	adds	r4, r2, r1
 8005436:	4649      	mov	r1, r9
 8005438:	eb43 0501 	adc.w	r5, r3, r1
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	00eb      	lsls	r3, r5, #3
 8005446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800544a:	00e2      	lsls	r2, r4, #3
 800544c:	4614      	mov	r4, r2
 800544e:	461d      	mov	r5, r3
 8005450:	4643      	mov	r3, r8
 8005452:	18e3      	adds	r3, r4, r3
 8005454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005458:	464b      	mov	r3, r9
 800545a:	eb45 0303 	adc.w	r3, r5, r3
 800545e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800546e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800547e:	4629      	mov	r1, r5
 8005480:	008b      	lsls	r3, r1, #2
 8005482:	4621      	mov	r1, r4
 8005484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005488:	4621      	mov	r1, r4
 800548a:	008a      	lsls	r2, r1, #2
 800548c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005490:	f7fb fbfa 	bl	8000c88 <__aeabi_uldivmod>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4b60      	ldr	r3, [pc, #384]	@ (800561c <UART_SetConfig+0x4e4>)
 800549a:	fba3 2302 	umull	r2, r3, r3, r2
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	011c      	lsls	r4, r3, #4
 80054a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054b4:	4642      	mov	r2, r8
 80054b6:	464b      	mov	r3, r9
 80054b8:	1891      	adds	r1, r2, r2
 80054ba:	61b9      	str	r1, [r7, #24]
 80054bc:	415b      	adcs	r3, r3
 80054be:	61fb      	str	r3, [r7, #28]
 80054c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054c4:	4641      	mov	r1, r8
 80054c6:	1851      	adds	r1, r2, r1
 80054c8:	6139      	str	r1, [r7, #16]
 80054ca:	4649      	mov	r1, r9
 80054cc:	414b      	adcs	r3, r1
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054dc:	4659      	mov	r1, fp
 80054de:	00cb      	lsls	r3, r1, #3
 80054e0:	4651      	mov	r1, sl
 80054e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054e6:	4651      	mov	r1, sl
 80054e8:	00ca      	lsls	r2, r1, #3
 80054ea:	4610      	mov	r0, r2
 80054ec:	4619      	mov	r1, r3
 80054ee:	4603      	mov	r3, r0
 80054f0:	4642      	mov	r2, r8
 80054f2:	189b      	adds	r3, r3, r2
 80054f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054f8:	464b      	mov	r3, r9
 80054fa:	460a      	mov	r2, r1
 80054fc:	eb42 0303 	adc.w	r3, r2, r3
 8005500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800550e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800551c:	4649      	mov	r1, r9
 800551e:	008b      	lsls	r3, r1, #2
 8005520:	4641      	mov	r1, r8
 8005522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005526:	4641      	mov	r1, r8
 8005528:	008a      	lsls	r2, r1, #2
 800552a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800552e:	f7fb fbab 	bl	8000c88 <__aeabi_uldivmod>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4611      	mov	r1, r2
 8005538:	4b38      	ldr	r3, [pc, #224]	@ (800561c <UART_SetConfig+0x4e4>)
 800553a:	fba3 2301 	umull	r2, r3, r3, r1
 800553e:	095b      	lsrs	r3, r3, #5
 8005540:	2264      	movs	r2, #100	@ 0x64
 8005542:	fb02 f303 	mul.w	r3, r2, r3
 8005546:	1acb      	subs	r3, r1, r3
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	3332      	adds	r3, #50	@ 0x32
 800554c:	4a33      	ldr	r2, [pc, #204]	@ (800561c <UART_SetConfig+0x4e4>)
 800554e:	fba2 2303 	umull	r2, r3, r2, r3
 8005552:	095b      	lsrs	r3, r3, #5
 8005554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005558:	441c      	add	r4, r3
 800555a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800555e:	2200      	movs	r2, #0
 8005560:	673b      	str	r3, [r7, #112]	@ 0x70
 8005562:	677a      	str	r2, [r7, #116]	@ 0x74
 8005564:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005568:	4642      	mov	r2, r8
 800556a:	464b      	mov	r3, r9
 800556c:	1891      	adds	r1, r2, r2
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	415b      	adcs	r3, r3
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005578:	4641      	mov	r1, r8
 800557a:	1851      	adds	r1, r2, r1
 800557c:	6039      	str	r1, [r7, #0]
 800557e:	4649      	mov	r1, r9
 8005580:	414b      	adcs	r3, r1
 8005582:	607b      	str	r3, [r7, #4]
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005590:	4659      	mov	r1, fp
 8005592:	00cb      	lsls	r3, r1, #3
 8005594:	4651      	mov	r1, sl
 8005596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800559a:	4651      	mov	r1, sl
 800559c:	00ca      	lsls	r2, r1, #3
 800559e:	4610      	mov	r0, r2
 80055a0:	4619      	mov	r1, r3
 80055a2:	4603      	mov	r3, r0
 80055a4:	4642      	mov	r2, r8
 80055a6:	189b      	adds	r3, r3, r2
 80055a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055aa:	464b      	mov	r3, r9
 80055ac:	460a      	mov	r2, r1
 80055ae:	eb42 0303 	adc.w	r3, r2, r3
 80055b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80055be:	667a      	str	r2, [r7, #100]	@ 0x64
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80055cc:	4649      	mov	r1, r9
 80055ce:	008b      	lsls	r3, r1, #2
 80055d0:	4641      	mov	r1, r8
 80055d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055d6:	4641      	mov	r1, r8
 80055d8:	008a      	lsls	r2, r1, #2
 80055da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80055de:	f7fb fb53 	bl	8000c88 <__aeabi_uldivmod>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4b0d      	ldr	r3, [pc, #52]	@ (800561c <UART_SetConfig+0x4e4>)
 80055e8:	fba3 1302 	umull	r1, r3, r3, r2
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	2164      	movs	r1, #100	@ 0x64
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	3332      	adds	r3, #50	@ 0x32
 80055fa:	4a08      	ldr	r2, [pc, #32]	@ (800561c <UART_SetConfig+0x4e4>)
 80055fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005600:	095b      	lsrs	r3, r3, #5
 8005602:	f003 020f 	and.w	r2, r3, #15
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4422      	add	r2, r4
 800560e:	609a      	str	r2, [r3, #8]
}
 8005610:	bf00      	nop
 8005612:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005616:	46bd      	mov	sp, r7
 8005618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800561c:	51eb851f 	.word	0x51eb851f

08005620 <srand>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4b10      	ldr	r3, [pc, #64]	@ (8005664 <srand+0x44>)
 8005624:	681d      	ldr	r5, [r3, #0]
 8005626:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005628:	4604      	mov	r4, r0
 800562a:	b9b3      	cbnz	r3, 800565a <srand+0x3a>
 800562c:	2018      	movs	r0, #24
 800562e:	f001 fd35 	bl	800709c <malloc>
 8005632:	4602      	mov	r2, r0
 8005634:	6328      	str	r0, [r5, #48]	@ 0x30
 8005636:	b920      	cbnz	r0, 8005642 <srand+0x22>
 8005638:	4b0b      	ldr	r3, [pc, #44]	@ (8005668 <srand+0x48>)
 800563a:	480c      	ldr	r0, [pc, #48]	@ (800566c <srand+0x4c>)
 800563c:	2146      	movs	r1, #70	@ 0x46
 800563e:	f000 fe6d 	bl	800631c <__assert_func>
 8005642:	490b      	ldr	r1, [pc, #44]	@ (8005670 <srand+0x50>)
 8005644:	4b0b      	ldr	r3, [pc, #44]	@ (8005674 <srand+0x54>)
 8005646:	e9c0 1300 	strd	r1, r3, [r0]
 800564a:	4b0b      	ldr	r3, [pc, #44]	@ (8005678 <srand+0x58>)
 800564c:	6083      	str	r3, [r0, #8]
 800564e:	230b      	movs	r3, #11
 8005650:	8183      	strh	r3, [r0, #12]
 8005652:	2100      	movs	r1, #0
 8005654:	2001      	movs	r0, #1
 8005656:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800565a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800565c:	2200      	movs	r2, #0
 800565e:	611c      	str	r4, [r3, #16]
 8005660:	615a      	str	r2, [r3, #20]
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	20000044 	.word	0x20000044
 8005668:	08008654 	.word	0x08008654
 800566c:	0800866b 	.word	0x0800866b
 8005670:	abcd330e 	.word	0xabcd330e
 8005674:	e66d1234 	.word	0xe66d1234
 8005678:	0005deec 	.word	0x0005deec

0800567c <rand>:
 800567c:	4b16      	ldr	r3, [pc, #88]	@ (80056d8 <rand+0x5c>)
 800567e:	b510      	push	{r4, lr}
 8005680:	681c      	ldr	r4, [r3, #0]
 8005682:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005684:	b9b3      	cbnz	r3, 80056b4 <rand+0x38>
 8005686:	2018      	movs	r0, #24
 8005688:	f001 fd08 	bl	800709c <malloc>
 800568c:	4602      	mov	r2, r0
 800568e:	6320      	str	r0, [r4, #48]	@ 0x30
 8005690:	b920      	cbnz	r0, 800569c <rand+0x20>
 8005692:	4b12      	ldr	r3, [pc, #72]	@ (80056dc <rand+0x60>)
 8005694:	4812      	ldr	r0, [pc, #72]	@ (80056e0 <rand+0x64>)
 8005696:	2152      	movs	r1, #82	@ 0x52
 8005698:	f000 fe40 	bl	800631c <__assert_func>
 800569c:	4911      	ldr	r1, [pc, #68]	@ (80056e4 <rand+0x68>)
 800569e:	4b12      	ldr	r3, [pc, #72]	@ (80056e8 <rand+0x6c>)
 80056a0:	e9c0 1300 	strd	r1, r3, [r0]
 80056a4:	4b11      	ldr	r3, [pc, #68]	@ (80056ec <rand+0x70>)
 80056a6:	6083      	str	r3, [r0, #8]
 80056a8:	230b      	movs	r3, #11
 80056aa:	8183      	strh	r3, [r0, #12]
 80056ac:	2100      	movs	r1, #0
 80056ae:	2001      	movs	r0, #1
 80056b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80056b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80056b6:	480e      	ldr	r0, [pc, #56]	@ (80056f0 <rand+0x74>)
 80056b8:	690b      	ldr	r3, [r1, #16]
 80056ba:	694c      	ldr	r4, [r1, #20]
 80056bc:	4a0d      	ldr	r2, [pc, #52]	@ (80056f4 <rand+0x78>)
 80056be:	4358      	muls	r0, r3
 80056c0:	fb02 0004 	mla	r0, r2, r4, r0
 80056c4:	fba3 3202 	umull	r3, r2, r3, r2
 80056c8:	3301      	adds	r3, #1
 80056ca:	eb40 0002 	adc.w	r0, r0, r2
 80056ce:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80056d2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80056d6:	bd10      	pop	{r4, pc}
 80056d8:	20000044 	.word	0x20000044
 80056dc:	08008654 	.word	0x08008654
 80056e0:	0800866b 	.word	0x0800866b
 80056e4:	abcd330e 	.word	0xabcd330e
 80056e8:	e66d1234 	.word	0xe66d1234
 80056ec:	0005deec 	.word	0x0005deec
 80056f0:	5851f42d 	.word	0x5851f42d
 80056f4:	4c957f2d 	.word	0x4c957f2d

080056f8 <__cvt>:
 80056f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056fc:	ec57 6b10 	vmov	r6, r7, d0
 8005700:	2f00      	cmp	r7, #0
 8005702:	460c      	mov	r4, r1
 8005704:	4619      	mov	r1, r3
 8005706:	463b      	mov	r3, r7
 8005708:	bfbb      	ittet	lt
 800570a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800570e:	461f      	movlt	r7, r3
 8005710:	2300      	movge	r3, #0
 8005712:	232d      	movlt	r3, #45	@ 0x2d
 8005714:	700b      	strb	r3, [r1, #0]
 8005716:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005718:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800571c:	4691      	mov	r9, r2
 800571e:	f023 0820 	bic.w	r8, r3, #32
 8005722:	bfbc      	itt	lt
 8005724:	4632      	movlt	r2, r6
 8005726:	4616      	movlt	r6, r2
 8005728:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800572c:	d005      	beq.n	800573a <__cvt+0x42>
 800572e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005732:	d100      	bne.n	8005736 <__cvt+0x3e>
 8005734:	3401      	adds	r4, #1
 8005736:	2102      	movs	r1, #2
 8005738:	e000      	b.n	800573c <__cvt+0x44>
 800573a:	2103      	movs	r1, #3
 800573c:	ab03      	add	r3, sp, #12
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	ab02      	add	r3, sp, #8
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	ec47 6b10 	vmov	d0, r6, r7
 8005748:	4653      	mov	r3, sl
 800574a:	4622      	mov	r2, r4
 800574c:	f000 fe8c 	bl	8006468 <_dtoa_r>
 8005750:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005754:	4605      	mov	r5, r0
 8005756:	d119      	bne.n	800578c <__cvt+0x94>
 8005758:	f019 0f01 	tst.w	r9, #1
 800575c:	d00e      	beq.n	800577c <__cvt+0x84>
 800575e:	eb00 0904 	add.w	r9, r0, r4
 8005762:	2200      	movs	r2, #0
 8005764:	2300      	movs	r3, #0
 8005766:	4630      	mov	r0, r6
 8005768:	4639      	mov	r1, r7
 800576a:	f7fb f9cd 	bl	8000b08 <__aeabi_dcmpeq>
 800576e:	b108      	cbz	r0, 8005774 <__cvt+0x7c>
 8005770:	f8cd 900c 	str.w	r9, [sp, #12]
 8005774:	2230      	movs	r2, #48	@ 0x30
 8005776:	9b03      	ldr	r3, [sp, #12]
 8005778:	454b      	cmp	r3, r9
 800577a:	d31e      	bcc.n	80057ba <__cvt+0xc2>
 800577c:	9b03      	ldr	r3, [sp, #12]
 800577e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005780:	1b5b      	subs	r3, r3, r5
 8005782:	4628      	mov	r0, r5
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	b004      	add	sp, #16
 8005788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005790:	eb00 0904 	add.w	r9, r0, r4
 8005794:	d1e5      	bne.n	8005762 <__cvt+0x6a>
 8005796:	7803      	ldrb	r3, [r0, #0]
 8005798:	2b30      	cmp	r3, #48	@ 0x30
 800579a:	d10a      	bne.n	80057b2 <__cvt+0xba>
 800579c:	2200      	movs	r2, #0
 800579e:	2300      	movs	r3, #0
 80057a0:	4630      	mov	r0, r6
 80057a2:	4639      	mov	r1, r7
 80057a4:	f7fb f9b0 	bl	8000b08 <__aeabi_dcmpeq>
 80057a8:	b918      	cbnz	r0, 80057b2 <__cvt+0xba>
 80057aa:	f1c4 0401 	rsb	r4, r4, #1
 80057ae:	f8ca 4000 	str.w	r4, [sl]
 80057b2:	f8da 3000 	ldr.w	r3, [sl]
 80057b6:	4499      	add	r9, r3
 80057b8:	e7d3      	b.n	8005762 <__cvt+0x6a>
 80057ba:	1c59      	adds	r1, r3, #1
 80057bc:	9103      	str	r1, [sp, #12]
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	e7d9      	b.n	8005776 <__cvt+0x7e>

080057c2 <__exponent>:
 80057c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057c4:	2900      	cmp	r1, #0
 80057c6:	bfba      	itte	lt
 80057c8:	4249      	neglt	r1, r1
 80057ca:	232d      	movlt	r3, #45	@ 0x2d
 80057cc:	232b      	movge	r3, #43	@ 0x2b
 80057ce:	2909      	cmp	r1, #9
 80057d0:	7002      	strb	r2, [r0, #0]
 80057d2:	7043      	strb	r3, [r0, #1]
 80057d4:	dd29      	ble.n	800582a <__exponent+0x68>
 80057d6:	f10d 0307 	add.w	r3, sp, #7
 80057da:	461d      	mov	r5, r3
 80057dc:	270a      	movs	r7, #10
 80057de:	461a      	mov	r2, r3
 80057e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80057e4:	fb07 1416 	mls	r4, r7, r6, r1
 80057e8:	3430      	adds	r4, #48	@ 0x30
 80057ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80057ee:	460c      	mov	r4, r1
 80057f0:	2c63      	cmp	r4, #99	@ 0x63
 80057f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80057f6:	4631      	mov	r1, r6
 80057f8:	dcf1      	bgt.n	80057de <__exponent+0x1c>
 80057fa:	3130      	adds	r1, #48	@ 0x30
 80057fc:	1e94      	subs	r4, r2, #2
 80057fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005802:	1c41      	adds	r1, r0, #1
 8005804:	4623      	mov	r3, r4
 8005806:	42ab      	cmp	r3, r5
 8005808:	d30a      	bcc.n	8005820 <__exponent+0x5e>
 800580a:	f10d 0309 	add.w	r3, sp, #9
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	42ac      	cmp	r4, r5
 8005812:	bf88      	it	hi
 8005814:	2300      	movhi	r3, #0
 8005816:	3302      	adds	r3, #2
 8005818:	4403      	add	r3, r0
 800581a:	1a18      	subs	r0, r3, r0
 800581c:	b003      	add	sp, #12
 800581e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005820:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005824:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005828:	e7ed      	b.n	8005806 <__exponent+0x44>
 800582a:	2330      	movs	r3, #48	@ 0x30
 800582c:	3130      	adds	r1, #48	@ 0x30
 800582e:	7083      	strb	r3, [r0, #2]
 8005830:	70c1      	strb	r1, [r0, #3]
 8005832:	1d03      	adds	r3, r0, #4
 8005834:	e7f1      	b.n	800581a <__exponent+0x58>
	...

08005838 <_printf_float>:
 8005838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583c:	b08d      	sub	sp, #52	@ 0x34
 800583e:	460c      	mov	r4, r1
 8005840:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005844:	4616      	mov	r6, r2
 8005846:	461f      	mov	r7, r3
 8005848:	4605      	mov	r5, r0
 800584a:	f000 fcef 	bl	800622c <_localeconv_r>
 800584e:	6803      	ldr	r3, [r0, #0]
 8005850:	9304      	str	r3, [sp, #16]
 8005852:	4618      	mov	r0, r3
 8005854:	f7fa fd2c 	bl	80002b0 <strlen>
 8005858:	2300      	movs	r3, #0
 800585a:	930a      	str	r3, [sp, #40]	@ 0x28
 800585c:	f8d8 3000 	ldr.w	r3, [r8]
 8005860:	9005      	str	r0, [sp, #20]
 8005862:	3307      	adds	r3, #7
 8005864:	f023 0307 	bic.w	r3, r3, #7
 8005868:	f103 0208 	add.w	r2, r3, #8
 800586c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005870:	f8d4 b000 	ldr.w	fp, [r4]
 8005874:	f8c8 2000 	str.w	r2, [r8]
 8005878:	e9d3 8900 	ldrd	r8, r9, [r3]
 800587c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005880:	9307      	str	r3, [sp, #28]
 8005882:	f8cd 8018 	str.w	r8, [sp, #24]
 8005886:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800588a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800588e:	4b9c      	ldr	r3, [pc, #624]	@ (8005b00 <_printf_float+0x2c8>)
 8005890:	f04f 32ff 	mov.w	r2, #4294967295
 8005894:	f7fb f96a 	bl	8000b6c <__aeabi_dcmpun>
 8005898:	bb70      	cbnz	r0, 80058f8 <_printf_float+0xc0>
 800589a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800589e:	4b98      	ldr	r3, [pc, #608]	@ (8005b00 <_printf_float+0x2c8>)
 80058a0:	f04f 32ff 	mov.w	r2, #4294967295
 80058a4:	f7fb f944 	bl	8000b30 <__aeabi_dcmple>
 80058a8:	bb30      	cbnz	r0, 80058f8 <_printf_float+0xc0>
 80058aa:	2200      	movs	r2, #0
 80058ac:	2300      	movs	r3, #0
 80058ae:	4640      	mov	r0, r8
 80058b0:	4649      	mov	r1, r9
 80058b2:	f7fb f933 	bl	8000b1c <__aeabi_dcmplt>
 80058b6:	b110      	cbz	r0, 80058be <_printf_float+0x86>
 80058b8:	232d      	movs	r3, #45	@ 0x2d
 80058ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058be:	4a91      	ldr	r2, [pc, #580]	@ (8005b04 <_printf_float+0x2cc>)
 80058c0:	4b91      	ldr	r3, [pc, #580]	@ (8005b08 <_printf_float+0x2d0>)
 80058c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80058c6:	bf8c      	ite	hi
 80058c8:	4690      	movhi	r8, r2
 80058ca:	4698      	movls	r8, r3
 80058cc:	2303      	movs	r3, #3
 80058ce:	6123      	str	r3, [r4, #16]
 80058d0:	f02b 0304 	bic.w	r3, fp, #4
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	f04f 0900 	mov.w	r9, #0
 80058da:	9700      	str	r7, [sp, #0]
 80058dc:	4633      	mov	r3, r6
 80058de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80058e0:	4621      	mov	r1, r4
 80058e2:	4628      	mov	r0, r5
 80058e4:	f000 f9d2 	bl	8005c8c <_printf_common>
 80058e8:	3001      	adds	r0, #1
 80058ea:	f040 808d 	bne.w	8005a08 <_printf_float+0x1d0>
 80058ee:	f04f 30ff 	mov.w	r0, #4294967295
 80058f2:	b00d      	add	sp, #52	@ 0x34
 80058f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058f8:	4642      	mov	r2, r8
 80058fa:	464b      	mov	r3, r9
 80058fc:	4640      	mov	r0, r8
 80058fe:	4649      	mov	r1, r9
 8005900:	f7fb f934 	bl	8000b6c <__aeabi_dcmpun>
 8005904:	b140      	cbz	r0, 8005918 <_printf_float+0xe0>
 8005906:	464b      	mov	r3, r9
 8005908:	2b00      	cmp	r3, #0
 800590a:	bfbc      	itt	lt
 800590c:	232d      	movlt	r3, #45	@ 0x2d
 800590e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005912:	4a7e      	ldr	r2, [pc, #504]	@ (8005b0c <_printf_float+0x2d4>)
 8005914:	4b7e      	ldr	r3, [pc, #504]	@ (8005b10 <_printf_float+0x2d8>)
 8005916:	e7d4      	b.n	80058c2 <_printf_float+0x8a>
 8005918:	6863      	ldr	r3, [r4, #4]
 800591a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800591e:	9206      	str	r2, [sp, #24]
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	d13b      	bne.n	800599c <_printf_float+0x164>
 8005924:	2306      	movs	r3, #6
 8005926:	6063      	str	r3, [r4, #4]
 8005928:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800592c:	2300      	movs	r3, #0
 800592e:	6022      	str	r2, [r4, #0]
 8005930:	9303      	str	r3, [sp, #12]
 8005932:	ab0a      	add	r3, sp, #40	@ 0x28
 8005934:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005938:	ab09      	add	r3, sp, #36	@ 0x24
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	6861      	ldr	r1, [r4, #4]
 800593e:	ec49 8b10 	vmov	d0, r8, r9
 8005942:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005946:	4628      	mov	r0, r5
 8005948:	f7ff fed6 	bl	80056f8 <__cvt>
 800594c:	9b06      	ldr	r3, [sp, #24]
 800594e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005950:	2b47      	cmp	r3, #71	@ 0x47
 8005952:	4680      	mov	r8, r0
 8005954:	d129      	bne.n	80059aa <_printf_float+0x172>
 8005956:	1cc8      	adds	r0, r1, #3
 8005958:	db02      	blt.n	8005960 <_printf_float+0x128>
 800595a:	6863      	ldr	r3, [r4, #4]
 800595c:	4299      	cmp	r1, r3
 800595e:	dd41      	ble.n	80059e4 <_printf_float+0x1ac>
 8005960:	f1aa 0a02 	sub.w	sl, sl, #2
 8005964:	fa5f fa8a 	uxtb.w	sl, sl
 8005968:	3901      	subs	r1, #1
 800596a:	4652      	mov	r2, sl
 800596c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005970:	9109      	str	r1, [sp, #36]	@ 0x24
 8005972:	f7ff ff26 	bl	80057c2 <__exponent>
 8005976:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005978:	1813      	adds	r3, r2, r0
 800597a:	2a01      	cmp	r2, #1
 800597c:	4681      	mov	r9, r0
 800597e:	6123      	str	r3, [r4, #16]
 8005980:	dc02      	bgt.n	8005988 <_printf_float+0x150>
 8005982:	6822      	ldr	r2, [r4, #0]
 8005984:	07d2      	lsls	r2, r2, #31
 8005986:	d501      	bpl.n	800598c <_printf_float+0x154>
 8005988:	3301      	adds	r3, #1
 800598a:	6123      	str	r3, [r4, #16]
 800598c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005990:	2b00      	cmp	r3, #0
 8005992:	d0a2      	beq.n	80058da <_printf_float+0xa2>
 8005994:	232d      	movs	r3, #45	@ 0x2d
 8005996:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800599a:	e79e      	b.n	80058da <_printf_float+0xa2>
 800599c:	9a06      	ldr	r2, [sp, #24]
 800599e:	2a47      	cmp	r2, #71	@ 0x47
 80059a0:	d1c2      	bne.n	8005928 <_printf_float+0xf0>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1c0      	bne.n	8005928 <_printf_float+0xf0>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e7bd      	b.n	8005926 <_printf_float+0xee>
 80059aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059ae:	d9db      	bls.n	8005968 <_printf_float+0x130>
 80059b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80059b4:	d118      	bne.n	80059e8 <_printf_float+0x1b0>
 80059b6:	2900      	cmp	r1, #0
 80059b8:	6863      	ldr	r3, [r4, #4]
 80059ba:	dd0b      	ble.n	80059d4 <_printf_float+0x19c>
 80059bc:	6121      	str	r1, [r4, #16]
 80059be:	b913      	cbnz	r3, 80059c6 <_printf_float+0x18e>
 80059c0:	6822      	ldr	r2, [r4, #0]
 80059c2:	07d0      	lsls	r0, r2, #31
 80059c4:	d502      	bpl.n	80059cc <_printf_float+0x194>
 80059c6:	3301      	adds	r3, #1
 80059c8:	440b      	add	r3, r1
 80059ca:	6123      	str	r3, [r4, #16]
 80059cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80059ce:	f04f 0900 	mov.w	r9, #0
 80059d2:	e7db      	b.n	800598c <_printf_float+0x154>
 80059d4:	b913      	cbnz	r3, 80059dc <_printf_float+0x1a4>
 80059d6:	6822      	ldr	r2, [r4, #0]
 80059d8:	07d2      	lsls	r2, r2, #31
 80059da:	d501      	bpl.n	80059e0 <_printf_float+0x1a8>
 80059dc:	3302      	adds	r3, #2
 80059de:	e7f4      	b.n	80059ca <_printf_float+0x192>
 80059e0:	2301      	movs	r3, #1
 80059e2:	e7f2      	b.n	80059ca <_printf_float+0x192>
 80059e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80059e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059ea:	4299      	cmp	r1, r3
 80059ec:	db05      	blt.n	80059fa <_printf_float+0x1c2>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	6121      	str	r1, [r4, #16]
 80059f2:	07d8      	lsls	r0, r3, #31
 80059f4:	d5ea      	bpl.n	80059cc <_printf_float+0x194>
 80059f6:	1c4b      	adds	r3, r1, #1
 80059f8:	e7e7      	b.n	80059ca <_printf_float+0x192>
 80059fa:	2900      	cmp	r1, #0
 80059fc:	bfd4      	ite	le
 80059fe:	f1c1 0202 	rsble	r2, r1, #2
 8005a02:	2201      	movgt	r2, #1
 8005a04:	4413      	add	r3, r2
 8005a06:	e7e0      	b.n	80059ca <_printf_float+0x192>
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	055a      	lsls	r2, r3, #21
 8005a0c:	d407      	bmi.n	8005a1e <_printf_float+0x1e6>
 8005a0e:	6923      	ldr	r3, [r4, #16]
 8005a10:	4642      	mov	r2, r8
 8005a12:	4631      	mov	r1, r6
 8005a14:	4628      	mov	r0, r5
 8005a16:	47b8      	blx	r7
 8005a18:	3001      	adds	r0, #1
 8005a1a:	d12b      	bne.n	8005a74 <_printf_float+0x23c>
 8005a1c:	e767      	b.n	80058ee <_printf_float+0xb6>
 8005a1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a22:	f240 80dd 	bls.w	8005be0 <_printf_float+0x3a8>
 8005a26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f7fb f86b 	bl	8000b08 <__aeabi_dcmpeq>
 8005a32:	2800      	cmp	r0, #0
 8005a34:	d033      	beq.n	8005a9e <_printf_float+0x266>
 8005a36:	4a37      	ldr	r2, [pc, #220]	@ (8005b14 <_printf_float+0x2dc>)
 8005a38:	2301      	movs	r3, #1
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	47b8      	blx	r7
 8005a40:	3001      	adds	r0, #1
 8005a42:	f43f af54 	beq.w	80058ee <_printf_float+0xb6>
 8005a46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005a4a:	4543      	cmp	r3, r8
 8005a4c:	db02      	blt.n	8005a54 <_printf_float+0x21c>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	07d8      	lsls	r0, r3, #31
 8005a52:	d50f      	bpl.n	8005a74 <_printf_float+0x23c>
 8005a54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a58:	4631      	mov	r1, r6
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	47b8      	blx	r7
 8005a5e:	3001      	adds	r0, #1
 8005a60:	f43f af45 	beq.w	80058ee <_printf_float+0xb6>
 8005a64:	f04f 0900 	mov.w	r9, #0
 8005a68:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a6c:	f104 0a1a 	add.w	sl, r4, #26
 8005a70:	45c8      	cmp	r8, r9
 8005a72:	dc09      	bgt.n	8005a88 <_printf_float+0x250>
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	079b      	lsls	r3, r3, #30
 8005a78:	f100 8103 	bmi.w	8005c82 <_printf_float+0x44a>
 8005a7c:	68e0      	ldr	r0, [r4, #12]
 8005a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a80:	4298      	cmp	r0, r3
 8005a82:	bfb8      	it	lt
 8005a84:	4618      	movlt	r0, r3
 8005a86:	e734      	b.n	80058f2 <_printf_float+0xba>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	4652      	mov	r2, sl
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	4628      	mov	r0, r5
 8005a90:	47b8      	blx	r7
 8005a92:	3001      	adds	r0, #1
 8005a94:	f43f af2b 	beq.w	80058ee <_printf_float+0xb6>
 8005a98:	f109 0901 	add.w	r9, r9, #1
 8005a9c:	e7e8      	b.n	8005a70 <_printf_float+0x238>
 8005a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	dc39      	bgt.n	8005b18 <_printf_float+0x2e0>
 8005aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b14 <_printf_float+0x2dc>)
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	4628      	mov	r0, r5
 8005aac:	47b8      	blx	r7
 8005aae:	3001      	adds	r0, #1
 8005ab0:	f43f af1d 	beq.w	80058ee <_printf_float+0xb6>
 8005ab4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005ab8:	ea59 0303 	orrs.w	r3, r9, r3
 8005abc:	d102      	bne.n	8005ac4 <_printf_float+0x28c>
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	07d9      	lsls	r1, r3, #31
 8005ac2:	d5d7      	bpl.n	8005a74 <_printf_float+0x23c>
 8005ac4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ac8:	4631      	mov	r1, r6
 8005aca:	4628      	mov	r0, r5
 8005acc:	47b8      	blx	r7
 8005ace:	3001      	adds	r0, #1
 8005ad0:	f43f af0d 	beq.w	80058ee <_printf_float+0xb6>
 8005ad4:	f04f 0a00 	mov.w	sl, #0
 8005ad8:	f104 0b1a 	add.w	fp, r4, #26
 8005adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ade:	425b      	negs	r3, r3
 8005ae0:	4553      	cmp	r3, sl
 8005ae2:	dc01      	bgt.n	8005ae8 <_printf_float+0x2b0>
 8005ae4:	464b      	mov	r3, r9
 8005ae6:	e793      	b.n	8005a10 <_printf_float+0x1d8>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	465a      	mov	r2, fp
 8005aec:	4631      	mov	r1, r6
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b8      	blx	r7
 8005af2:	3001      	adds	r0, #1
 8005af4:	f43f aefb 	beq.w	80058ee <_printf_float+0xb6>
 8005af8:	f10a 0a01 	add.w	sl, sl, #1
 8005afc:	e7ee      	b.n	8005adc <_printf_float+0x2a4>
 8005afe:	bf00      	nop
 8005b00:	7fefffff 	.word	0x7fefffff
 8005b04:	080086c7 	.word	0x080086c7
 8005b08:	080086c3 	.word	0x080086c3
 8005b0c:	080086cf 	.word	0x080086cf
 8005b10:	080086cb 	.word	0x080086cb
 8005b14:	080086d3 	.word	0x080086d3
 8005b18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b1e:	4553      	cmp	r3, sl
 8005b20:	bfa8      	it	ge
 8005b22:	4653      	movge	r3, sl
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	4699      	mov	r9, r3
 8005b28:	dc36      	bgt.n	8005b98 <_printf_float+0x360>
 8005b2a:	f04f 0b00 	mov.w	fp, #0
 8005b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b32:	f104 021a 	add.w	r2, r4, #26
 8005b36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b38:	9306      	str	r3, [sp, #24]
 8005b3a:	eba3 0309 	sub.w	r3, r3, r9
 8005b3e:	455b      	cmp	r3, fp
 8005b40:	dc31      	bgt.n	8005ba6 <_printf_float+0x36e>
 8005b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b44:	459a      	cmp	sl, r3
 8005b46:	dc3a      	bgt.n	8005bbe <_printf_float+0x386>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	07da      	lsls	r2, r3, #31
 8005b4c:	d437      	bmi.n	8005bbe <_printf_float+0x386>
 8005b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b50:	ebaa 0903 	sub.w	r9, sl, r3
 8005b54:	9b06      	ldr	r3, [sp, #24]
 8005b56:	ebaa 0303 	sub.w	r3, sl, r3
 8005b5a:	4599      	cmp	r9, r3
 8005b5c:	bfa8      	it	ge
 8005b5e:	4699      	movge	r9, r3
 8005b60:	f1b9 0f00 	cmp.w	r9, #0
 8005b64:	dc33      	bgt.n	8005bce <_printf_float+0x396>
 8005b66:	f04f 0800 	mov.w	r8, #0
 8005b6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b6e:	f104 0b1a 	add.w	fp, r4, #26
 8005b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b74:	ebaa 0303 	sub.w	r3, sl, r3
 8005b78:	eba3 0309 	sub.w	r3, r3, r9
 8005b7c:	4543      	cmp	r3, r8
 8005b7e:	f77f af79 	ble.w	8005a74 <_printf_float+0x23c>
 8005b82:	2301      	movs	r3, #1
 8005b84:	465a      	mov	r2, fp
 8005b86:	4631      	mov	r1, r6
 8005b88:	4628      	mov	r0, r5
 8005b8a:	47b8      	blx	r7
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	f43f aeae 	beq.w	80058ee <_printf_float+0xb6>
 8005b92:	f108 0801 	add.w	r8, r8, #1
 8005b96:	e7ec      	b.n	8005b72 <_printf_float+0x33a>
 8005b98:	4642      	mov	r2, r8
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	47b8      	blx	r7
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d1c2      	bne.n	8005b2a <_printf_float+0x2f2>
 8005ba4:	e6a3      	b.n	80058ee <_printf_float+0xb6>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	9206      	str	r2, [sp, #24]
 8005bae:	47b8      	blx	r7
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	f43f ae9c 	beq.w	80058ee <_printf_float+0xb6>
 8005bb6:	9a06      	ldr	r2, [sp, #24]
 8005bb8:	f10b 0b01 	add.w	fp, fp, #1
 8005bbc:	e7bb      	b.n	8005b36 <_printf_float+0x2fe>
 8005bbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bc2:	4631      	mov	r1, r6
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	47b8      	blx	r7
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d1c0      	bne.n	8005b4e <_printf_float+0x316>
 8005bcc:	e68f      	b.n	80058ee <_printf_float+0xb6>
 8005bce:	9a06      	ldr	r2, [sp, #24]
 8005bd0:	464b      	mov	r3, r9
 8005bd2:	4442      	add	r2, r8
 8005bd4:	4631      	mov	r1, r6
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	47b8      	blx	r7
 8005bda:	3001      	adds	r0, #1
 8005bdc:	d1c3      	bne.n	8005b66 <_printf_float+0x32e>
 8005bde:	e686      	b.n	80058ee <_printf_float+0xb6>
 8005be0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005be4:	f1ba 0f01 	cmp.w	sl, #1
 8005be8:	dc01      	bgt.n	8005bee <_printf_float+0x3b6>
 8005bea:	07db      	lsls	r3, r3, #31
 8005bec:	d536      	bpl.n	8005c5c <_printf_float+0x424>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	47b8      	blx	r7
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	f43f ae78 	beq.w	80058ee <_printf_float+0xb6>
 8005bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c02:	4631      	mov	r1, r6
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b8      	blx	r7
 8005c08:	3001      	adds	r0, #1
 8005c0a:	f43f ae70 	beq.w	80058ee <_printf_float+0xb6>
 8005c0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c12:	2200      	movs	r2, #0
 8005c14:	2300      	movs	r3, #0
 8005c16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c1a:	f7fa ff75 	bl	8000b08 <__aeabi_dcmpeq>
 8005c1e:	b9c0      	cbnz	r0, 8005c52 <_printf_float+0x41a>
 8005c20:	4653      	mov	r3, sl
 8005c22:	f108 0201 	add.w	r2, r8, #1
 8005c26:	4631      	mov	r1, r6
 8005c28:	4628      	mov	r0, r5
 8005c2a:	47b8      	blx	r7
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	d10c      	bne.n	8005c4a <_printf_float+0x412>
 8005c30:	e65d      	b.n	80058ee <_printf_float+0xb6>
 8005c32:	2301      	movs	r3, #1
 8005c34:	465a      	mov	r2, fp
 8005c36:	4631      	mov	r1, r6
 8005c38:	4628      	mov	r0, r5
 8005c3a:	47b8      	blx	r7
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	f43f ae56 	beq.w	80058ee <_printf_float+0xb6>
 8005c42:	f108 0801 	add.w	r8, r8, #1
 8005c46:	45d0      	cmp	r8, sl
 8005c48:	dbf3      	blt.n	8005c32 <_printf_float+0x3fa>
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c50:	e6df      	b.n	8005a12 <_printf_float+0x1da>
 8005c52:	f04f 0800 	mov.w	r8, #0
 8005c56:	f104 0b1a 	add.w	fp, r4, #26
 8005c5a:	e7f4      	b.n	8005c46 <_printf_float+0x40e>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	4642      	mov	r2, r8
 8005c60:	e7e1      	b.n	8005c26 <_printf_float+0x3ee>
 8005c62:	2301      	movs	r3, #1
 8005c64:	464a      	mov	r2, r9
 8005c66:	4631      	mov	r1, r6
 8005c68:	4628      	mov	r0, r5
 8005c6a:	47b8      	blx	r7
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f43f ae3e 	beq.w	80058ee <_printf_float+0xb6>
 8005c72:	f108 0801 	add.w	r8, r8, #1
 8005c76:	68e3      	ldr	r3, [r4, #12]
 8005c78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c7a:	1a5b      	subs	r3, r3, r1
 8005c7c:	4543      	cmp	r3, r8
 8005c7e:	dcf0      	bgt.n	8005c62 <_printf_float+0x42a>
 8005c80:	e6fc      	b.n	8005a7c <_printf_float+0x244>
 8005c82:	f04f 0800 	mov.w	r8, #0
 8005c86:	f104 0919 	add.w	r9, r4, #25
 8005c8a:	e7f4      	b.n	8005c76 <_printf_float+0x43e>

08005c8c <_printf_common>:
 8005c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c90:	4616      	mov	r6, r2
 8005c92:	4698      	mov	r8, r3
 8005c94:	688a      	ldr	r2, [r1, #8]
 8005c96:	690b      	ldr	r3, [r1, #16]
 8005c98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	bfb8      	it	lt
 8005ca0:	4613      	movlt	r3, r2
 8005ca2:	6033      	str	r3, [r6, #0]
 8005ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ca8:	4607      	mov	r7, r0
 8005caa:	460c      	mov	r4, r1
 8005cac:	b10a      	cbz	r2, 8005cb2 <_printf_common+0x26>
 8005cae:	3301      	adds	r3, #1
 8005cb0:	6033      	str	r3, [r6, #0]
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	0699      	lsls	r1, r3, #26
 8005cb6:	bf42      	ittt	mi
 8005cb8:	6833      	ldrmi	r3, [r6, #0]
 8005cba:	3302      	addmi	r3, #2
 8005cbc:	6033      	strmi	r3, [r6, #0]
 8005cbe:	6825      	ldr	r5, [r4, #0]
 8005cc0:	f015 0506 	ands.w	r5, r5, #6
 8005cc4:	d106      	bne.n	8005cd4 <_printf_common+0x48>
 8005cc6:	f104 0a19 	add.w	sl, r4, #25
 8005cca:	68e3      	ldr	r3, [r4, #12]
 8005ccc:	6832      	ldr	r2, [r6, #0]
 8005cce:	1a9b      	subs	r3, r3, r2
 8005cd0:	42ab      	cmp	r3, r5
 8005cd2:	dc26      	bgt.n	8005d22 <_printf_common+0x96>
 8005cd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cd8:	6822      	ldr	r2, [r4, #0]
 8005cda:	3b00      	subs	r3, #0
 8005cdc:	bf18      	it	ne
 8005cde:	2301      	movne	r3, #1
 8005ce0:	0692      	lsls	r2, r2, #26
 8005ce2:	d42b      	bmi.n	8005d3c <_printf_common+0xb0>
 8005ce4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ce8:	4641      	mov	r1, r8
 8005cea:	4638      	mov	r0, r7
 8005cec:	47c8      	blx	r9
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d01e      	beq.n	8005d30 <_printf_common+0xa4>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	6922      	ldr	r2, [r4, #16]
 8005cf6:	f003 0306 	and.w	r3, r3, #6
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	bf02      	ittt	eq
 8005cfe:	68e5      	ldreq	r5, [r4, #12]
 8005d00:	6833      	ldreq	r3, [r6, #0]
 8005d02:	1aed      	subeq	r5, r5, r3
 8005d04:	68a3      	ldr	r3, [r4, #8]
 8005d06:	bf0c      	ite	eq
 8005d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d0c:	2500      	movne	r5, #0
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	bfc4      	itt	gt
 8005d12:	1a9b      	subgt	r3, r3, r2
 8005d14:	18ed      	addgt	r5, r5, r3
 8005d16:	2600      	movs	r6, #0
 8005d18:	341a      	adds	r4, #26
 8005d1a:	42b5      	cmp	r5, r6
 8005d1c:	d11a      	bne.n	8005d54 <_printf_common+0xc8>
 8005d1e:	2000      	movs	r0, #0
 8005d20:	e008      	b.n	8005d34 <_printf_common+0xa8>
 8005d22:	2301      	movs	r3, #1
 8005d24:	4652      	mov	r2, sl
 8005d26:	4641      	mov	r1, r8
 8005d28:	4638      	mov	r0, r7
 8005d2a:	47c8      	blx	r9
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d103      	bne.n	8005d38 <_printf_common+0xac>
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d38:	3501      	adds	r5, #1
 8005d3a:	e7c6      	b.n	8005cca <_printf_common+0x3e>
 8005d3c:	18e1      	adds	r1, r4, r3
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	2030      	movs	r0, #48	@ 0x30
 8005d42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d46:	4422      	add	r2, r4
 8005d48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d50:	3302      	adds	r3, #2
 8005d52:	e7c7      	b.n	8005ce4 <_printf_common+0x58>
 8005d54:	2301      	movs	r3, #1
 8005d56:	4622      	mov	r2, r4
 8005d58:	4641      	mov	r1, r8
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	47c8      	blx	r9
 8005d5e:	3001      	adds	r0, #1
 8005d60:	d0e6      	beq.n	8005d30 <_printf_common+0xa4>
 8005d62:	3601      	adds	r6, #1
 8005d64:	e7d9      	b.n	8005d1a <_printf_common+0x8e>
	...

08005d68 <_printf_i>:
 8005d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d6c:	7e0f      	ldrb	r7, [r1, #24]
 8005d6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d70:	2f78      	cmp	r7, #120	@ 0x78
 8005d72:	4691      	mov	r9, r2
 8005d74:	4680      	mov	r8, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	469a      	mov	sl, r3
 8005d7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d7e:	d807      	bhi.n	8005d90 <_printf_i+0x28>
 8005d80:	2f62      	cmp	r7, #98	@ 0x62
 8005d82:	d80a      	bhi.n	8005d9a <_printf_i+0x32>
 8005d84:	2f00      	cmp	r7, #0
 8005d86:	f000 80d1 	beq.w	8005f2c <_printf_i+0x1c4>
 8005d8a:	2f58      	cmp	r7, #88	@ 0x58
 8005d8c:	f000 80b8 	beq.w	8005f00 <_printf_i+0x198>
 8005d90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d98:	e03a      	b.n	8005e10 <_printf_i+0xa8>
 8005d9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d9e:	2b15      	cmp	r3, #21
 8005da0:	d8f6      	bhi.n	8005d90 <_printf_i+0x28>
 8005da2:	a101      	add	r1, pc, #4	@ (adr r1, 8005da8 <_printf_i+0x40>)
 8005da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005da8:	08005e01 	.word	0x08005e01
 8005dac:	08005e15 	.word	0x08005e15
 8005db0:	08005d91 	.word	0x08005d91
 8005db4:	08005d91 	.word	0x08005d91
 8005db8:	08005d91 	.word	0x08005d91
 8005dbc:	08005d91 	.word	0x08005d91
 8005dc0:	08005e15 	.word	0x08005e15
 8005dc4:	08005d91 	.word	0x08005d91
 8005dc8:	08005d91 	.word	0x08005d91
 8005dcc:	08005d91 	.word	0x08005d91
 8005dd0:	08005d91 	.word	0x08005d91
 8005dd4:	08005f13 	.word	0x08005f13
 8005dd8:	08005e3f 	.word	0x08005e3f
 8005ddc:	08005ecd 	.word	0x08005ecd
 8005de0:	08005d91 	.word	0x08005d91
 8005de4:	08005d91 	.word	0x08005d91
 8005de8:	08005f35 	.word	0x08005f35
 8005dec:	08005d91 	.word	0x08005d91
 8005df0:	08005e3f 	.word	0x08005e3f
 8005df4:	08005d91 	.word	0x08005d91
 8005df8:	08005d91 	.word	0x08005d91
 8005dfc:	08005ed5 	.word	0x08005ed5
 8005e00:	6833      	ldr	r3, [r6, #0]
 8005e02:	1d1a      	adds	r2, r3, #4
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6032      	str	r2, [r6, #0]
 8005e08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e10:	2301      	movs	r3, #1
 8005e12:	e09c      	b.n	8005f4e <_printf_i+0x1e6>
 8005e14:	6833      	ldr	r3, [r6, #0]
 8005e16:	6820      	ldr	r0, [r4, #0]
 8005e18:	1d19      	adds	r1, r3, #4
 8005e1a:	6031      	str	r1, [r6, #0]
 8005e1c:	0606      	lsls	r6, r0, #24
 8005e1e:	d501      	bpl.n	8005e24 <_printf_i+0xbc>
 8005e20:	681d      	ldr	r5, [r3, #0]
 8005e22:	e003      	b.n	8005e2c <_printf_i+0xc4>
 8005e24:	0645      	lsls	r5, r0, #25
 8005e26:	d5fb      	bpl.n	8005e20 <_printf_i+0xb8>
 8005e28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e2c:	2d00      	cmp	r5, #0
 8005e2e:	da03      	bge.n	8005e38 <_printf_i+0xd0>
 8005e30:	232d      	movs	r3, #45	@ 0x2d
 8005e32:	426d      	negs	r5, r5
 8005e34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e38:	4858      	ldr	r0, [pc, #352]	@ (8005f9c <_printf_i+0x234>)
 8005e3a:	230a      	movs	r3, #10
 8005e3c:	e011      	b.n	8005e62 <_printf_i+0xfa>
 8005e3e:	6821      	ldr	r1, [r4, #0]
 8005e40:	6833      	ldr	r3, [r6, #0]
 8005e42:	0608      	lsls	r0, r1, #24
 8005e44:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e48:	d402      	bmi.n	8005e50 <_printf_i+0xe8>
 8005e4a:	0649      	lsls	r1, r1, #25
 8005e4c:	bf48      	it	mi
 8005e4e:	b2ad      	uxthmi	r5, r5
 8005e50:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e52:	4852      	ldr	r0, [pc, #328]	@ (8005f9c <_printf_i+0x234>)
 8005e54:	6033      	str	r3, [r6, #0]
 8005e56:	bf14      	ite	ne
 8005e58:	230a      	movne	r3, #10
 8005e5a:	2308      	moveq	r3, #8
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e62:	6866      	ldr	r6, [r4, #4]
 8005e64:	60a6      	str	r6, [r4, #8]
 8005e66:	2e00      	cmp	r6, #0
 8005e68:	db05      	blt.n	8005e76 <_printf_i+0x10e>
 8005e6a:	6821      	ldr	r1, [r4, #0]
 8005e6c:	432e      	orrs	r6, r5
 8005e6e:	f021 0104 	bic.w	r1, r1, #4
 8005e72:	6021      	str	r1, [r4, #0]
 8005e74:	d04b      	beq.n	8005f0e <_printf_i+0x1a6>
 8005e76:	4616      	mov	r6, r2
 8005e78:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e7c:	fb03 5711 	mls	r7, r3, r1, r5
 8005e80:	5dc7      	ldrb	r7, [r0, r7]
 8005e82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e86:	462f      	mov	r7, r5
 8005e88:	42bb      	cmp	r3, r7
 8005e8a:	460d      	mov	r5, r1
 8005e8c:	d9f4      	bls.n	8005e78 <_printf_i+0x110>
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	d10b      	bne.n	8005eaa <_printf_i+0x142>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	07df      	lsls	r7, r3, #31
 8005e96:	d508      	bpl.n	8005eaa <_printf_i+0x142>
 8005e98:	6923      	ldr	r3, [r4, #16]
 8005e9a:	6861      	ldr	r1, [r4, #4]
 8005e9c:	4299      	cmp	r1, r3
 8005e9e:	bfde      	ittt	le
 8005ea0:	2330      	movle	r3, #48	@ 0x30
 8005ea2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ea6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005eaa:	1b92      	subs	r2, r2, r6
 8005eac:	6122      	str	r2, [r4, #16]
 8005eae:	f8cd a000 	str.w	sl, [sp]
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	aa03      	add	r2, sp, #12
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	4640      	mov	r0, r8
 8005eba:	f7ff fee7 	bl	8005c8c <_printf_common>
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	d14a      	bne.n	8005f58 <_printf_i+0x1f0>
 8005ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec6:	b004      	add	sp, #16
 8005ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	f043 0320 	orr.w	r3, r3, #32
 8005ed2:	6023      	str	r3, [r4, #0]
 8005ed4:	4832      	ldr	r0, [pc, #200]	@ (8005fa0 <_printf_i+0x238>)
 8005ed6:	2778      	movs	r7, #120	@ 0x78
 8005ed8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	6831      	ldr	r1, [r6, #0]
 8005ee0:	061f      	lsls	r7, r3, #24
 8005ee2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ee6:	d402      	bmi.n	8005eee <_printf_i+0x186>
 8005ee8:	065f      	lsls	r7, r3, #25
 8005eea:	bf48      	it	mi
 8005eec:	b2ad      	uxthmi	r5, r5
 8005eee:	6031      	str	r1, [r6, #0]
 8005ef0:	07d9      	lsls	r1, r3, #31
 8005ef2:	bf44      	itt	mi
 8005ef4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ef8:	6023      	strmi	r3, [r4, #0]
 8005efa:	b11d      	cbz	r5, 8005f04 <_printf_i+0x19c>
 8005efc:	2310      	movs	r3, #16
 8005efe:	e7ad      	b.n	8005e5c <_printf_i+0xf4>
 8005f00:	4826      	ldr	r0, [pc, #152]	@ (8005f9c <_printf_i+0x234>)
 8005f02:	e7e9      	b.n	8005ed8 <_printf_i+0x170>
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	f023 0320 	bic.w	r3, r3, #32
 8005f0a:	6023      	str	r3, [r4, #0]
 8005f0c:	e7f6      	b.n	8005efc <_printf_i+0x194>
 8005f0e:	4616      	mov	r6, r2
 8005f10:	e7bd      	b.n	8005e8e <_printf_i+0x126>
 8005f12:	6833      	ldr	r3, [r6, #0]
 8005f14:	6825      	ldr	r5, [r4, #0]
 8005f16:	6961      	ldr	r1, [r4, #20]
 8005f18:	1d18      	adds	r0, r3, #4
 8005f1a:	6030      	str	r0, [r6, #0]
 8005f1c:	062e      	lsls	r6, r5, #24
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	d501      	bpl.n	8005f26 <_printf_i+0x1be>
 8005f22:	6019      	str	r1, [r3, #0]
 8005f24:	e002      	b.n	8005f2c <_printf_i+0x1c4>
 8005f26:	0668      	lsls	r0, r5, #25
 8005f28:	d5fb      	bpl.n	8005f22 <_printf_i+0x1ba>
 8005f2a:	8019      	strh	r1, [r3, #0]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	6123      	str	r3, [r4, #16]
 8005f30:	4616      	mov	r6, r2
 8005f32:	e7bc      	b.n	8005eae <_printf_i+0x146>
 8005f34:	6833      	ldr	r3, [r6, #0]
 8005f36:	1d1a      	adds	r2, r3, #4
 8005f38:	6032      	str	r2, [r6, #0]
 8005f3a:	681e      	ldr	r6, [r3, #0]
 8005f3c:	6862      	ldr	r2, [r4, #4]
 8005f3e:	2100      	movs	r1, #0
 8005f40:	4630      	mov	r0, r6
 8005f42:	f7fa f965 	bl	8000210 <memchr>
 8005f46:	b108      	cbz	r0, 8005f4c <_printf_i+0x1e4>
 8005f48:	1b80      	subs	r0, r0, r6
 8005f4a:	6060      	str	r0, [r4, #4]
 8005f4c:	6863      	ldr	r3, [r4, #4]
 8005f4e:	6123      	str	r3, [r4, #16]
 8005f50:	2300      	movs	r3, #0
 8005f52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f56:	e7aa      	b.n	8005eae <_printf_i+0x146>
 8005f58:	6923      	ldr	r3, [r4, #16]
 8005f5a:	4632      	mov	r2, r6
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	4640      	mov	r0, r8
 8005f60:	47d0      	blx	sl
 8005f62:	3001      	adds	r0, #1
 8005f64:	d0ad      	beq.n	8005ec2 <_printf_i+0x15a>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	079b      	lsls	r3, r3, #30
 8005f6a:	d413      	bmi.n	8005f94 <_printf_i+0x22c>
 8005f6c:	68e0      	ldr	r0, [r4, #12]
 8005f6e:	9b03      	ldr	r3, [sp, #12]
 8005f70:	4298      	cmp	r0, r3
 8005f72:	bfb8      	it	lt
 8005f74:	4618      	movlt	r0, r3
 8005f76:	e7a6      	b.n	8005ec6 <_printf_i+0x15e>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	4632      	mov	r2, r6
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	4640      	mov	r0, r8
 8005f80:	47d0      	blx	sl
 8005f82:	3001      	adds	r0, #1
 8005f84:	d09d      	beq.n	8005ec2 <_printf_i+0x15a>
 8005f86:	3501      	adds	r5, #1
 8005f88:	68e3      	ldr	r3, [r4, #12]
 8005f8a:	9903      	ldr	r1, [sp, #12]
 8005f8c:	1a5b      	subs	r3, r3, r1
 8005f8e:	42ab      	cmp	r3, r5
 8005f90:	dcf2      	bgt.n	8005f78 <_printf_i+0x210>
 8005f92:	e7eb      	b.n	8005f6c <_printf_i+0x204>
 8005f94:	2500      	movs	r5, #0
 8005f96:	f104 0619 	add.w	r6, r4, #25
 8005f9a:	e7f5      	b.n	8005f88 <_printf_i+0x220>
 8005f9c:	080086d5 	.word	0x080086d5
 8005fa0:	080086e6 	.word	0x080086e6

08005fa4 <std>:
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	b510      	push	{r4, lr}
 8005fa8:	4604      	mov	r4, r0
 8005faa:	e9c0 3300 	strd	r3, r3, [r0]
 8005fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fb2:	6083      	str	r3, [r0, #8]
 8005fb4:	8181      	strh	r1, [r0, #12]
 8005fb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005fb8:	81c2      	strh	r2, [r0, #14]
 8005fba:	6183      	str	r3, [r0, #24]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	2208      	movs	r2, #8
 8005fc0:	305c      	adds	r0, #92	@ 0x5c
 8005fc2:	f000 f92a 	bl	800621a <memset>
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ffc <std+0x58>)
 8005fc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005fca:	4b0d      	ldr	r3, [pc, #52]	@ (8006000 <std+0x5c>)
 8005fcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005fce:	4b0d      	ldr	r3, [pc, #52]	@ (8006004 <std+0x60>)
 8005fd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006008 <std+0x64>)
 8005fd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800600c <std+0x68>)
 8005fd8:	6224      	str	r4, [r4, #32]
 8005fda:	429c      	cmp	r4, r3
 8005fdc:	d006      	beq.n	8005fec <std+0x48>
 8005fde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005fe2:	4294      	cmp	r4, r2
 8005fe4:	d002      	beq.n	8005fec <std+0x48>
 8005fe6:	33d0      	adds	r3, #208	@ 0xd0
 8005fe8:	429c      	cmp	r4, r3
 8005fea:	d105      	bne.n	8005ff8 <std+0x54>
 8005fec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff4:	f000 b98e 	b.w	8006314 <__retarget_lock_init_recursive>
 8005ff8:	bd10      	pop	{r4, pc}
 8005ffa:	bf00      	nop
 8005ffc:	08006195 	.word	0x08006195
 8006000:	080061b7 	.word	0x080061b7
 8006004:	080061ef 	.word	0x080061ef
 8006008:	08006213 	.word	0x08006213
 800600c:	20000564 	.word	0x20000564

08006010 <stdio_exit_handler>:
 8006010:	4a02      	ldr	r2, [pc, #8]	@ (800601c <stdio_exit_handler+0xc>)
 8006012:	4903      	ldr	r1, [pc, #12]	@ (8006020 <stdio_exit_handler+0x10>)
 8006014:	4803      	ldr	r0, [pc, #12]	@ (8006024 <stdio_exit_handler+0x14>)
 8006016:	f000 b869 	b.w	80060ec <_fwalk_sglue>
 800601a:	bf00      	nop
 800601c:	20000038 	.word	0x20000038
 8006020:	08007cb5 	.word	0x08007cb5
 8006024:	20000048 	.word	0x20000048

08006028 <cleanup_stdio>:
 8006028:	6841      	ldr	r1, [r0, #4]
 800602a:	4b0c      	ldr	r3, [pc, #48]	@ (800605c <cleanup_stdio+0x34>)
 800602c:	4299      	cmp	r1, r3
 800602e:	b510      	push	{r4, lr}
 8006030:	4604      	mov	r4, r0
 8006032:	d001      	beq.n	8006038 <cleanup_stdio+0x10>
 8006034:	f001 fe3e 	bl	8007cb4 <_fflush_r>
 8006038:	68a1      	ldr	r1, [r4, #8]
 800603a:	4b09      	ldr	r3, [pc, #36]	@ (8006060 <cleanup_stdio+0x38>)
 800603c:	4299      	cmp	r1, r3
 800603e:	d002      	beq.n	8006046 <cleanup_stdio+0x1e>
 8006040:	4620      	mov	r0, r4
 8006042:	f001 fe37 	bl	8007cb4 <_fflush_r>
 8006046:	68e1      	ldr	r1, [r4, #12]
 8006048:	4b06      	ldr	r3, [pc, #24]	@ (8006064 <cleanup_stdio+0x3c>)
 800604a:	4299      	cmp	r1, r3
 800604c:	d004      	beq.n	8006058 <cleanup_stdio+0x30>
 800604e:	4620      	mov	r0, r4
 8006050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006054:	f001 be2e 	b.w	8007cb4 <_fflush_r>
 8006058:	bd10      	pop	{r4, pc}
 800605a:	bf00      	nop
 800605c:	20000564 	.word	0x20000564
 8006060:	200005cc 	.word	0x200005cc
 8006064:	20000634 	.word	0x20000634

08006068 <global_stdio_init.part.0>:
 8006068:	b510      	push	{r4, lr}
 800606a:	4b0b      	ldr	r3, [pc, #44]	@ (8006098 <global_stdio_init.part.0+0x30>)
 800606c:	4c0b      	ldr	r4, [pc, #44]	@ (800609c <global_stdio_init.part.0+0x34>)
 800606e:	4a0c      	ldr	r2, [pc, #48]	@ (80060a0 <global_stdio_init.part.0+0x38>)
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	4620      	mov	r0, r4
 8006074:	2200      	movs	r2, #0
 8006076:	2104      	movs	r1, #4
 8006078:	f7ff ff94 	bl	8005fa4 <std>
 800607c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006080:	2201      	movs	r2, #1
 8006082:	2109      	movs	r1, #9
 8006084:	f7ff ff8e 	bl	8005fa4 <std>
 8006088:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800608c:	2202      	movs	r2, #2
 800608e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006092:	2112      	movs	r1, #18
 8006094:	f7ff bf86 	b.w	8005fa4 <std>
 8006098:	2000069c 	.word	0x2000069c
 800609c:	20000564 	.word	0x20000564
 80060a0:	08006011 	.word	0x08006011

080060a4 <__sfp_lock_acquire>:
 80060a4:	4801      	ldr	r0, [pc, #4]	@ (80060ac <__sfp_lock_acquire+0x8>)
 80060a6:	f000 b936 	b.w	8006316 <__retarget_lock_acquire_recursive>
 80060aa:	bf00      	nop
 80060ac:	200006a5 	.word	0x200006a5

080060b0 <__sfp_lock_release>:
 80060b0:	4801      	ldr	r0, [pc, #4]	@ (80060b8 <__sfp_lock_release+0x8>)
 80060b2:	f000 b931 	b.w	8006318 <__retarget_lock_release_recursive>
 80060b6:	bf00      	nop
 80060b8:	200006a5 	.word	0x200006a5

080060bc <__sinit>:
 80060bc:	b510      	push	{r4, lr}
 80060be:	4604      	mov	r4, r0
 80060c0:	f7ff fff0 	bl	80060a4 <__sfp_lock_acquire>
 80060c4:	6a23      	ldr	r3, [r4, #32]
 80060c6:	b11b      	cbz	r3, 80060d0 <__sinit+0x14>
 80060c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060cc:	f7ff bff0 	b.w	80060b0 <__sfp_lock_release>
 80060d0:	4b04      	ldr	r3, [pc, #16]	@ (80060e4 <__sinit+0x28>)
 80060d2:	6223      	str	r3, [r4, #32]
 80060d4:	4b04      	ldr	r3, [pc, #16]	@ (80060e8 <__sinit+0x2c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f5      	bne.n	80060c8 <__sinit+0xc>
 80060dc:	f7ff ffc4 	bl	8006068 <global_stdio_init.part.0>
 80060e0:	e7f2      	b.n	80060c8 <__sinit+0xc>
 80060e2:	bf00      	nop
 80060e4:	08006029 	.word	0x08006029
 80060e8:	2000069c 	.word	0x2000069c

080060ec <_fwalk_sglue>:
 80060ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f0:	4607      	mov	r7, r0
 80060f2:	4688      	mov	r8, r1
 80060f4:	4614      	mov	r4, r2
 80060f6:	2600      	movs	r6, #0
 80060f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060fc:	f1b9 0901 	subs.w	r9, r9, #1
 8006100:	d505      	bpl.n	800610e <_fwalk_sglue+0x22>
 8006102:	6824      	ldr	r4, [r4, #0]
 8006104:	2c00      	cmp	r4, #0
 8006106:	d1f7      	bne.n	80060f8 <_fwalk_sglue+0xc>
 8006108:	4630      	mov	r0, r6
 800610a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800610e:	89ab      	ldrh	r3, [r5, #12]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d907      	bls.n	8006124 <_fwalk_sglue+0x38>
 8006114:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006118:	3301      	adds	r3, #1
 800611a:	d003      	beq.n	8006124 <_fwalk_sglue+0x38>
 800611c:	4629      	mov	r1, r5
 800611e:	4638      	mov	r0, r7
 8006120:	47c0      	blx	r8
 8006122:	4306      	orrs	r6, r0
 8006124:	3568      	adds	r5, #104	@ 0x68
 8006126:	e7e9      	b.n	80060fc <_fwalk_sglue+0x10>

08006128 <sniprintf>:
 8006128:	b40c      	push	{r2, r3}
 800612a:	b530      	push	{r4, r5, lr}
 800612c:	4b18      	ldr	r3, [pc, #96]	@ (8006190 <sniprintf+0x68>)
 800612e:	1e0c      	subs	r4, r1, #0
 8006130:	681d      	ldr	r5, [r3, #0]
 8006132:	b09d      	sub	sp, #116	@ 0x74
 8006134:	da08      	bge.n	8006148 <sniprintf+0x20>
 8006136:	238b      	movs	r3, #139	@ 0x8b
 8006138:	602b      	str	r3, [r5, #0]
 800613a:	f04f 30ff 	mov.w	r0, #4294967295
 800613e:	b01d      	add	sp, #116	@ 0x74
 8006140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006144:	b002      	add	sp, #8
 8006146:	4770      	bx	lr
 8006148:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800614c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006156:	bf14      	ite	ne
 8006158:	f104 33ff 	addne.w	r3, r4, #4294967295
 800615c:	4623      	moveq	r3, r4
 800615e:	9304      	str	r3, [sp, #16]
 8006160:	9307      	str	r3, [sp, #28]
 8006162:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006166:	9002      	str	r0, [sp, #8]
 8006168:	9006      	str	r0, [sp, #24]
 800616a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800616e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006170:	ab21      	add	r3, sp, #132	@ 0x84
 8006172:	a902      	add	r1, sp, #8
 8006174:	4628      	mov	r0, r5
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	f001 fc1c 	bl	80079b4 <_svfiprintf_r>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	bfbc      	itt	lt
 8006180:	238b      	movlt	r3, #139	@ 0x8b
 8006182:	602b      	strlt	r3, [r5, #0]
 8006184:	2c00      	cmp	r4, #0
 8006186:	d0da      	beq.n	800613e <sniprintf+0x16>
 8006188:	9b02      	ldr	r3, [sp, #8]
 800618a:	2200      	movs	r2, #0
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	e7d6      	b.n	800613e <sniprintf+0x16>
 8006190:	20000044 	.word	0x20000044

08006194 <__sread>:
 8006194:	b510      	push	{r4, lr}
 8006196:	460c      	mov	r4, r1
 8006198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800619c:	f000 f86c 	bl	8006278 <_read_r>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	bfab      	itete	ge
 80061a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80061a6:	89a3      	ldrhlt	r3, [r4, #12]
 80061a8:	181b      	addge	r3, r3, r0
 80061aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061ae:	bfac      	ite	ge
 80061b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061b2:	81a3      	strhlt	r3, [r4, #12]
 80061b4:	bd10      	pop	{r4, pc}

080061b6 <__swrite>:
 80061b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ba:	461f      	mov	r7, r3
 80061bc:	898b      	ldrh	r3, [r1, #12]
 80061be:	05db      	lsls	r3, r3, #23
 80061c0:	4605      	mov	r5, r0
 80061c2:	460c      	mov	r4, r1
 80061c4:	4616      	mov	r6, r2
 80061c6:	d505      	bpl.n	80061d4 <__swrite+0x1e>
 80061c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061cc:	2302      	movs	r3, #2
 80061ce:	2200      	movs	r2, #0
 80061d0:	f000 f840 	bl	8006254 <_lseek_r>
 80061d4:	89a3      	ldrh	r3, [r4, #12]
 80061d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061de:	81a3      	strh	r3, [r4, #12]
 80061e0:	4632      	mov	r2, r6
 80061e2:	463b      	mov	r3, r7
 80061e4:	4628      	mov	r0, r5
 80061e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061ea:	f000 b857 	b.w	800629c <_write_r>

080061ee <__sseek>:
 80061ee:	b510      	push	{r4, lr}
 80061f0:	460c      	mov	r4, r1
 80061f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f6:	f000 f82d 	bl	8006254 <_lseek_r>
 80061fa:	1c43      	adds	r3, r0, #1
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	bf15      	itete	ne
 8006200:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006202:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006206:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800620a:	81a3      	strheq	r3, [r4, #12]
 800620c:	bf18      	it	ne
 800620e:	81a3      	strhne	r3, [r4, #12]
 8006210:	bd10      	pop	{r4, pc}

08006212 <__sclose>:
 8006212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006216:	f000 b80d 	b.w	8006234 <_close_r>

0800621a <memset>:
 800621a:	4402      	add	r2, r0
 800621c:	4603      	mov	r3, r0
 800621e:	4293      	cmp	r3, r2
 8006220:	d100      	bne.n	8006224 <memset+0xa>
 8006222:	4770      	bx	lr
 8006224:	f803 1b01 	strb.w	r1, [r3], #1
 8006228:	e7f9      	b.n	800621e <memset+0x4>
	...

0800622c <_localeconv_r>:
 800622c:	4800      	ldr	r0, [pc, #0]	@ (8006230 <_localeconv_r+0x4>)
 800622e:	4770      	bx	lr
 8006230:	20000184 	.word	0x20000184

08006234 <_close_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4d06      	ldr	r5, [pc, #24]	@ (8006250 <_close_r+0x1c>)
 8006238:	2300      	movs	r3, #0
 800623a:	4604      	mov	r4, r0
 800623c:	4608      	mov	r0, r1
 800623e:	602b      	str	r3, [r5, #0]
 8006240:	f7fb fdd6 	bl	8001df0 <_close>
 8006244:	1c43      	adds	r3, r0, #1
 8006246:	d102      	bne.n	800624e <_close_r+0x1a>
 8006248:	682b      	ldr	r3, [r5, #0]
 800624a:	b103      	cbz	r3, 800624e <_close_r+0x1a>
 800624c:	6023      	str	r3, [r4, #0]
 800624e:	bd38      	pop	{r3, r4, r5, pc}
 8006250:	200006a0 	.word	0x200006a0

08006254 <_lseek_r>:
 8006254:	b538      	push	{r3, r4, r5, lr}
 8006256:	4d07      	ldr	r5, [pc, #28]	@ (8006274 <_lseek_r+0x20>)
 8006258:	4604      	mov	r4, r0
 800625a:	4608      	mov	r0, r1
 800625c:	4611      	mov	r1, r2
 800625e:	2200      	movs	r2, #0
 8006260:	602a      	str	r2, [r5, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	f7fb fdeb 	bl	8001e3e <_lseek>
 8006268:	1c43      	adds	r3, r0, #1
 800626a:	d102      	bne.n	8006272 <_lseek_r+0x1e>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	b103      	cbz	r3, 8006272 <_lseek_r+0x1e>
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	bd38      	pop	{r3, r4, r5, pc}
 8006274:	200006a0 	.word	0x200006a0

08006278 <_read_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	4d07      	ldr	r5, [pc, #28]	@ (8006298 <_read_r+0x20>)
 800627c:	4604      	mov	r4, r0
 800627e:	4608      	mov	r0, r1
 8006280:	4611      	mov	r1, r2
 8006282:	2200      	movs	r2, #0
 8006284:	602a      	str	r2, [r5, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	f7fb fd79 	bl	8001d7e <_read>
 800628c:	1c43      	adds	r3, r0, #1
 800628e:	d102      	bne.n	8006296 <_read_r+0x1e>
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	b103      	cbz	r3, 8006296 <_read_r+0x1e>
 8006294:	6023      	str	r3, [r4, #0]
 8006296:	bd38      	pop	{r3, r4, r5, pc}
 8006298:	200006a0 	.word	0x200006a0

0800629c <_write_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4d07      	ldr	r5, [pc, #28]	@ (80062bc <_write_r+0x20>)
 80062a0:	4604      	mov	r4, r0
 80062a2:	4608      	mov	r0, r1
 80062a4:	4611      	mov	r1, r2
 80062a6:	2200      	movs	r2, #0
 80062a8:	602a      	str	r2, [r5, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	f7fb fd84 	bl	8001db8 <_write>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d102      	bne.n	80062ba <_write_r+0x1e>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b103      	cbz	r3, 80062ba <_write_r+0x1e>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	200006a0 	.word	0x200006a0

080062c0 <__errno>:
 80062c0:	4b01      	ldr	r3, [pc, #4]	@ (80062c8 <__errno+0x8>)
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	20000044 	.word	0x20000044

080062cc <__libc_init_array>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	4d0d      	ldr	r5, [pc, #52]	@ (8006304 <__libc_init_array+0x38>)
 80062d0:	4c0d      	ldr	r4, [pc, #52]	@ (8006308 <__libc_init_array+0x3c>)
 80062d2:	1b64      	subs	r4, r4, r5
 80062d4:	10a4      	asrs	r4, r4, #2
 80062d6:	2600      	movs	r6, #0
 80062d8:	42a6      	cmp	r6, r4
 80062da:	d109      	bne.n	80062f0 <__libc_init_array+0x24>
 80062dc:	4d0b      	ldr	r5, [pc, #44]	@ (800630c <__libc_init_array+0x40>)
 80062de:	4c0c      	ldr	r4, [pc, #48]	@ (8006310 <__libc_init_array+0x44>)
 80062e0:	f002 f868 	bl	80083b4 <_init>
 80062e4:	1b64      	subs	r4, r4, r5
 80062e6:	10a4      	asrs	r4, r4, #2
 80062e8:	2600      	movs	r6, #0
 80062ea:	42a6      	cmp	r6, r4
 80062ec:	d105      	bne.n	80062fa <__libc_init_array+0x2e>
 80062ee:	bd70      	pop	{r4, r5, r6, pc}
 80062f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062f4:	4798      	blx	r3
 80062f6:	3601      	adds	r6, #1
 80062f8:	e7ee      	b.n	80062d8 <__libc_init_array+0xc>
 80062fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80062fe:	4798      	blx	r3
 8006300:	3601      	adds	r6, #1
 8006302:	e7f2      	b.n	80062ea <__libc_init_array+0x1e>
 8006304:	08008a2c 	.word	0x08008a2c
 8006308:	08008a2c 	.word	0x08008a2c
 800630c:	08008a2c 	.word	0x08008a2c
 8006310:	08008a30 	.word	0x08008a30

08006314 <__retarget_lock_init_recursive>:
 8006314:	4770      	bx	lr

08006316 <__retarget_lock_acquire_recursive>:
 8006316:	4770      	bx	lr

08006318 <__retarget_lock_release_recursive>:
 8006318:	4770      	bx	lr
	...

0800631c <__assert_func>:
 800631c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800631e:	4614      	mov	r4, r2
 8006320:	461a      	mov	r2, r3
 8006322:	4b09      	ldr	r3, [pc, #36]	@ (8006348 <__assert_func+0x2c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4605      	mov	r5, r0
 8006328:	68d8      	ldr	r0, [r3, #12]
 800632a:	b14c      	cbz	r4, 8006340 <__assert_func+0x24>
 800632c:	4b07      	ldr	r3, [pc, #28]	@ (800634c <__assert_func+0x30>)
 800632e:	9100      	str	r1, [sp, #0]
 8006330:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006334:	4906      	ldr	r1, [pc, #24]	@ (8006350 <__assert_func+0x34>)
 8006336:	462b      	mov	r3, r5
 8006338:	f001 fce4 	bl	8007d04 <fiprintf>
 800633c:	f001 fd2c 	bl	8007d98 <abort>
 8006340:	4b04      	ldr	r3, [pc, #16]	@ (8006354 <__assert_func+0x38>)
 8006342:	461c      	mov	r4, r3
 8006344:	e7f3      	b.n	800632e <__assert_func+0x12>
 8006346:	bf00      	nop
 8006348:	20000044 	.word	0x20000044
 800634c:	080086f7 	.word	0x080086f7
 8006350:	08008704 	.word	0x08008704
 8006354:	08008732 	.word	0x08008732

08006358 <quorem>:
 8006358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635c:	6903      	ldr	r3, [r0, #16]
 800635e:	690c      	ldr	r4, [r1, #16]
 8006360:	42a3      	cmp	r3, r4
 8006362:	4607      	mov	r7, r0
 8006364:	db7e      	blt.n	8006464 <quorem+0x10c>
 8006366:	3c01      	subs	r4, #1
 8006368:	f101 0814 	add.w	r8, r1, #20
 800636c:	00a3      	lsls	r3, r4, #2
 800636e:	f100 0514 	add.w	r5, r0, #20
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006378:	9301      	str	r3, [sp, #4]
 800637a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800637e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006382:	3301      	adds	r3, #1
 8006384:	429a      	cmp	r2, r3
 8006386:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800638a:	fbb2 f6f3 	udiv	r6, r2, r3
 800638e:	d32e      	bcc.n	80063ee <quorem+0x96>
 8006390:	f04f 0a00 	mov.w	sl, #0
 8006394:	46c4      	mov	ip, r8
 8006396:	46ae      	mov	lr, r5
 8006398:	46d3      	mov	fp, sl
 800639a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800639e:	b298      	uxth	r0, r3
 80063a0:	fb06 a000 	mla	r0, r6, r0, sl
 80063a4:	0c02      	lsrs	r2, r0, #16
 80063a6:	0c1b      	lsrs	r3, r3, #16
 80063a8:	fb06 2303 	mla	r3, r6, r3, r2
 80063ac:	f8de 2000 	ldr.w	r2, [lr]
 80063b0:	b280      	uxth	r0, r0
 80063b2:	b292      	uxth	r2, r2
 80063b4:	1a12      	subs	r2, r2, r0
 80063b6:	445a      	add	r2, fp
 80063b8:	f8de 0000 	ldr.w	r0, [lr]
 80063bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80063c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80063ca:	b292      	uxth	r2, r2
 80063cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80063d0:	45e1      	cmp	r9, ip
 80063d2:	f84e 2b04 	str.w	r2, [lr], #4
 80063d6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80063da:	d2de      	bcs.n	800639a <quorem+0x42>
 80063dc:	9b00      	ldr	r3, [sp, #0]
 80063de:	58eb      	ldr	r3, [r5, r3]
 80063e0:	b92b      	cbnz	r3, 80063ee <quorem+0x96>
 80063e2:	9b01      	ldr	r3, [sp, #4]
 80063e4:	3b04      	subs	r3, #4
 80063e6:	429d      	cmp	r5, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	d32f      	bcc.n	800644c <quorem+0xf4>
 80063ec:	613c      	str	r4, [r7, #16]
 80063ee:	4638      	mov	r0, r7
 80063f0:	f001 f97c 	bl	80076ec <__mcmp>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	db25      	blt.n	8006444 <quorem+0xec>
 80063f8:	4629      	mov	r1, r5
 80063fa:	2000      	movs	r0, #0
 80063fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006400:	f8d1 c000 	ldr.w	ip, [r1]
 8006404:	fa1f fe82 	uxth.w	lr, r2
 8006408:	fa1f f38c 	uxth.w	r3, ip
 800640c:	eba3 030e 	sub.w	r3, r3, lr
 8006410:	4403      	add	r3, r0
 8006412:	0c12      	lsrs	r2, r2, #16
 8006414:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006418:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800641c:	b29b      	uxth	r3, r3
 800641e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006422:	45c1      	cmp	r9, r8
 8006424:	f841 3b04 	str.w	r3, [r1], #4
 8006428:	ea4f 4022 	mov.w	r0, r2, asr #16
 800642c:	d2e6      	bcs.n	80063fc <quorem+0xa4>
 800642e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006436:	b922      	cbnz	r2, 8006442 <quorem+0xea>
 8006438:	3b04      	subs	r3, #4
 800643a:	429d      	cmp	r5, r3
 800643c:	461a      	mov	r2, r3
 800643e:	d30b      	bcc.n	8006458 <quorem+0x100>
 8006440:	613c      	str	r4, [r7, #16]
 8006442:	3601      	adds	r6, #1
 8006444:	4630      	mov	r0, r6
 8006446:	b003      	add	sp, #12
 8006448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644c:	6812      	ldr	r2, [r2, #0]
 800644e:	3b04      	subs	r3, #4
 8006450:	2a00      	cmp	r2, #0
 8006452:	d1cb      	bne.n	80063ec <quorem+0x94>
 8006454:	3c01      	subs	r4, #1
 8006456:	e7c6      	b.n	80063e6 <quorem+0x8e>
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	3b04      	subs	r3, #4
 800645c:	2a00      	cmp	r2, #0
 800645e:	d1ef      	bne.n	8006440 <quorem+0xe8>
 8006460:	3c01      	subs	r4, #1
 8006462:	e7ea      	b.n	800643a <quorem+0xe2>
 8006464:	2000      	movs	r0, #0
 8006466:	e7ee      	b.n	8006446 <quorem+0xee>

08006468 <_dtoa_r>:
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	69c7      	ldr	r7, [r0, #28]
 800646e:	b097      	sub	sp, #92	@ 0x5c
 8006470:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006474:	ec55 4b10 	vmov	r4, r5, d0
 8006478:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800647a:	9107      	str	r1, [sp, #28]
 800647c:	4681      	mov	r9, r0
 800647e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006480:	9311      	str	r3, [sp, #68]	@ 0x44
 8006482:	b97f      	cbnz	r7, 80064a4 <_dtoa_r+0x3c>
 8006484:	2010      	movs	r0, #16
 8006486:	f000 fe09 	bl	800709c <malloc>
 800648a:	4602      	mov	r2, r0
 800648c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006490:	b920      	cbnz	r0, 800649c <_dtoa_r+0x34>
 8006492:	4ba9      	ldr	r3, [pc, #676]	@ (8006738 <_dtoa_r+0x2d0>)
 8006494:	21ef      	movs	r1, #239	@ 0xef
 8006496:	48a9      	ldr	r0, [pc, #676]	@ (800673c <_dtoa_r+0x2d4>)
 8006498:	f7ff ff40 	bl	800631c <__assert_func>
 800649c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80064a0:	6007      	str	r7, [r0, #0]
 80064a2:	60c7      	str	r7, [r0, #12]
 80064a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064a8:	6819      	ldr	r1, [r3, #0]
 80064aa:	b159      	cbz	r1, 80064c4 <_dtoa_r+0x5c>
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	604a      	str	r2, [r1, #4]
 80064b0:	2301      	movs	r3, #1
 80064b2:	4093      	lsls	r3, r2
 80064b4:	608b      	str	r3, [r1, #8]
 80064b6:	4648      	mov	r0, r9
 80064b8:	f000 fee6 	bl	8007288 <_Bfree>
 80064bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064c0:	2200      	movs	r2, #0
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	1e2b      	subs	r3, r5, #0
 80064c6:	bfb9      	ittee	lt
 80064c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80064cc:	9305      	strlt	r3, [sp, #20]
 80064ce:	2300      	movge	r3, #0
 80064d0:	6033      	strge	r3, [r6, #0]
 80064d2:	9f05      	ldr	r7, [sp, #20]
 80064d4:	4b9a      	ldr	r3, [pc, #616]	@ (8006740 <_dtoa_r+0x2d8>)
 80064d6:	bfbc      	itt	lt
 80064d8:	2201      	movlt	r2, #1
 80064da:	6032      	strlt	r2, [r6, #0]
 80064dc:	43bb      	bics	r3, r7
 80064de:	d112      	bne.n	8006506 <_dtoa_r+0x9e>
 80064e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80064e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80064ec:	4323      	orrs	r3, r4
 80064ee:	f000 855a 	beq.w	8006fa6 <_dtoa_r+0xb3e>
 80064f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80064f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006754 <_dtoa_r+0x2ec>
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 855c 	beq.w	8006fb6 <_dtoa_r+0xb4e>
 80064fe:	f10a 0303 	add.w	r3, sl, #3
 8006502:	f000 bd56 	b.w	8006fb2 <_dtoa_r+0xb4a>
 8006506:	ed9d 7b04 	vldr	d7, [sp, #16]
 800650a:	2200      	movs	r2, #0
 800650c:	ec51 0b17 	vmov	r0, r1, d7
 8006510:	2300      	movs	r3, #0
 8006512:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006516:	f7fa faf7 	bl	8000b08 <__aeabi_dcmpeq>
 800651a:	4680      	mov	r8, r0
 800651c:	b158      	cbz	r0, 8006536 <_dtoa_r+0xce>
 800651e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006520:	2301      	movs	r3, #1
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006526:	b113      	cbz	r3, 800652e <_dtoa_r+0xc6>
 8006528:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800652a:	4b86      	ldr	r3, [pc, #536]	@ (8006744 <_dtoa_r+0x2dc>)
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006758 <_dtoa_r+0x2f0>
 8006532:	f000 bd40 	b.w	8006fb6 <_dtoa_r+0xb4e>
 8006536:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800653a:	aa14      	add	r2, sp, #80	@ 0x50
 800653c:	a915      	add	r1, sp, #84	@ 0x54
 800653e:	4648      	mov	r0, r9
 8006540:	f001 f984 	bl	800784c <__d2b>
 8006544:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006548:	9002      	str	r0, [sp, #8]
 800654a:	2e00      	cmp	r6, #0
 800654c:	d078      	beq.n	8006640 <_dtoa_r+0x1d8>
 800654e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006550:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006558:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800655c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006560:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006564:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006568:	4619      	mov	r1, r3
 800656a:	2200      	movs	r2, #0
 800656c:	4b76      	ldr	r3, [pc, #472]	@ (8006748 <_dtoa_r+0x2e0>)
 800656e:	f7f9 feab 	bl	80002c8 <__aeabi_dsub>
 8006572:	a36b      	add	r3, pc, #428	@ (adr r3, 8006720 <_dtoa_r+0x2b8>)
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f7fa f85e 	bl	8000638 <__aeabi_dmul>
 800657c:	a36a      	add	r3, pc, #424	@ (adr r3, 8006728 <_dtoa_r+0x2c0>)
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	f7f9 fea3 	bl	80002cc <__adddf3>
 8006586:	4604      	mov	r4, r0
 8006588:	4630      	mov	r0, r6
 800658a:	460d      	mov	r5, r1
 800658c:	f7f9 ffea 	bl	8000564 <__aeabi_i2d>
 8006590:	a367      	add	r3, pc, #412	@ (adr r3, 8006730 <_dtoa_r+0x2c8>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f7fa f84f 	bl	8000638 <__aeabi_dmul>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4620      	mov	r0, r4
 80065a0:	4629      	mov	r1, r5
 80065a2:	f7f9 fe93 	bl	80002cc <__adddf3>
 80065a6:	4604      	mov	r4, r0
 80065a8:	460d      	mov	r5, r1
 80065aa:	f7fa faf5 	bl	8000b98 <__aeabi_d2iz>
 80065ae:	2200      	movs	r2, #0
 80065b0:	4607      	mov	r7, r0
 80065b2:	2300      	movs	r3, #0
 80065b4:	4620      	mov	r0, r4
 80065b6:	4629      	mov	r1, r5
 80065b8:	f7fa fab0 	bl	8000b1c <__aeabi_dcmplt>
 80065bc:	b140      	cbz	r0, 80065d0 <_dtoa_r+0x168>
 80065be:	4638      	mov	r0, r7
 80065c0:	f7f9 ffd0 	bl	8000564 <__aeabi_i2d>
 80065c4:	4622      	mov	r2, r4
 80065c6:	462b      	mov	r3, r5
 80065c8:	f7fa fa9e 	bl	8000b08 <__aeabi_dcmpeq>
 80065cc:	b900      	cbnz	r0, 80065d0 <_dtoa_r+0x168>
 80065ce:	3f01      	subs	r7, #1
 80065d0:	2f16      	cmp	r7, #22
 80065d2:	d852      	bhi.n	800667a <_dtoa_r+0x212>
 80065d4:	4b5d      	ldr	r3, [pc, #372]	@ (800674c <_dtoa_r+0x2e4>)
 80065d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80065e2:	f7fa fa9b 	bl	8000b1c <__aeabi_dcmplt>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d049      	beq.n	800667e <_dtoa_r+0x216>
 80065ea:	3f01      	subs	r7, #1
 80065ec:	2300      	movs	r3, #0
 80065ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80065f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80065f2:	1b9b      	subs	r3, r3, r6
 80065f4:	1e5a      	subs	r2, r3, #1
 80065f6:	bf45      	ittet	mi
 80065f8:	f1c3 0301 	rsbmi	r3, r3, #1
 80065fc:	9300      	strmi	r3, [sp, #0]
 80065fe:	2300      	movpl	r3, #0
 8006600:	2300      	movmi	r3, #0
 8006602:	9206      	str	r2, [sp, #24]
 8006604:	bf54      	ite	pl
 8006606:	9300      	strpl	r3, [sp, #0]
 8006608:	9306      	strmi	r3, [sp, #24]
 800660a:	2f00      	cmp	r7, #0
 800660c:	db39      	blt.n	8006682 <_dtoa_r+0x21a>
 800660e:	9b06      	ldr	r3, [sp, #24]
 8006610:	970d      	str	r7, [sp, #52]	@ 0x34
 8006612:	443b      	add	r3, r7
 8006614:	9306      	str	r3, [sp, #24]
 8006616:	2300      	movs	r3, #0
 8006618:	9308      	str	r3, [sp, #32]
 800661a:	9b07      	ldr	r3, [sp, #28]
 800661c:	2b09      	cmp	r3, #9
 800661e:	d863      	bhi.n	80066e8 <_dtoa_r+0x280>
 8006620:	2b05      	cmp	r3, #5
 8006622:	bfc4      	itt	gt
 8006624:	3b04      	subgt	r3, #4
 8006626:	9307      	strgt	r3, [sp, #28]
 8006628:	9b07      	ldr	r3, [sp, #28]
 800662a:	f1a3 0302 	sub.w	r3, r3, #2
 800662e:	bfcc      	ite	gt
 8006630:	2400      	movgt	r4, #0
 8006632:	2401      	movle	r4, #1
 8006634:	2b03      	cmp	r3, #3
 8006636:	d863      	bhi.n	8006700 <_dtoa_r+0x298>
 8006638:	e8df f003 	tbb	[pc, r3]
 800663c:	2b375452 	.word	0x2b375452
 8006640:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006644:	441e      	add	r6, r3
 8006646:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800664a:	2b20      	cmp	r3, #32
 800664c:	bfc1      	itttt	gt
 800664e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006652:	409f      	lslgt	r7, r3
 8006654:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006658:	fa24 f303 	lsrgt.w	r3, r4, r3
 800665c:	bfd6      	itet	le
 800665e:	f1c3 0320 	rsble	r3, r3, #32
 8006662:	ea47 0003 	orrgt.w	r0, r7, r3
 8006666:	fa04 f003 	lslle.w	r0, r4, r3
 800666a:	f7f9 ff6b 	bl	8000544 <__aeabi_ui2d>
 800666e:	2201      	movs	r2, #1
 8006670:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006674:	3e01      	subs	r6, #1
 8006676:	9212      	str	r2, [sp, #72]	@ 0x48
 8006678:	e776      	b.n	8006568 <_dtoa_r+0x100>
 800667a:	2301      	movs	r3, #1
 800667c:	e7b7      	b.n	80065ee <_dtoa_r+0x186>
 800667e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006680:	e7b6      	b.n	80065f0 <_dtoa_r+0x188>
 8006682:	9b00      	ldr	r3, [sp, #0]
 8006684:	1bdb      	subs	r3, r3, r7
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	427b      	negs	r3, r7
 800668a:	9308      	str	r3, [sp, #32]
 800668c:	2300      	movs	r3, #0
 800668e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006690:	e7c3      	b.n	800661a <_dtoa_r+0x1b2>
 8006692:	2301      	movs	r3, #1
 8006694:	9309      	str	r3, [sp, #36]	@ 0x24
 8006696:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006698:	eb07 0b03 	add.w	fp, r7, r3
 800669c:	f10b 0301 	add.w	r3, fp, #1
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	9303      	str	r3, [sp, #12]
 80066a4:	bfb8      	it	lt
 80066a6:	2301      	movlt	r3, #1
 80066a8:	e006      	b.n	80066b8 <_dtoa_r+0x250>
 80066aa:	2301      	movs	r3, #1
 80066ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80066ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	dd28      	ble.n	8006706 <_dtoa_r+0x29e>
 80066b4:	469b      	mov	fp, r3
 80066b6:	9303      	str	r3, [sp, #12]
 80066b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80066bc:	2100      	movs	r1, #0
 80066be:	2204      	movs	r2, #4
 80066c0:	f102 0514 	add.w	r5, r2, #20
 80066c4:	429d      	cmp	r5, r3
 80066c6:	d926      	bls.n	8006716 <_dtoa_r+0x2ae>
 80066c8:	6041      	str	r1, [r0, #4]
 80066ca:	4648      	mov	r0, r9
 80066cc:	f000 fd9c 	bl	8007208 <_Balloc>
 80066d0:	4682      	mov	sl, r0
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d142      	bne.n	800675c <_dtoa_r+0x2f4>
 80066d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006750 <_dtoa_r+0x2e8>)
 80066d8:	4602      	mov	r2, r0
 80066da:	f240 11af 	movw	r1, #431	@ 0x1af
 80066de:	e6da      	b.n	8006496 <_dtoa_r+0x2e>
 80066e0:	2300      	movs	r3, #0
 80066e2:	e7e3      	b.n	80066ac <_dtoa_r+0x244>
 80066e4:	2300      	movs	r3, #0
 80066e6:	e7d5      	b.n	8006694 <_dtoa_r+0x22c>
 80066e8:	2401      	movs	r4, #1
 80066ea:	2300      	movs	r3, #0
 80066ec:	9307      	str	r3, [sp, #28]
 80066ee:	9409      	str	r4, [sp, #36]	@ 0x24
 80066f0:	f04f 3bff 	mov.w	fp, #4294967295
 80066f4:	2200      	movs	r2, #0
 80066f6:	f8cd b00c 	str.w	fp, [sp, #12]
 80066fa:	2312      	movs	r3, #18
 80066fc:	920c      	str	r2, [sp, #48]	@ 0x30
 80066fe:	e7db      	b.n	80066b8 <_dtoa_r+0x250>
 8006700:	2301      	movs	r3, #1
 8006702:	9309      	str	r3, [sp, #36]	@ 0x24
 8006704:	e7f4      	b.n	80066f0 <_dtoa_r+0x288>
 8006706:	f04f 0b01 	mov.w	fp, #1
 800670a:	f8cd b00c 	str.w	fp, [sp, #12]
 800670e:	465b      	mov	r3, fp
 8006710:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006714:	e7d0      	b.n	80066b8 <_dtoa_r+0x250>
 8006716:	3101      	adds	r1, #1
 8006718:	0052      	lsls	r2, r2, #1
 800671a:	e7d1      	b.n	80066c0 <_dtoa_r+0x258>
 800671c:	f3af 8000 	nop.w
 8006720:	636f4361 	.word	0x636f4361
 8006724:	3fd287a7 	.word	0x3fd287a7
 8006728:	8b60c8b3 	.word	0x8b60c8b3
 800672c:	3fc68a28 	.word	0x3fc68a28
 8006730:	509f79fb 	.word	0x509f79fb
 8006734:	3fd34413 	.word	0x3fd34413
 8006738:	08008654 	.word	0x08008654
 800673c:	08008740 	.word	0x08008740
 8006740:	7ff00000 	.word	0x7ff00000
 8006744:	080086d4 	.word	0x080086d4
 8006748:	3ff80000 	.word	0x3ff80000
 800674c:	08008858 	.word	0x08008858
 8006750:	08008798 	.word	0x08008798
 8006754:	0800873c 	.word	0x0800873c
 8006758:	080086d3 	.word	0x080086d3
 800675c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006760:	6018      	str	r0, [r3, #0]
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	2b0e      	cmp	r3, #14
 8006766:	f200 80a1 	bhi.w	80068ac <_dtoa_r+0x444>
 800676a:	2c00      	cmp	r4, #0
 800676c:	f000 809e 	beq.w	80068ac <_dtoa_r+0x444>
 8006770:	2f00      	cmp	r7, #0
 8006772:	dd33      	ble.n	80067dc <_dtoa_r+0x374>
 8006774:	4b9c      	ldr	r3, [pc, #624]	@ (80069e8 <_dtoa_r+0x580>)
 8006776:	f007 020f 	and.w	r2, r7, #15
 800677a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800677e:	ed93 7b00 	vldr	d7, [r3]
 8006782:	05f8      	lsls	r0, r7, #23
 8006784:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006788:	ea4f 1427 	mov.w	r4, r7, asr #4
 800678c:	d516      	bpl.n	80067bc <_dtoa_r+0x354>
 800678e:	4b97      	ldr	r3, [pc, #604]	@ (80069ec <_dtoa_r+0x584>)
 8006790:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006794:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006798:	f7fa f878 	bl	800088c <__aeabi_ddiv>
 800679c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067a0:	f004 040f 	and.w	r4, r4, #15
 80067a4:	2603      	movs	r6, #3
 80067a6:	4d91      	ldr	r5, [pc, #580]	@ (80069ec <_dtoa_r+0x584>)
 80067a8:	b954      	cbnz	r4, 80067c0 <_dtoa_r+0x358>
 80067aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80067ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067b2:	f7fa f86b 	bl	800088c <__aeabi_ddiv>
 80067b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067ba:	e028      	b.n	800680e <_dtoa_r+0x3a6>
 80067bc:	2602      	movs	r6, #2
 80067be:	e7f2      	b.n	80067a6 <_dtoa_r+0x33e>
 80067c0:	07e1      	lsls	r1, r4, #31
 80067c2:	d508      	bpl.n	80067d6 <_dtoa_r+0x36e>
 80067c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80067c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80067cc:	f7f9 ff34 	bl	8000638 <__aeabi_dmul>
 80067d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80067d4:	3601      	adds	r6, #1
 80067d6:	1064      	asrs	r4, r4, #1
 80067d8:	3508      	adds	r5, #8
 80067da:	e7e5      	b.n	80067a8 <_dtoa_r+0x340>
 80067dc:	f000 80af 	beq.w	800693e <_dtoa_r+0x4d6>
 80067e0:	427c      	negs	r4, r7
 80067e2:	4b81      	ldr	r3, [pc, #516]	@ (80069e8 <_dtoa_r+0x580>)
 80067e4:	4d81      	ldr	r5, [pc, #516]	@ (80069ec <_dtoa_r+0x584>)
 80067e6:	f004 020f 	and.w	r2, r4, #15
 80067ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80067f6:	f7f9 ff1f 	bl	8000638 <__aeabi_dmul>
 80067fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067fe:	1124      	asrs	r4, r4, #4
 8006800:	2300      	movs	r3, #0
 8006802:	2602      	movs	r6, #2
 8006804:	2c00      	cmp	r4, #0
 8006806:	f040 808f 	bne.w	8006928 <_dtoa_r+0x4c0>
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1d3      	bne.n	80067b6 <_dtoa_r+0x34e>
 800680e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006810:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 8094 	beq.w	8006942 <_dtoa_r+0x4da>
 800681a:	4b75      	ldr	r3, [pc, #468]	@ (80069f0 <_dtoa_r+0x588>)
 800681c:	2200      	movs	r2, #0
 800681e:	4620      	mov	r0, r4
 8006820:	4629      	mov	r1, r5
 8006822:	f7fa f97b 	bl	8000b1c <__aeabi_dcmplt>
 8006826:	2800      	cmp	r0, #0
 8006828:	f000 808b 	beq.w	8006942 <_dtoa_r+0x4da>
 800682c:	9b03      	ldr	r3, [sp, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	f000 8087 	beq.w	8006942 <_dtoa_r+0x4da>
 8006834:	f1bb 0f00 	cmp.w	fp, #0
 8006838:	dd34      	ble.n	80068a4 <_dtoa_r+0x43c>
 800683a:	4620      	mov	r0, r4
 800683c:	4b6d      	ldr	r3, [pc, #436]	@ (80069f4 <_dtoa_r+0x58c>)
 800683e:	2200      	movs	r2, #0
 8006840:	4629      	mov	r1, r5
 8006842:	f7f9 fef9 	bl	8000638 <__aeabi_dmul>
 8006846:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800684a:	f107 38ff 	add.w	r8, r7, #4294967295
 800684e:	3601      	adds	r6, #1
 8006850:	465c      	mov	r4, fp
 8006852:	4630      	mov	r0, r6
 8006854:	f7f9 fe86 	bl	8000564 <__aeabi_i2d>
 8006858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800685c:	f7f9 feec 	bl	8000638 <__aeabi_dmul>
 8006860:	4b65      	ldr	r3, [pc, #404]	@ (80069f8 <_dtoa_r+0x590>)
 8006862:	2200      	movs	r2, #0
 8006864:	f7f9 fd32 	bl	80002cc <__adddf3>
 8006868:	4605      	mov	r5, r0
 800686a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800686e:	2c00      	cmp	r4, #0
 8006870:	d16a      	bne.n	8006948 <_dtoa_r+0x4e0>
 8006872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006876:	4b61      	ldr	r3, [pc, #388]	@ (80069fc <_dtoa_r+0x594>)
 8006878:	2200      	movs	r2, #0
 800687a:	f7f9 fd25 	bl	80002c8 <__aeabi_dsub>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006886:	462a      	mov	r2, r5
 8006888:	4633      	mov	r3, r6
 800688a:	f7fa f965 	bl	8000b58 <__aeabi_dcmpgt>
 800688e:	2800      	cmp	r0, #0
 8006890:	f040 8298 	bne.w	8006dc4 <_dtoa_r+0x95c>
 8006894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006898:	462a      	mov	r2, r5
 800689a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800689e:	f7fa f93d 	bl	8000b1c <__aeabi_dcmplt>
 80068a2:	bb38      	cbnz	r0, 80068f4 <_dtoa_r+0x48c>
 80068a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80068a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80068ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f2c0 8157 	blt.w	8006b62 <_dtoa_r+0x6fa>
 80068b4:	2f0e      	cmp	r7, #14
 80068b6:	f300 8154 	bgt.w	8006b62 <_dtoa_r+0x6fa>
 80068ba:	4b4b      	ldr	r3, [pc, #300]	@ (80069e8 <_dtoa_r+0x580>)
 80068bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068c0:	ed93 7b00 	vldr	d7, [r3]
 80068c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	ed8d 7b00 	vstr	d7, [sp]
 80068cc:	f280 80e5 	bge.w	8006a9a <_dtoa_r+0x632>
 80068d0:	9b03      	ldr	r3, [sp, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f300 80e1 	bgt.w	8006a9a <_dtoa_r+0x632>
 80068d8:	d10c      	bne.n	80068f4 <_dtoa_r+0x48c>
 80068da:	4b48      	ldr	r3, [pc, #288]	@ (80069fc <_dtoa_r+0x594>)
 80068dc:	2200      	movs	r2, #0
 80068de:	ec51 0b17 	vmov	r0, r1, d7
 80068e2:	f7f9 fea9 	bl	8000638 <__aeabi_dmul>
 80068e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068ea:	f7fa f92b 	bl	8000b44 <__aeabi_dcmpge>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	f000 8266 	beq.w	8006dc0 <_dtoa_r+0x958>
 80068f4:	2400      	movs	r4, #0
 80068f6:	4625      	mov	r5, r4
 80068f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068fa:	4656      	mov	r6, sl
 80068fc:	ea6f 0803 	mvn.w	r8, r3
 8006900:	2700      	movs	r7, #0
 8006902:	4621      	mov	r1, r4
 8006904:	4648      	mov	r0, r9
 8006906:	f000 fcbf 	bl	8007288 <_Bfree>
 800690a:	2d00      	cmp	r5, #0
 800690c:	f000 80bd 	beq.w	8006a8a <_dtoa_r+0x622>
 8006910:	b12f      	cbz	r7, 800691e <_dtoa_r+0x4b6>
 8006912:	42af      	cmp	r7, r5
 8006914:	d003      	beq.n	800691e <_dtoa_r+0x4b6>
 8006916:	4639      	mov	r1, r7
 8006918:	4648      	mov	r0, r9
 800691a:	f000 fcb5 	bl	8007288 <_Bfree>
 800691e:	4629      	mov	r1, r5
 8006920:	4648      	mov	r0, r9
 8006922:	f000 fcb1 	bl	8007288 <_Bfree>
 8006926:	e0b0      	b.n	8006a8a <_dtoa_r+0x622>
 8006928:	07e2      	lsls	r2, r4, #31
 800692a:	d505      	bpl.n	8006938 <_dtoa_r+0x4d0>
 800692c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006930:	f7f9 fe82 	bl	8000638 <__aeabi_dmul>
 8006934:	3601      	adds	r6, #1
 8006936:	2301      	movs	r3, #1
 8006938:	1064      	asrs	r4, r4, #1
 800693a:	3508      	adds	r5, #8
 800693c:	e762      	b.n	8006804 <_dtoa_r+0x39c>
 800693e:	2602      	movs	r6, #2
 8006940:	e765      	b.n	800680e <_dtoa_r+0x3a6>
 8006942:	9c03      	ldr	r4, [sp, #12]
 8006944:	46b8      	mov	r8, r7
 8006946:	e784      	b.n	8006852 <_dtoa_r+0x3ea>
 8006948:	4b27      	ldr	r3, [pc, #156]	@ (80069e8 <_dtoa_r+0x580>)
 800694a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800694c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006950:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006954:	4454      	add	r4, sl
 8006956:	2900      	cmp	r1, #0
 8006958:	d054      	beq.n	8006a04 <_dtoa_r+0x59c>
 800695a:	4929      	ldr	r1, [pc, #164]	@ (8006a00 <_dtoa_r+0x598>)
 800695c:	2000      	movs	r0, #0
 800695e:	f7f9 ff95 	bl	800088c <__aeabi_ddiv>
 8006962:	4633      	mov	r3, r6
 8006964:	462a      	mov	r2, r5
 8006966:	f7f9 fcaf 	bl	80002c8 <__aeabi_dsub>
 800696a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800696e:	4656      	mov	r6, sl
 8006970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006974:	f7fa f910 	bl	8000b98 <__aeabi_d2iz>
 8006978:	4605      	mov	r5, r0
 800697a:	f7f9 fdf3 	bl	8000564 <__aeabi_i2d>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006986:	f7f9 fc9f 	bl	80002c8 <__aeabi_dsub>
 800698a:	3530      	adds	r5, #48	@ 0x30
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006994:	f806 5b01 	strb.w	r5, [r6], #1
 8006998:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800699c:	f7fa f8be 	bl	8000b1c <__aeabi_dcmplt>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d172      	bne.n	8006a8a <_dtoa_r+0x622>
 80069a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069a8:	4911      	ldr	r1, [pc, #68]	@ (80069f0 <_dtoa_r+0x588>)
 80069aa:	2000      	movs	r0, #0
 80069ac:	f7f9 fc8c 	bl	80002c8 <__aeabi_dsub>
 80069b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80069b4:	f7fa f8b2 	bl	8000b1c <__aeabi_dcmplt>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	f040 80b4 	bne.w	8006b26 <_dtoa_r+0x6be>
 80069be:	42a6      	cmp	r6, r4
 80069c0:	f43f af70 	beq.w	80068a4 <_dtoa_r+0x43c>
 80069c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80069c8:	4b0a      	ldr	r3, [pc, #40]	@ (80069f4 <_dtoa_r+0x58c>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	f7f9 fe34 	bl	8000638 <__aeabi_dmul>
 80069d0:	4b08      	ldr	r3, [pc, #32]	@ (80069f4 <_dtoa_r+0x58c>)
 80069d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80069d6:	2200      	movs	r2, #0
 80069d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069dc:	f7f9 fe2c 	bl	8000638 <__aeabi_dmul>
 80069e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069e4:	e7c4      	b.n	8006970 <_dtoa_r+0x508>
 80069e6:	bf00      	nop
 80069e8:	08008858 	.word	0x08008858
 80069ec:	08008830 	.word	0x08008830
 80069f0:	3ff00000 	.word	0x3ff00000
 80069f4:	40240000 	.word	0x40240000
 80069f8:	401c0000 	.word	0x401c0000
 80069fc:	40140000 	.word	0x40140000
 8006a00:	3fe00000 	.word	0x3fe00000
 8006a04:	4631      	mov	r1, r6
 8006a06:	4628      	mov	r0, r5
 8006a08:	f7f9 fe16 	bl	8000638 <__aeabi_dmul>
 8006a0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a10:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006a12:	4656      	mov	r6, sl
 8006a14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a18:	f7fa f8be 	bl	8000b98 <__aeabi_d2iz>
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	f7f9 fda1 	bl	8000564 <__aeabi_i2d>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a2a:	f7f9 fc4d 	bl	80002c8 <__aeabi_dsub>
 8006a2e:	3530      	adds	r5, #48	@ 0x30
 8006a30:	f806 5b01 	strb.w	r5, [r6], #1
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	42a6      	cmp	r6, r4
 8006a3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a3e:	f04f 0200 	mov.w	r2, #0
 8006a42:	d124      	bne.n	8006a8e <_dtoa_r+0x626>
 8006a44:	4baf      	ldr	r3, [pc, #700]	@ (8006d04 <_dtoa_r+0x89c>)
 8006a46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006a4a:	f7f9 fc3f 	bl	80002cc <__adddf3>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a56:	f7fa f87f 	bl	8000b58 <__aeabi_dcmpgt>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d163      	bne.n	8006b26 <_dtoa_r+0x6be>
 8006a5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006a62:	49a8      	ldr	r1, [pc, #672]	@ (8006d04 <_dtoa_r+0x89c>)
 8006a64:	2000      	movs	r0, #0
 8006a66:	f7f9 fc2f 	bl	80002c8 <__aeabi_dsub>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a72:	f7fa f853 	bl	8000b1c <__aeabi_dcmplt>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	f43f af14 	beq.w	80068a4 <_dtoa_r+0x43c>
 8006a7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006a7e:	1e73      	subs	r3, r6, #1
 8006a80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a86:	2b30      	cmp	r3, #48	@ 0x30
 8006a88:	d0f8      	beq.n	8006a7c <_dtoa_r+0x614>
 8006a8a:	4647      	mov	r7, r8
 8006a8c:	e03b      	b.n	8006b06 <_dtoa_r+0x69e>
 8006a8e:	4b9e      	ldr	r3, [pc, #632]	@ (8006d08 <_dtoa_r+0x8a0>)
 8006a90:	f7f9 fdd2 	bl	8000638 <__aeabi_dmul>
 8006a94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a98:	e7bc      	b.n	8006a14 <_dtoa_r+0x5ac>
 8006a9a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006a9e:	4656      	mov	r6, sl
 8006aa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	f7f9 fef0 	bl	800088c <__aeabi_ddiv>
 8006aac:	f7fa f874 	bl	8000b98 <__aeabi_d2iz>
 8006ab0:	4680      	mov	r8, r0
 8006ab2:	f7f9 fd57 	bl	8000564 <__aeabi_i2d>
 8006ab6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aba:	f7f9 fdbd 	bl	8000638 <__aeabi_dmul>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006aca:	f7f9 fbfd 	bl	80002c8 <__aeabi_dsub>
 8006ace:	f806 4b01 	strb.w	r4, [r6], #1
 8006ad2:	9d03      	ldr	r5, [sp, #12]
 8006ad4:	eba6 040a 	sub.w	r4, r6, sl
 8006ad8:	42a5      	cmp	r5, r4
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	d133      	bne.n	8006b48 <_dtoa_r+0x6e0>
 8006ae0:	f7f9 fbf4 	bl	80002cc <__adddf3>
 8006ae4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ae8:	4604      	mov	r4, r0
 8006aea:	460d      	mov	r5, r1
 8006aec:	f7fa f834 	bl	8000b58 <__aeabi_dcmpgt>
 8006af0:	b9c0      	cbnz	r0, 8006b24 <_dtoa_r+0x6bc>
 8006af2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006af6:	4620      	mov	r0, r4
 8006af8:	4629      	mov	r1, r5
 8006afa:	f7fa f805 	bl	8000b08 <__aeabi_dcmpeq>
 8006afe:	b110      	cbz	r0, 8006b06 <_dtoa_r+0x69e>
 8006b00:	f018 0f01 	tst.w	r8, #1
 8006b04:	d10e      	bne.n	8006b24 <_dtoa_r+0x6bc>
 8006b06:	9902      	ldr	r1, [sp, #8]
 8006b08:	4648      	mov	r0, r9
 8006b0a:	f000 fbbd 	bl	8007288 <_Bfree>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	7033      	strb	r3, [r6, #0]
 8006b12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006b14:	3701      	adds	r7, #1
 8006b16:	601f      	str	r7, [r3, #0]
 8006b18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 824b 	beq.w	8006fb6 <_dtoa_r+0xb4e>
 8006b20:	601e      	str	r6, [r3, #0]
 8006b22:	e248      	b.n	8006fb6 <_dtoa_r+0xb4e>
 8006b24:	46b8      	mov	r8, r7
 8006b26:	4633      	mov	r3, r6
 8006b28:	461e      	mov	r6, r3
 8006b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b2e:	2a39      	cmp	r2, #57	@ 0x39
 8006b30:	d106      	bne.n	8006b40 <_dtoa_r+0x6d8>
 8006b32:	459a      	cmp	sl, r3
 8006b34:	d1f8      	bne.n	8006b28 <_dtoa_r+0x6c0>
 8006b36:	2230      	movs	r2, #48	@ 0x30
 8006b38:	f108 0801 	add.w	r8, r8, #1
 8006b3c:	f88a 2000 	strb.w	r2, [sl]
 8006b40:	781a      	ldrb	r2, [r3, #0]
 8006b42:	3201      	adds	r2, #1
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	e7a0      	b.n	8006a8a <_dtoa_r+0x622>
 8006b48:	4b6f      	ldr	r3, [pc, #444]	@ (8006d08 <_dtoa_r+0x8a0>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f7f9 fd74 	bl	8000638 <__aeabi_dmul>
 8006b50:	2200      	movs	r2, #0
 8006b52:	2300      	movs	r3, #0
 8006b54:	4604      	mov	r4, r0
 8006b56:	460d      	mov	r5, r1
 8006b58:	f7f9 ffd6 	bl	8000b08 <__aeabi_dcmpeq>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d09f      	beq.n	8006aa0 <_dtoa_r+0x638>
 8006b60:	e7d1      	b.n	8006b06 <_dtoa_r+0x69e>
 8006b62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b64:	2a00      	cmp	r2, #0
 8006b66:	f000 80ea 	beq.w	8006d3e <_dtoa_r+0x8d6>
 8006b6a:	9a07      	ldr	r2, [sp, #28]
 8006b6c:	2a01      	cmp	r2, #1
 8006b6e:	f300 80cd 	bgt.w	8006d0c <_dtoa_r+0x8a4>
 8006b72:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006b74:	2a00      	cmp	r2, #0
 8006b76:	f000 80c1 	beq.w	8006cfc <_dtoa_r+0x894>
 8006b7a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006b7e:	9c08      	ldr	r4, [sp, #32]
 8006b80:	9e00      	ldr	r6, [sp, #0]
 8006b82:	9a00      	ldr	r2, [sp, #0]
 8006b84:	441a      	add	r2, r3
 8006b86:	9200      	str	r2, [sp, #0]
 8006b88:	9a06      	ldr	r2, [sp, #24]
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	441a      	add	r2, r3
 8006b8e:	4648      	mov	r0, r9
 8006b90:	9206      	str	r2, [sp, #24]
 8006b92:	f000 fc2d 	bl	80073f0 <__i2b>
 8006b96:	4605      	mov	r5, r0
 8006b98:	b166      	cbz	r6, 8006bb4 <_dtoa_r+0x74c>
 8006b9a:	9b06      	ldr	r3, [sp, #24]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	dd09      	ble.n	8006bb4 <_dtoa_r+0x74c>
 8006ba0:	42b3      	cmp	r3, r6
 8006ba2:	9a00      	ldr	r2, [sp, #0]
 8006ba4:	bfa8      	it	ge
 8006ba6:	4633      	movge	r3, r6
 8006ba8:	1ad2      	subs	r2, r2, r3
 8006baa:	9200      	str	r2, [sp, #0]
 8006bac:	9a06      	ldr	r2, [sp, #24]
 8006bae:	1af6      	subs	r6, r6, r3
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	9306      	str	r3, [sp, #24]
 8006bb4:	9b08      	ldr	r3, [sp, #32]
 8006bb6:	b30b      	cbz	r3, 8006bfc <_dtoa_r+0x794>
 8006bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 80c6 	beq.w	8006d4c <_dtoa_r+0x8e4>
 8006bc0:	2c00      	cmp	r4, #0
 8006bc2:	f000 80c0 	beq.w	8006d46 <_dtoa_r+0x8de>
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	4622      	mov	r2, r4
 8006bca:	4648      	mov	r0, r9
 8006bcc:	f000 fcc8 	bl	8007560 <__pow5mult>
 8006bd0:	9a02      	ldr	r2, [sp, #8]
 8006bd2:	4601      	mov	r1, r0
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	4648      	mov	r0, r9
 8006bd8:	f000 fc20 	bl	800741c <__multiply>
 8006bdc:	9902      	ldr	r1, [sp, #8]
 8006bde:	4680      	mov	r8, r0
 8006be0:	4648      	mov	r0, r9
 8006be2:	f000 fb51 	bl	8007288 <_Bfree>
 8006be6:	9b08      	ldr	r3, [sp, #32]
 8006be8:	1b1b      	subs	r3, r3, r4
 8006bea:	9308      	str	r3, [sp, #32]
 8006bec:	f000 80b1 	beq.w	8006d52 <_dtoa_r+0x8ea>
 8006bf0:	9a08      	ldr	r2, [sp, #32]
 8006bf2:	4641      	mov	r1, r8
 8006bf4:	4648      	mov	r0, r9
 8006bf6:	f000 fcb3 	bl	8007560 <__pow5mult>
 8006bfa:	9002      	str	r0, [sp, #8]
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	4648      	mov	r0, r9
 8006c00:	f000 fbf6 	bl	80073f0 <__i2b>
 8006c04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c06:	4604      	mov	r4, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 81d8 	beq.w	8006fbe <_dtoa_r+0xb56>
 8006c0e:	461a      	mov	r2, r3
 8006c10:	4601      	mov	r1, r0
 8006c12:	4648      	mov	r0, r9
 8006c14:	f000 fca4 	bl	8007560 <__pow5mult>
 8006c18:	9b07      	ldr	r3, [sp, #28]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	f300 809f 	bgt.w	8006d60 <_dtoa_r+0x8f8>
 8006c22:	9b04      	ldr	r3, [sp, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f040 8097 	bne.w	8006d58 <_dtoa_r+0x8f0>
 8006c2a:	9b05      	ldr	r3, [sp, #20]
 8006c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f040 8093 	bne.w	8006d5c <_dtoa_r+0x8f4>
 8006c36:	9b05      	ldr	r3, [sp, #20]
 8006c38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c3c:	0d1b      	lsrs	r3, r3, #20
 8006c3e:	051b      	lsls	r3, r3, #20
 8006c40:	b133      	cbz	r3, 8006c50 <_dtoa_r+0x7e8>
 8006c42:	9b00      	ldr	r3, [sp, #0]
 8006c44:	3301      	adds	r3, #1
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	9b06      	ldr	r3, [sp, #24]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	9306      	str	r3, [sp, #24]
 8006c4e:	2301      	movs	r3, #1
 8006c50:	9308      	str	r3, [sp, #32]
 8006c52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 81b8 	beq.w	8006fca <_dtoa_r+0xb62>
 8006c5a:	6923      	ldr	r3, [r4, #16]
 8006c5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c60:	6918      	ldr	r0, [r3, #16]
 8006c62:	f000 fb79 	bl	8007358 <__hi0bits>
 8006c66:	f1c0 0020 	rsb	r0, r0, #32
 8006c6a:	9b06      	ldr	r3, [sp, #24]
 8006c6c:	4418      	add	r0, r3
 8006c6e:	f010 001f 	ands.w	r0, r0, #31
 8006c72:	f000 8082 	beq.w	8006d7a <_dtoa_r+0x912>
 8006c76:	f1c0 0320 	rsb	r3, r0, #32
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	dd73      	ble.n	8006d66 <_dtoa_r+0x8fe>
 8006c7e:	9b00      	ldr	r3, [sp, #0]
 8006c80:	f1c0 001c 	rsb	r0, r0, #28
 8006c84:	4403      	add	r3, r0
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	9b06      	ldr	r3, [sp, #24]
 8006c8a:	4403      	add	r3, r0
 8006c8c:	4406      	add	r6, r0
 8006c8e:	9306      	str	r3, [sp, #24]
 8006c90:	9b00      	ldr	r3, [sp, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	dd05      	ble.n	8006ca2 <_dtoa_r+0x83a>
 8006c96:	9902      	ldr	r1, [sp, #8]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4648      	mov	r0, r9
 8006c9c:	f000 fcba 	bl	8007614 <__lshift>
 8006ca0:	9002      	str	r0, [sp, #8]
 8006ca2:	9b06      	ldr	r3, [sp, #24]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	dd05      	ble.n	8006cb4 <_dtoa_r+0x84c>
 8006ca8:	4621      	mov	r1, r4
 8006caa:	461a      	mov	r2, r3
 8006cac:	4648      	mov	r0, r9
 8006cae:	f000 fcb1 	bl	8007614 <__lshift>
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d061      	beq.n	8006d7e <_dtoa_r+0x916>
 8006cba:	9802      	ldr	r0, [sp, #8]
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	f000 fd15 	bl	80076ec <__mcmp>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	da5b      	bge.n	8006d7e <_dtoa_r+0x916>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	9902      	ldr	r1, [sp, #8]
 8006cca:	220a      	movs	r2, #10
 8006ccc:	4648      	mov	r0, r9
 8006cce:	f000 fafd 	bl	80072cc <__multadd>
 8006cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cd4:	9002      	str	r0, [sp, #8]
 8006cd6:	f107 38ff 	add.w	r8, r7, #4294967295
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 8177 	beq.w	8006fce <_dtoa_r+0xb66>
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	220a      	movs	r2, #10
 8006ce6:	4648      	mov	r0, r9
 8006ce8:	f000 faf0 	bl	80072cc <__multadd>
 8006cec:	f1bb 0f00 	cmp.w	fp, #0
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	dc6f      	bgt.n	8006dd4 <_dtoa_r+0x96c>
 8006cf4:	9b07      	ldr	r3, [sp, #28]
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	dc49      	bgt.n	8006d8e <_dtoa_r+0x926>
 8006cfa:	e06b      	b.n	8006dd4 <_dtoa_r+0x96c>
 8006cfc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006cfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d02:	e73c      	b.n	8006b7e <_dtoa_r+0x716>
 8006d04:	3fe00000 	.word	0x3fe00000
 8006d08:	40240000 	.word	0x40240000
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	1e5c      	subs	r4, r3, #1
 8006d10:	9b08      	ldr	r3, [sp, #32]
 8006d12:	42a3      	cmp	r3, r4
 8006d14:	db09      	blt.n	8006d2a <_dtoa_r+0x8c2>
 8006d16:	1b1c      	subs	r4, r3, r4
 8006d18:	9b03      	ldr	r3, [sp, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f6bf af30 	bge.w	8006b80 <_dtoa_r+0x718>
 8006d20:	9b00      	ldr	r3, [sp, #0]
 8006d22:	9a03      	ldr	r2, [sp, #12]
 8006d24:	1a9e      	subs	r6, r3, r2
 8006d26:	2300      	movs	r3, #0
 8006d28:	e72b      	b.n	8006b82 <_dtoa_r+0x71a>
 8006d2a:	9b08      	ldr	r3, [sp, #32]
 8006d2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006d2e:	9408      	str	r4, [sp, #32]
 8006d30:	1ae3      	subs	r3, r4, r3
 8006d32:	441a      	add	r2, r3
 8006d34:	9e00      	ldr	r6, [sp, #0]
 8006d36:	9b03      	ldr	r3, [sp, #12]
 8006d38:	920d      	str	r2, [sp, #52]	@ 0x34
 8006d3a:	2400      	movs	r4, #0
 8006d3c:	e721      	b.n	8006b82 <_dtoa_r+0x71a>
 8006d3e:	9c08      	ldr	r4, [sp, #32]
 8006d40:	9e00      	ldr	r6, [sp, #0]
 8006d42:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006d44:	e728      	b.n	8006b98 <_dtoa_r+0x730>
 8006d46:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006d4a:	e751      	b.n	8006bf0 <_dtoa_r+0x788>
 8006d4c:	9a08      	ldr	r2, [sp, #32]
 8006d4e:	9902      	ldr	r1, [sp, #8]
 8006d50:	e750      	b.n	8006bf4 <_dtoa_r+0x78c>
 8006d52:	f8cd 8008 	str.w	r8, [sp, #8]
 8006d56:	e751      	b.n	8006bfc <_dtoa_r+0x794>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e779      	b.n	8006c50 <_dtoa_r+0x7e8>
 8006d5c:	9b04      	ldr	r3, [sp, #16]
 8006d5e:	e777      	b.n	8006c50 <_dtoa_r+0x7e8>
 8006d60:	2300      	movs	r3, #0
 8006d62:	9308      	str	r3, [sp, #32]
 8006d64:	e779      	b.n	8006c5a <_dtoa_r+0x7f2>
 8006d66:	d093      	beq.n	8006c90 <_dtoa_r+0x828>
 8006d68:	9a00      	ldr	r2, [sp, #0]
 8006d6a:	331c      	adds	r3, #28
 8006d6c:	441a      	add	r2, r3
 8006d6e:	9200      	str	r2, [sp, #0]
 8006d70:	9a06      	ldr	r2, [sp, #24]
 8006d72:	441a      	add	r2, r3
 8006d74:	441e      	add	r6, r3
 8006d76:	9206      	str	r2, [sp, #24]
 8006d78:	e78a      	b.n	8006c90 <_dtoa_r+0x828>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	e7f4      	b.n	8006d68 <_dtoa_r+0x900>
 8006d7e:	9b03      	ldr	r3, [sp, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	46b8      	mov	r8, r7
 8006d84:	dc20      	bgt.n	8006dc8 <_dtoa_r+0x960>
 8006d86:	469b      	mov	fp, r3
 8006d88:	9b07      	ldr	r3, [sp, #28]
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	dd1e      	ble.n	8006dcc <_dtoa_r+0x964>
 8006d8e:	f1bb 0f00 	cmp.w	fp, #0
 8006d92:	f47f adb1 	bne.w	80068f8 <_dtoa_r+0x490>
 8006d96:	4621      	mov	r1, r4
 8006d98:	465b      	mov	r3, fp
 8006d9a:	2205      	movs	r2, #5
 8006d9c:	4648      	mov	r0, r9
 8006d9e:	f000 fa95 	bl	80072cc <__multadd>
 8006da2:	4601      	mov	r1, r0
 8006da4:	4604      	mov	r4, r0
 8006da6:	9802      	ldr	r0, [sp, #8]
 8006da8:	f000 fca0 	bl	80076ec <__mcmp>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	f77f ada3 	ble.w	80068f8 <_dtoa_r+0x490>
 8006db2:	4656      	mov	r6, sl
 8006db4:	2331      	movs	r3, #49	@ 0x31
 8006db6:	f806 3b01 	strb.w	r3, [r6], #1
 8006dba:	f108 0801 	add.w	r8, r8, #1
 8006dbe:	e59f      	b.n	8006900 <_dtoa_r+0x498>
 8006dc0:	9c03      	ldr	r4, [sp, #12]
 8006dc2:	46b8      	mov	r8, r7
 8006dc4:	4625      	mov	r5, r4
 8006dc6:	e7f4      	b.n	8006db2 <_dtoa_r+0x94a>
 8006dc8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 8101 	beq.w	8006fd6 <_dtoa_r+0xb6e>
 8006dd4:	2e00      	cmp	r6, #0
 8006dd6:	dd05      	ble.n	8006de4 <_dtoa_r+0x97c>
 8006dd8:	4629      	mov	r1, r5
 8006dda:	4632      	mov	r2, r6
 8006ddc:	4648      	mov	r0, r9
 8006dde:	f000 fc19 	bl	8007614 <__lshift>
 8006de2:	4605      	mov	r5, r0
 8006de4:	9b08      	ldr	r3, [sp, #32]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d05c      	beq.n	8006ea4 <_dtoa_r+0xa3c>
 8006dea:	6869      	ldr	r1, [r5, #4]
 8006dec:	4648      	mov	r0, r9
 8006dee:	f000 fa0b 	bl	8007208 <_Balloc>
 8006df2:	4606      	mov	r6, r0
 8006df4:	b928      	cbnz	r0, 8006e02 <_dtoa_r+0x99a>
 8006df6:	4b82      	ldr	r3, [pc, #520]	@ (8007000 <_dtoa_r+0xb98>)
 8006df8:	4602      	mov	r2, r0
 8006dfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006dfe:	f7ff bb4a 	b.w	8006496 <_dtoa_r+0x2e>
 8006e02:	692a      	ldr	r2, [r5, #16]
 8006e04:	3202      	adds	r2, #2
 8006e06:	0092      	lsls	r2, r2, #2
 8006e08:	f105 010c 	add.w	r1, r5, #12
 8006e0c:	300c      	adds	r0, #12
 8006e0e:	f000 ffb5 	bl	8007d7c <memcpy>
 8006e12:	2201      	movs	r2, #1
 8006e14:	4631      	mov	r1, r6
 8006e16:	4648      	mov	r0, r9
 8006e18:	f000 fbfc 	bl	8007614 <__lshift>
 8006e1c:	f10a 0301 	add.w	r3, sl, #1
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	eb0a 030b 	add.w	r3, sl, fp
 8006e26:	9308      	str	r3, [sp, #32]
 8006e28:	9b04      	ldr	r3, [sp, #16]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	462f      	mov	r7, r5
 8006e30:	9306      	str	r3, [sp, #24]
 8006e32:	4605      	mov	r5, r0
 8006e34:	9b00      	ldr	r3, [sp, #0]
 8006e36:	9802      	ldr	r0, [sp, #8]
 8006e38:	4621      	mov	r1, r4
 8006e3a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006e3e:	f7ff fa8b 	bl	8006358 <quorem>
 8006e42:	4603      	mov	r3, r0
 8006e44:	3330      	adds	r3, #48	@ 0x30
 8006e46:	9003      	str	r0, [sp, #12]
 8006e48:	4639      	mov	r1, r7
 8006e4a:	9802      	ldr	r0, [sp, #8]
 8006e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e4e:	f000 fc4d 	bl	80076ec <__mcmp>
 8006e52:	462a      	mov	r2, r5
 8006e54:	9004      	str	r0, [sp, #16]
 8006e56:	4621      	mov	r1, r4
 8006e58:	4648      	mov	r0, r9
 8006e5a:	f000 fc63 	bl	8007724 <__mdiff>
 8006e5e:	68c2      	ldr	r2, [r0, #12]
 8006e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e62:	4606      	mov	r6, r0
 8006e64:	bb02      	cbnz	r2, 8006ea8 <_dtoa_r+0xa40>
 8006e66:	4601      	mov	r1, r0
 8006e68:	9802      	ldr	r0, [sp, #8]
 8006e6a:	f000 fc3f 	bl	80076ec <__mcmp>
 8006e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e70:	4602      	mov	r2, r0
 8006e72:	4631      	mov	r1, r6
 8006e74:	4648      	mov	r0, r9
 8006e76:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e7a:	f000 fa05 	bl	8007288 <_Bfree>
 8006e7e:	9b07      	ldr	r3, [sp, #28]
 8006e80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006e82:	9e00      	ldr	r6, [sp, #0]
 8006e84:	ea42 0103 	orr.w	r1, r2, r3
 8006e88:	9b06      	ldr	r3, [sp, #24]
 8006e8a:	4319      	orrs	r1, r3
 8006e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e8e:	d10d      	bne.n	8006eac <_dtoa_r+0xa44>
 8006e90:	2b39      	cmp	r3, #57	@ 0x39
 8006e92:	d027      	beq.n	8006ee4 <_dtoa_r+0xa7c>
 8006e94:	9a04      	ldr	r2, [sp, #16]
 8006e96:	2a00      	cmp	r2, #0
 8006e98:	dd01      	ble.n	8006e9e <_dtoa_r+0xa36>
 8006e9a:	9b03      	ldr	r3, [sp, #12]
 8006e9c:	3331      	adds	r3, #49	@ 0x31
 8006e9e:	f88b 3000 	strb.w	r3, [fp]
 8006ea2:	e52e      	b.n	8006902 <_dtoa_r+0x49a>
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	e7b9      	b.n	8006e1c <_dtoa_r+0x9b4>
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	e7e2      	b.n	8006e72 <_dtoa_r+0xa0a>
 8006eac:	9904      	ldr	r1, [sp, #16]
 8006eae:	2900      	cmp	r1, #0
 8006eb0:	db04      	blt.n	8006ebc <_dtoa_r+0xa54>
 8006eb2:	9807      	ldr	r0, [sp, #28]
 8006eb4:	4301      	orrs	r1, r0
 8006eb6:	9806      	ldr	r0, [sp, #24]
 8006eb8:	4301      	orrs	r1, r0
 8006eba:	d120      	bne.n	8006efe <_dtoa_r+0xa96>
 8006ebc:	2a00      	cmp	r2, #0
 8006ebe:	ddee      	ble.n	8006e9e <_dtoa_r+0xa36>
 8006ec0:	9902      	ldr	r1, [sp, #8]
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	4648      	mov	r0, r9
 8006ec8:	f000 fba4 	bl	8007614 <__lshift>
 8006ecc:	4621      	mov	r1, r4
 8006ece:	9002      	str	r0, [sp, #8]
 8006ed0:	f000 fc0c 	bl	80076ec <__mcmp>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	9b00      	ldr	r3, [sp, #0]
 8006ed8:	dc02      	bgt.n	8006ee0 <_dtoa_r+0xa78>
 8006eda:	d1e0      	bne.n	8006e9e <_dtoa_r+0xa36>
 8006edc:	07da      	lsls	r2, r3, #31
 8006ede:	d5de      	bpl.n	8006e9e <_dtoa_r+0xa36>
 8006ee0:	2b39      	cmp	r3, #57	@ 0x39
 8006ee2:	d1da      	bne.n	8006e9a <_dtoa_r+0xa32>
 8006ee4:	2339      	movs	r3, #57	@ 0x39
 8006ee6:	f88b 3000 	strb.w	r3, [fp]
 8006eea:	4633      	mov	r3, r6
 8006eec:	461e      	mov	r6, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006ef4:	2a39      	cmp	r2, #57	@ 0x39
 8006ef6:	d04e      	beq.n	8006f96 <_dtoa_r+0xb2e>
 8006ef8:	3201      	adds	r2, #1
 8006efa:	701a      	strb	r2, [r3, #0]
 8006efc:	e501      	b.n	8006902 <_dtoa_r+0x49a>
 8006efe:	2a00      	cmp	r2, #0
 8006f00:	dd03      	ble.n	8006f0a <_dtoa_r+0xaa2>
 8006f02:	2b39      	cmp	r3, #57	@ 0x39
 8006f04:	d0ee      	beq.n	8006ee4 <_dtoa_r+0xa7c>
 8006f06:	3301      	adds	r3, #1
 8006f08:	e7c9      	b.n	8006e9e <_dtoa_r+0xa36>
 8006f0a:	9a00      	ldr	r2, [sp, #0]
 8006f0c:	9908      	ldr	r1, [sp, #32]
 8006f0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f12:	428a      	cmp	r2, r1
 8006f14:	d028      	beq.n	8006f68 <_dtoa_r+0xb00>
 8006f16:	9902      	ldr	r1, [sp, #8]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	220a      	movs	r2, #10
 8006f1c:	4648      	mov	r0, r9
 8006f1e:	f000 f9d5 	bl	80072cc <__multadd>
 8006f22:	42af      	cmp	r7, r5
 8006f24:	9002      	str	r0, [sp, #8]
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	f04f 020a 	mov.w	r2, #10
 8006f2e:	4639      	mov	r1, r7
 8006f30:	4648      	mov	r0, r9
 8006f32:	d107      	bne.n	8006f44 <_dtoa_r+0xadc>
 8006f34:	f000 f9ca 	bl	80072cc <__multadd>
 8006f38:	4607      	mov	r7, r0
 8006f3a:	4605      	mov	r5, r0
 8006f3c:	9b00      	ldr	r3, [sp, #0]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	e777      	b.n	8006e34 <_dtoa_r+0x9cc>
 8006f44:	f000 f9c2 	bl	80072cc <__multadd>
 8006f48:	4629      	mov	r1, r5
 8006f4a:	4607      	mov	r7, r0
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	220a      	movs	r2, #10
 8006f50:	4648      	mov	r0, r9
 8006f52:	f000 f9bb 	bl	80072cc <__multadd>
 8006f56:	4605      	mov	r5, r0
 8006f58:	e7f0      	b.n	8006f3c <_dtoa_r+0xad4>
 8006f5a:	f1bb 0f00 	cmp.w	fp, #0
 8006f5e:	bfcc      	ite	gt
 8006f60:	465e      	movgt	r6, fp
 8006f62:	2601      	movle	r6, #1
 8006f64:	4456      	add	r6, sl
 8006f66:	2700      	movs	r7, #0
 8006f68:	9902      	ldr	r1, [sp, #8]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	4648      	mov	r0, r9
 8006f70:	f000 fb50 	bl	8007614 <__lshift>
 8006f74:	4621      	mov	r1, r4
 8006f76:	9002      	str	r0, [sp, #8]
 8006f78:	f000 fbb8 	bl	80076ec <__mcmp>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	dcb4      	bgt.n	8006eea <_dtoa_r+0xa82>
 8006f80:	d102      	bne.n	8006f88 <_dtoa_r+0xb20>
 8006f82:	9b00      	ldr	r3, [sp, #0]
 8006f84:	07db      	lsls	r3, r3, #31
 8006f86:	d4b0      	bmi.n	8006eea <_dtoa_r+0xa82>
 8006f88:	4633      	mov	r3, r6
 8006f8a:	461e      	mov	r6, r3
 8006f8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f90:	2a30      	cmp	r2, #48	@ 0x30
 8006f92:	d0fa      	beq.n	8006f8a <_dtoa_r+0xb22>
 8006f94:	e4b5      	b.n	8006902 <_dtoa_r+0x49a>
 8006f96:	459a      	cmp	sl, r3
 8006f98:	d1a8      	bne.n	8006eec <_dtoa_r+0xa84>
 8006f9a:	2331      	movs	r3, #49	@ 0x31
 8006f9c:	f108 0801 	add.w	r8, r8, #1
 8006fa0:	f88a 3000 	strb.w	r3, [sl]
 8006fa4:	e4ad      	b.n	8006902 <_dtoa_r+0x49a>
 8006fa6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006fa8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007004 <_dtoa_r+0xb9c>
 8006fac:	b11b      	cbz	r3, 8006fb6 <_dtoa_r+0xb4e>
 8006fae:	f10a 0308 	add.w	r3, sl, #8
 8006fb2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	4650      	mov	r0, sl
 8006fb8:	b017      	add	sp, #92	@ 0x5c
 8006fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fbe:	9b07      	ldr	r3, [sp, #28]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	f77f ae2e 	ble.w	8006c22 <_dtoa_r+0x7ba>
 8006fc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fc8:	9308      	str	r3, [sp, #32]
 8006fca:	2001      	movs	r0, #1
 8006fcc:	e64d      	b.n	8006c6a <_dtoa_r+0x802>
 8006fce:	f1bb 0f00 	cmp.w	fp, #0
 8006fd2:	f77f aed9 	ble.w	8006d88 <_dtoa_r+0x920>
 8006fd6:	4656      	mov	r6, sl
 8006fd8:	9802      	ldr	r0, [sp, #8]
 8006fda:	4621      	mov	r1, r4
 8006fdc:	f7ff f9bc 	bl	8006358 <quorem>
 8006fe0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006fe4:	f806 3b01 	strb.w	r3, [r6], #1
 8006fe8:	eba6 020a 	sub.w	r2, r6, sl
 8006fec:	4593      	cmp	fp, r2
 8006fee:	ddb4      	ble.n	8006f5a <_dtoa_r+0xaf2>
 8006ff0:	9902      	ldr	r1, [sp, #8]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	220a      	movs	r2, #10
 8006ff6:	4648      	mov	r0, r9
 8006ff8:	f000 f968 	bl	80072cc <__multadd>
 8006ffc:	9002      	str	r0, [sp, #8]
 8006ffe:	e7eb      	b.n	8006fd8 <_dtoa_r+0xb70>
 8007000:	08008798 	.word	0x08008798
 8007004:	08008733 	.word	0x08008733

08007008 <_free_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4605      	mov	r5, r0
 800700c:	2900      	cmp	r1, #0
 800700e:	d041      	beq.n	8007094 <_free_r+0x8c>
 8007010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007014:	1f0c      	subs	r4, r1, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	bfb8      	it	lt
 800701a:	18e4      	addlt	r4, r4, r3
 800701c:	f000 f8e8 	bl	80071f0 <__malloc_lock>
 8007020:	4a1d      	ldr	r2, [pc, #116]	@ (8007098 <_free_r+0x90>)
 8007022:	6813      	ldr	r3, [r2, #0]
 8007024:	b933      	cbnz	r3, 8007034 <_free_r+0x2c>
 8007026:	6063      	str	r3, [r4, #4]
 8007028:	6014      	str	r4, [r2, #0]
 800702a:	4628      	mov	r0, r5
 800702c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007030:	f000 b8e4 	b.w	80071fc <__malloc_unlock>
 8007034:	42a3      	cmp	r3, r4
 8007036:	d908      	bls.n	800704a <_free_r+0x42>
 8007038:	6820      	ldr	r0, [r4, #0]
 800703a:	1821      	adds	r1, r4, r0
 800703c:	428b      	cmp	r3, r1
 800703e:	bf01      	itttt	eq
 8007040:	6819      	ldreq	r1, [r3, #0]
 8007042:	685b      	ldreq	r3, [r3, #4]
 8007044:	1809      	addeq	r1, r1, r0
 8007046:	6021      	streq	r1, [r4, #0]
 8007048:	e7ed      	b.n	8007026 <_free_r+0x1e>
 800704a:	461a      	mov	r2, r3
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	b10b      	cbz	r3, 8007054 <_free_r+0x4c>
 8007050:	42a3      	cmp	r3, r4
 8007052:	d9fa      	bls.n	800704a <_free_r+0x42>
 8007054:	6811      	ldr	r1, [r2, #0]
 8007056:	1850      	adds	r0, r2, r1
 8007058:	42a0      	cmp	r0, r4
 800705a:	d10b      	bne.n	8007074 <_free_r+0x6c>
 800705c:	6820      	ldr	r0, [r4, #0]
 800705e:	4401      	add	r1, r0
 8007060:	1850      	adds	r0, r2, r1
 8007062:	4283      	cmp	r3, r0
 8007064:	6011      	str	r1, [r2, #0]
 8007066:	d1e0      	bne.n	800702a <_free_r+0x22>
 8007068:	6818      	ldr	r0, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	6053      	str	r3, [r2, #4]
 800706e:	4408      	add	r0, r1
 8007070:	6010      	str	r0, [r2, #0]
 8007072:	e7da      	b.n	800702a <_free_r+0x22>
 8007074:	d902      	bls.n	800707c <_free_r+0x74>
 8007076:	230c      	movs	r3, #12
 8007078:	602b      	str	r3, [r5, #0]
 800707a:	e7d6      	b.n	800702a <_free_r+0x22>
 800707c:	6820      	ldr	r0, [r4, #0]
 800707e:	1821      	adds	r1, r4, r0
 8007080:	428b      	cmp	r3, r1
 8007082:	bf04      	itt	eq
 8007084:	6819      	ldreq	r1, [r3, #0]
 8007086:	685b      	ldreq	r3, [r3, #4]
 8007088:	6063      	str	r3, [r4, #4]
 800708a:	bf04      	itt	eq
 800708c:	1809      	addeq	r1, r1, r0
 800708e:	6021      	streq	r1, [r4, #0]
 8007090:	6054      	str	r4, [r2, #4]
 8007092:	e7ca      	b.n	800702a <_free_r+0x22>
 8007094:	bd38      	pop	{r3, r4, r5, pc}
 8007096:	bf00      	nop
 8007098:	200006ac 	.word	0x200006ac

0800709c <malloc>:
 800709c:	4b02      	ldr	r3, [pc, #8]	@ (80070a8 <malloc+0xc>)
 800709e:	4601      	mov	r1, r0
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	f000 b825 	b.w	80070f0 <_malloc_r>
 80070a6:	bf00      	nop
 80070a8:	20000044 	.word	0x20000044

080070ac <sbrk_aligned>:
 80070ac:	b570      	push	{r4, r5, r6, lr}
 80070ae:	4e0f      	ldr	r6, [pc, #60]	@ (80070ec <sbrk_aligned+0x40>)
 80070b0:	460c      	mov	r4, r1
 80070b2:	6831      	ldr	r1, [r6, #0]
 80070b4:	4605      	mov	r5, r0
 80070b6:	b911      	cbnz	r1, 80070be <sbrk_aligned+0x12>
 80070b8:	f000 fe50 	bl	8007d5c <_sbrk_r>
 80070bc:	6030      	str	r0, [r6, #0]
 80070be:	4621      	mov	r1, r4
 80070c0:	4628      	mov	r0, r5
 80070c2:	f000 fe4b 	bl	8007d5c <_sbrk_r>
 80070c6:	1c43      	adds	r3, r0, #1
 80070c8:	d103      	bne.n	80070d2 <sbrk_aligned+0x26>
 80070ca:	f04f 34ff 	mov.w	r4, #4294967295
 80070ce:	4620      	mov	r0, r4
 80070d0:	bd70      	pop	{r4, r5, r6, pc}
 80070d2:	1cc4      	adds	r4, r0, #3
 80070d4:	f024 0403 	bic.w	r4, r4, #3
 80070d8:	42a0      	cmp	r0, r4
 80070da:	d0f8      	beq.n	80070ce <sbrk_aligned+0x22>
 80070dc:	1a21      	subs	r1, r4, r0
 80070de:	4628      	mov	r0, r5
 80070e0:	f000 fe3c 	bl	8007d5c <_sbrk_r>
 80070e4:	3001      	adds	r0, #1
 80070e6:	d1f2      	bne.n	80070ce <sbrk_aligned+0x22>
 80070e8:	e7ef      	b.n	80070ca <sbrk_aligned+0x1e>
 80070ea:	bf00      	nop
 80070ec:	200006a8 	.word	0x200006a8

080070f0 <_malloc_r>:
 80070f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f4:	1ccd      	adds	r5, r1, #3
 80070f6:	f025 0503 	bic.w	r5, r5, #3
 80070fa:	3508      	adds	r5, #8
 80070fc:	2d0c      	cmp	r5, #12
 80070fe:	bf38      	it	cc
 8007100:	250c      	movcc	r5, #12
 8007102:	2d00      	cmp	r5, #0
 8007104:	4606      	mov	r6, r0
 8007106:	db01      	blt.n	800710c <_malloc_r+0x1c>
 8007108:	42a9      	cmp	r1, r5
 800710a:	d904      	bls.n	8007116 <_malloc_r+0x26>
 800710c:	230c      	movs	r3, #12
 800710e:	6033      	str	r3, [r6, #0]
 8007110:	2000      	movs	r0, #0
 8007112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071ec <_malloc_r+0xfc>
 800711a:	f000 f869 	bl	80071f0 <__malloc_lock>
 800711e:	f8d8 3000 	ldr.w	r3, [r8]
 8007122:	461c      	mov	r4, r3
 8007124:	bb44      	cbnz	r4, 8007178 <_malloc_r+0x88>
 8007126:	4629      	mov	r1, r5
 8007128:	4630      	mov	r0, r6
 800712a:	f7ff ffbf 	bl	80070ac <sbrk_aligned>
 800712e:	1c43      	adds	r3, r0, #1
 8007130:	4604      	mov	r4, r0
 8007132:	d158      	bne.n	80071e6 <_malloc_r+0xf6>
 8007134:	f8d8 4000 	ldr.w	r4, [r8]
 8007138:	4627      	mov	r7, r4
 800713a:	2f00      	cmp	r7, #0
 800713c:	d143      	bne.n	80071c6 <_malloc_r+0xd6>
 800713e:	2c00      	cmp	r4, #0
 8007140:	d04b      	beq.n	80071da <_malloc_r+0xea>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	4639      	mov	r1, r7
 8007146:	4630      	mov	r0, r6
 8007148:	eb04 0903 	add.w	r9, r4, r3
 800714c:	f000 fe06 	bl	8007d5c <_sbrk_r>
 8007150:	4581      	cmp	r9, r0
 8007152:	d142      	bne.n	80071da <_malloc_r+0xea>
 8007154:	6821      	ldr	r1, [r4, #0]
 8007156:	1a6d      	subs	r5, r5, r1
 8007158:	4629      	mov	r1, r5
 800715a:	4630      	mov	r0, r6
 800715c:	f7ff ffa6 	bl	80070ac <sbrk_aligned>
 8007160:	3001      	adds	r0, #1
 8007162:	d03a      	beq.n	80071da <_malloc_r+0xea>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	442b      	add	r3, r5
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	f8d8 3000 	ldr.w	r3, [r8]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	bb62      	cbnz	r2, 80071cc <_malloc_r+0xdc>
 8007172:	f8c8 7000 	str.w	r7, [r8]
 8007176:	e00f      	b.n	8007198 <_malloc_r+0xa8>
 8007178:	6822      	ldr	r2, [r4, #0]
 800717a:	1b52      	subs	r2, r2, r5
 800717c:	d420      	bmi.n	80071c0 <_malloc_r+0xd0>
 800717e:	2a0b      	cmp	r2, #11
 8007180:	d917      	bls.n	80071b2 <_malloc_r+0xc2>
 8007182:	1961      	adds	r1, r4, r5
 8007184:	42a3      	cmp	r3, r4
 8007186:	6025      	str	r5, [r4, #0]
 8007188:	bf18      	it	ne
 800718a:	6059      	strne	r1, [r3, #4]
 800718c:	6863      	ldr	r3, [r4, #4]
 800718e:	bf08      	it	eq
 8007190:	f8c8 1000 	streq.w	r1, [r8]
 8007194:	5162      	str	r2, [r4, r5]
 8007196:	604b      	str	r3, [r1, #4]
 8007198:	4630      	mov	r0, r6
 800719a:	f000 f82f 	bl	80071fc <__malloc_unlock>
 800719e:	f104 000b 	add.w	r0, r4, #11
 80071a2:	1d23      	adds	r3, r4, #4
 80071a4:	f020 0007 	bic.w	r0, r0, #7
 80071a8:	1ac2      	subs	r2, r0, r3
 80071aa:	bf1c      	itt	ne
 80071ac:	1a1b      	subne	r3, r3, r0
 80071ae:	50a3      	strne	r3, [r4, r2]
 80071b0:	e7af      	b.n	8007112 <_malloc_r+0x22>
 80071b2:	6862      	ldr	r2, [r4, #4]
 80071b4:	42a3      	cmp	r3, r4
 80071b6:	bf0c      	ite	eq
 80071b8:	f8c8 2000 	streq.w	r2, [r8]
 80071bc:	605a      	strne	r2, [r3, #4]
 80071be:	e7eb      	b.n	8007198 <_malloc_r+0xa8>
 80071c0:	4623      	mov	r3, r4
 80071c2:	6864      	ldr	r4, [r4, #4]
 80071c4:	e7ae      	b.n	8007124 <_malloc_r+0x34>
 80071c6:	463c      	mov	r4, r7
 80071c8:	687f      	ldr	r7, [r7, #4]
 80071ca:	e7b6      	b.n	800713a <_malloc_r+0x4a>
 80071cc:	461a      	mov	r2, r3
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	42a3      	cmp	r3, r4
 80071d2:	d1fb      	bne.n	80071cc <_malloc_r+0xdc>
 80071d4:	2300      	movs	r3, #0
 80071d6:	6053      	str	r3, [r2, #4]
 80071d8:	e7de      	b.n	8007198 <_malloc_r+0xa8>
 80071da:	230c      	movs	r3, #12
 80071dc:	6033      	str	r3, [r6, #0]
 80071de:	4630      	mov	r0, r6
 80071e0:	f000 f80c 	bl	80071fc <__malloc_unlock>
 80071e4:	e794      	b.n	8007110 <_malloc_r+0x20>
 80071e6:	6005      	str	r5, [r0, #0]
 80071e8:	e7d6      	b.n	8007198 <_malloc_r+0xa8>
 80071ea:	bf00      	nop
 80071ec:	200006ac 	.word	0x200006ac

080071f0 <__malloc_lock>:
 80071f0:	4801      	ldr	r0, [pc, #4]	@ (80071f8 <__malloc_lock+0x8>)
 80071f2:	f7ff b890 	b.w	8006316 <__retarget_lock_acquire_recursive>
 80071f6:	bf00      	nop
 80071f8:	200006a4 	.word	0x200006a4

080071fc <__malloc_unlock>:
 80071fc:	4801      	ldr	r0, [pc, #4]	@ (8007204 <__malloc_unlock+0x8>)
 80071fe:	f7ff b88b 	b.w	8006318 <__retarget_lock_release_recursive>
 8007202:	bf00      	nop
 8007204:	200006a4 	.word	0x200006a4

08007208 <_Balloc>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	69c6      	ldr	r6, [r0, #28]
 800720c:	4604      	mov	r4, r0
 800720e:	460d      	mov	r5, r1
 8007210:	b976      	cbnz	r6, 8007230 <_Balloc+0x28>
 8007212:	2010      	movs	r0, #16
 8007214:	f7ff ff42 	bl	800709c <malloc>
 8007218:	4602      	mov	r2, r0
 800721a:	61e0      	str	r0, [r4, #28]
 800721c:	b920      	cbnz	r0, 8007228 <_Balloc+0x20>
 800721e:	4b18      	ldr	r3, [pc, #96]	@ (8007280 <_Balloc+0x78>)
 8007220:	4818      	ldr	r0, [pc, #96]	@ (8007284 <_Balloc+0x7c>)
 8007222:	216b      	movs	r1, #107	@ 0x6b
 8007224:	f7ff f87a 	bl	800631c <__assert_func>
 8007228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800722c:	6006      	str	r6, [r0, #0]
 800722e:	60c6      	str	r6, [r0, #12]
 8007230:	69e6      	ldr	r6, [r4, #28]
 8007232:	68f3      	ldr	r3, [r6, #12]
 8007234:	b183      	cbz	r3, 8007258 <_Balloc+0x50>
 8007236:	69e3      	ldr	r3, [r4, #28]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800723e:	b9b8      	cbnz	r0, 8007270 <_Balloc+0x68>
 8007240:	2101      	movs	r1, #1
 8007242:	fa01 f605 	lsl.w	r6, r1, r5
 8007246:	1d72      	adds	r2, r6, #5
 8007248:	0092      	lsls	r2, r2, #2
 800724a:	4620      	mov	r0, r4
 800724c:	f000 fdab 	bl	8007da6 <_calloc_r>
 8007250:	b160      	cbz	r0, 800726c <_Balloc+0x64>
 8007252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007256:	e00e      	b.n	8007276 <_Balloc+0x6e>
 8007258:	2221      	movs	r2, #33	@ 0x21
 800725a:	2104      	movs	r1, #4
 800725c:	4620      	mov	r0, r4
 800725e:	f000 fda2 	bl	8007da6 <_calloc_r>
 8007262:	69e3      	ldr	r3, [r4, #28]
 8007264:	60f0      	str	r0, [r6, #12]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e4      	bne.n	8007236 <_Balloc+0x2e>
 800726c:	2000      	movs	r0, #0
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	6802      	ldr	r2, [r0, #0]
 8007272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007276:	2300      	movs	r3, #0
 8007278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800727c:	e7f7      	b.n	800726e <_Balloc+0x66>
 800727e:	bf00      	nop
 8007280:	08008654 	.word	0x08008654
 8007284:	080087a9 	.word	0x080087a9

08007288 <_Bfree>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	69c6      	ldr	r6, [r0, #28]
 800728c:	4605      	mov	r5, r0
 800728e:	460c      	mov	r4, r1
 8007290:	b976      	cbnz	r6, 80072b0 <_Bfree+0x28>
 8007292:	2010      	movs	r0, #16
 8007294:	f7ff ff02 	bl	800709c <malloc>
 8007298:	4602      	mov	r2, r0
 800729a:	61e8      	str	r0, [r5, #28]
 800729c:	b920      	cbnz	r0, 80072a8 <_Bfree+0x20>
 800729e:	4b09      	ldr	r3, [pc, #36]	@ (80072c4 <_Bfree+0x3c>)
 80072a0:	4809      	ldr	r0, [pc, #36]	@ (80072c8 <_Bfree+0x40>)
 80072a2:	218f      	movs	r1, #143	@ 0x8f
 80072a4:	f7ff f83a 	bl	800631c <__assert_func>
 80072a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072ac:	6006      	str	r6, [r0, #0]
 80072ae:	60c6      	str	r6, [r0, #12]
 80072b0:	b13c      	cbz	r4, 80072c2 <_Bfree+0x3a>
 80072b2:	69eb      	ldr	r3, [r5, #28]
 80072b4:	6862      	ldr	r2, [r4, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072bc:	6021      	str	r1, [r4, #0]
 80072be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072c2:	bd70      	pop	{r4, r5, r6, pc}
 80072c4:	08008654 	.word	0x08008654
 80072c8:	080087a9 	.word	0x080087a9

080072cc <__multadd>:
 80072cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d0:	690d      	ldr	r5, [r1, #16]
 80072d2:	4607      	mov	r7, r0
 80072d4:	460c      	mov	r4, r1
 80072d6:	461e      	mov	r6, r3
 80072d8:	f101 0c14 	add.w	ip, r1, #20
 80072dc:	2000      	movs	r0, #0
 80072de:	f8dc 3000 	ldr.w	r3, [ip]
 80072e2:	b299      	uxth	r1, r3
 80072e4:	fb02 6101 	mla	r1, r2, r1, r6
 80072e8:	0c1e      	lsrs	r6, r3, #16
 80072ea:	0c0b      	lsrs	r3, r1, #16
 80072ec:	fb02 3306 	mla	r3, r2, r6, r3
 80072f0:	b289      	uxth	r1, r1
 80072f2:	3001      	adds	r0, #1
 80072f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072f8:	4285      	cmp	r5, r0
 80072fa:	f84c 1b04 	str.w	r1, [ip], #4
 80072fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007302:	dcec      	bgt.n	80072de <__multadd+0x12>
 8007304:	b30e      	cbz	r6, 800734a <__multadd+0x7e>
 8007306:	68a3      	ldr	r3, [r4, #8]
 8007308:	42ab      	cmp	r3, r5
 800730a:	dc19      	bgt.n	8007340 <__multadd+0x74>
 800730c:	6861      	ldr	r1, [r4, #4]
 800730e:	4638      	mov	r0, r7
 8007310:	3101      	adds	r1, #1
 8007312:	f7ff ff79 	bl	8007208 <_Balloc>
 8007316:	4680      	mov	r8, r0
 8007318:	b928      	cbnz	r0, 8007326 <__multadd+0x5a>
 800731a:	4602      	mov	r2, r0
 800731c:	4b0c      	ldr	r3, [pc, #48]	@ (8007350 <__multadd+0x84>)
 800731e:	480d      	ldr	r0, [pc, #52]	@ (8007354 <__multadd+0x88>)
 8007320:	21ba      	movs	r1, #186	@ 0xba
 8007322:	f7fe fffb 	bl	800631c <__assert_func>
 8007326:	6922      	ldr	r2, [r4, #16]
 8007328:	3202      	adds	r2, #2
 800732a:	f104 010c 	add.w	r1, r4, #12
 800732e:	0092      	lsls	r2, r2, #2
 8007330:	300c      	adds	r0, #12
 8007332:	f000 fd23 	bl	8007d7c <memcpy>
 8007336:	4621      	mov	r1, r4
 8007338:	4638      	mov	r0, r7
 800733a:	f7ff ffa5 	bl	8007288 <_Bfree>
 800733e:	4644      	mov	r4, r8
 8007340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007344:	3501      	adds	r5, #1
 8007346:	615e      	str	r6, [r3, #20]
 8007348:	6125      	str	r5, [r4, #16]
 800734a:	4620      	mov	r0, r4
 800734c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007350:	08008798 	.word	0x08008798
 8007354:	080087a9 	.word	0x080087a9

08007358 <__hi0bits>:
 8007358:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800735c:	4603      	mov	r3, r0
 800735e:	bf36      	itet	cc
 8007360:	0403      	lslcc	r3, r0, #16
 8007362:	2000      	movcs	r0, #0
 8007364:	2010      	movcc	r0, #16
 8007366:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800736a:	bf3c      	itt	cc
 800736c:	021b      	lslcc	r3, r3, #8
 800736e:	3008      	addcc	r0, #8
 8007370:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007374:	bf3c      	itt	cc
 8007376:	011b      	lslcc	r3, r3, #4
 8007378:	3004      	addcc	r0, #4
 800737a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800737e:	bf3c      	itt	cc
 8007380:	009b      	lslcc	r3, r3, #2
 8007382:	3002      	addcc	r0, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	db05      	blt.n	8007394 <__hi0bits+0x3c>
 8007388:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800738c:	f100 0001 	add.w	r0, r0, #1
 8007390:	bf08      	it	eq
 8007392:	2020      	moveq	r0, #32
 8007394:	4770      	bx	lr

08007396 <__lo0bits>:
 8007396:	6803      	ldr	r3, [r0, #0]
 8007398:	4602      	mov	r2, r0
 800739a:	f013 0007 	ands.w	r0, r3, #7
 800739e:	d00b      	beq.n	80073b8 <__lo0bits+0x22>
 80073a0:	07d9      	lsls	r1, r3, #31
 80073a2:	d421      	bmi.n	80073e8 <__lo0bits+0x52>
 80073a4:	0798      	lsls	r0, r3, #30
 80073a6:	bf49      	itett	mi
 80073a8:	085b      	lsrmi	r3, r3, #1
 80073aa:	089b      	lsrpl	r3, r3, #2
 80073ac:	2001      	movmi	r0, #1
 80073ae:	6013      	strmi	r3, [r2, #0]
 80073b0:	bf5c      	itt	pl
 80073b2:	6013      	strpl	r3, [r2, #0]
 80073b4:	2002      	movpl	r0, #2
 80073b6:	4770      	bx	lr
 80073b8:	b299      	uxth	r1, r3
 80073ba:	b909      	cbnz	r1, 80073c0 <__lo0bits+0x2a>
 80073bc:	0c1b      	lsrs	r3, r3, #16
 80073be:	2010      	movs	r0, #16
 80073c0:	b2d9      	uxtb	r1, r3
 80073c2:	b909      	cbnz	r1, 80073c8 <__lo0bits+0x32>
 80073c4:	3008      	adds	r0, #8
 80073c6:	0a1b      	lsrs	r3, r3, #8
 80073c8:	0719      	lsls	r1, r3, #28
 80073ca:	bf04      	itt	eq
 80073cc:	091b      	lsreq	r3, r3, #4
 80073ce:	3004      	addeq	r0, #4
 80073d0:	0799      	lsls	r1, r3, #30
 80073d2:	bf04      	itt	eq
 80073d4:	089b      	lsreq	r3, r3, #2
 80073d6:	3002      	addeq	r0, #2
 80073d8:	07d9      	lsls	r1, r3, #31
 80073da:	d403      	bmi.n	80073e4 <__lo0bits+0x4e>
 80073dc:	085b      	lsrs	r3, r3, #1
 80073de:	f100 0001 	add.w	r0, r0, #1
 80073e2:	d003      	beq.n	80073ec <__lo0bits+0x56>
 80073e4:	6013      	str	r3, [r2, #0]
 80073e6:	4770      	bx	lr
 80073e8:	2000      	movs	r0, #0
 80073ea:	4770      	bx	lr
 80073ec:	2020      	movs	r0, #32
 80073ee:	4770      	bx	lr

080073f0 <__i2b>:
 80073f0:	b510      	push	{r4, lr}
 80073f2:	460c      	mov	r4, r1
 80073f4:	2101      	movs	r1, #1
 80073f6:	f7ff ff07 	bl	8007208 <_Balloc>
 80073fa:	4602      	mov	r2, r0
 80073fc:	b928      	cbnz	r0, 800740a <__i2b+0x1a>
 80073fe:	4b05      	ldr	r3, [pc, #20]	@ (8007414 <__i2b+0x24>)
 8007400:	4805      	ldr	r0, [pc, #20]	@ (8007418 <__i2b+0x28>)
 8007402:	f240 1145 	movw	r1, #325	@ 0x145
 8007406:	f7fe ff89 	bl	800631c <__assert_func>
 800740a:	2301      	movs	r3, #1
 800740c:	6144      	str	r4, [r0, #20]
 800740e:	6103      	str	r3, [r0, #16]
 8007410:	bd10      	pop	{r4, pc}
 8007412:	bf00      	nop
 8007414:	08008798 	.word	0x08008798
 8007418:	080087a9 	.word	0x080087a9

0800741c <__multiply>:
 800741c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007420:	4617      	mov	r7, r2
 8007422:	690a      	ldr	r2, [r1, #16]
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	429a      	cmp	r2, r3
 8007428:	bfa8      	it	ge
 800742a:	463b      	movge	r3, r7
 800742c:	4689      	mov	r9, r1
 800742e:	bfa4      	itt	ge
 8007430:	460f      	movge	r7, r1
 8007432:	4699      	movge	r9, r3
 8007434:	693d      	ldr	r5, [r7, #16]
 8007436:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	6879      	ldr	r1, [r7, #4]
 800743e:	eb05 060a 	add.w	r6, r5, sl
 8007442:	42b3      	cmp	r3, r6
 8007444:	b085      	sub	sp, #20
 8007446:	bfb8      	it	lt
 8007448:	3101      	addlt	r1, #1
 800744a:	f7ff fedd 	bl	8007208 <_Balloc>
 800744e:	b930      	cbnz	r0, 800745e <__multiply+0x42>
 8007450:	4602      	mov	r2, r0
 8007452:	4b41      	ldr	r3, [pc, #260]	@ (8007558 <__multiply+0x13c>)
 8007454:	4841      	ldr	r0, [pc, #260]	@ (800755c <__multiply+0x140>)
 8007456:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800745a:	f7fe ff5f 	bl	800631c <__assert_func>
 800745e:	f100 0414 	add.w	r4, r0, #20
 8007462:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007466:	4623      	mov	r3, r4
 8007468:	2200      	movs	r2, #0
 800746a:	4573      	cmp	r3, lr
 800746c:	d320      	bcc.n	80074b0 <__multiply+0x94>
 800746e:	f107 0814 	add.w	r8, r7, #20
 8007472:	f109 0114 	add.w	r1, r9, #20
 8007476:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800747a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800747e:	9302      	str	r3, [sp, #8]
 8007480:	1beb      	subs	r3, r5, r7
 8007482:	3b15      	subs	r3, #21
 8007484:	f023 0303 	bic.w	r3, r3, #3
 8007488:	3304      	adds	r3, #4
 800748a:	3715      	adds	r7, #21
 800748c:	42bd      	cmp	r5, r7
 800748e:	bf38      	it	cc
 8007490:	2304      	movcc	r3, #4
 8007492:	9301      	str	r3, [sp, #4]
 8007494:	9b02      	ldr	r3, [sp, #8]
 8007496:	9103      	str	r1, [sp, #12]
 8007498:	428b      	cmp	r3, r1
 800749a:	d80c      	bhi.n	80074b6 <__multiply+0x9a>
 800749c:	2e00      	cmp	r6, #0
 800749e:	dd03      	ble.n	80074a8 <__multiply+0x8c>
 80074a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d055      	beq.n	8007554 <__multiply+0x138>
 80074a8:	6106      	str	r6, [r0, #16]
 80074aa:	b005      	add	sp, #20
 80074ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b0:	f843 2b04 	str.w	r2, [r3], #4
 80074b4:	e7d9      	b.n	800746a <__multiply+0x4e>
 80074b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80074ba:	f1ba 0f00 	cmp.w	sl, #0
 80074be:	d01f      	beq.n	8007500 <__multiply+0xe4>
 80074c0:	46c4      	mov	ip, r8
 80074c2:	46a1      	mov	r9, r4
 80074c4:	2700      	movs	r7, #0
 80074c6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80074ca:	f8d9 3000 	ldr.w	r3, [r9]
 80074ce:	fa1f fb82 	uxth.w	fp, r2
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	fb0a 330b 	mla	r3, sl, fp, r3
 80074d8:	443b      	add	r3, r7
 80074da:	f8d9 7000 	ldr.w	r7, [r9]
 80074de:	0c12      	lsrs	r2, r2, #16
 80074e0:	0c3f      	lsrs	r7, r7, #16
 80074e2:	fb0a 7202 	mla	r2, sl, r2, r7
 80074e6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074f0:	4565      	cmp	r5, ip
 80074f2:	f849 3b04 	str.w	r3, [r9], #4
 80074f6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80074fa:	d8e4      	bhi.n	80074c6 <__multiply+0xaa>
 80074fc:	9b01      	ldr	r3, [sp, #4]
 80074fe:	50e7      	str	r7, [r4, r3]
 8007500:	9b03      	ldr	r3, [sp, #12]
 8007502:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007506:	3104      	adds	r1, #4
 8007508:	f1b9 0f00 	cmp.w	r9, #0
 800750c:	d020      	beq.n	8007550 <__multiply+0x134>
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	4647      	mov	r7, r8
 8007512:	46a4      	mov	ip, r4
 8007514:	f04f 0a00 	mov.w	sl, #0
 8007518:	f8b7 b000 	ldrh.w	fp, [r7]
 800751c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007520:	fb09 220b 	mla	r2, r9, fp, r2
 8007524:	4452      	add	r2, sl
 8007526:	b29b      	uxth	r3, r3
 8007528:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800752c:	f84c 3b04 	str.w	r3, [ip], #4
 8007530:	f857 3b04 	ldr.w	r3, [r7], #4
 8007534:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007538:	f8bc 3000 	ldrh.w	r3, [ip]
 800753c:	fb09 330a 	mla	r3, r9, sl, r3
 8007540:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007544:	42bd      	cmp	r5, r7
 8007546:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800754a:	d8e5      	bhi.n	8007518 <__multiply+0xfc>
 800754c:	9a01      	ldr	r2, [sp, #4]
 800754e:	50a3      	str	r3, [r4, r2]
 8007550:	3404      	adds	r4, #4
 8007552:	e79f      	b.n	8007494 <__multiply+0x78>
 8007554:	3e01      	subs	r6, #1
 8007556:	e7a1      	b.n	800749c <__multiply+0x80>
 8007558:	08008798 	.word	0x08008798
 800755c:	080087a9 	.word	0x080087a9

08007560 <__pow5mult>:
 8007560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007564:	4615      	mov	r5, r2
 8007566:	f012 0203 	ands.w	r2, r2, #3
 800756a:	4607      	mov	r7, r0
 800756c:	460e      	mov	r6, r1
 800756e:	d007      	beq.n	8007580 <__pow5mult+0x20>
 8007570:	4c25      	ldr	r4, [pc, #148]	@ (8007608 <__pow5mult+0xa8>)
 8007572:	3a01      	subs	r2, #1
 8007574:	2300      	movs	r3, #0
 8007576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800757a:	f7ff fea7 	bl	80072cc <__multadd>
 800757e:	4606      	mov	r6, r0
 8007580:	10ad      	asrs	r5, r5, #2
 8007582:	d03d      	beq.n	8007600 <__pow5mult+0xa0>
 8007584:	69fc      	ldr	r4, [r7, #28]
 8007586:	b97c      	cbnz	r4, 80075a8 <__pow5mult+0x48>
 8007588:	2010      	movs	r0, #16
 800758a:	f7ff fd87 	bl	800709c <malloc>
 800758e:	4602      	mov	r2, r0
 8007590:	61f8      	str	r0, [r7, #28]
 8007592:	b928      	cbnz	r0, 80075a0 <__pow5mult+0x40>
 8007594:	4b1d      	ldr	r3, [pc, #116]	@ (800760c <__pow5mult+0xac>)
 8007596:	481e      	ldr	r0, [pc, #120]	@ (8007610 <__pow5mult+0xb0>)
 8007598:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800759c:	f7fe febe 	bl	800631c <__assert_func>
 80075a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075a4:	6004      	str	r4, [r0, #0]
 80075a6:	60c4      	str	r4, [r0, #12]
 80075a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80075ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075b0:	b94c      	cbnz	r4, 80075c6 <__pow5mult+0x66>
 80075b2:	f240 2171 	movw	r1, #625	@ 0x271
 80075b6:	4638      	mov	r0, r7
 80075b8:	f7ff ff1a 	bl	80073f0 <__i2b>
 80075bc:	2300      	movs	r3, #0
 80075be:	f8c8 0008 	str.w	r0, [r8, #8]
 80075c2:	4604      	mov	r4, r0
 80075c4:	6003      	str	r3, [r0, #0]
 80075c6:	f04f 0900 	mov.w	r9, #0
 80075ca:	07eb      	lsls	r3, r5, #31
 80075cc:	d50a      	bpl.n	80075e4 <__pow5mult+0x84>
 80075ce:	4631      	mov	r1, r6
 80075d0:	4622      	mov	r2, r4
 80075d2:	4638      	mov	r0, r7
 80075d4:	f7ff ff22 	bl	800741c <__multiply>
 80075d8:	4631      	mov	r1, r6
 80075da:	4680      	mov	r8, r0
 80075dc:	4638      	mov	r0, r7
 80075de:	f7ff fe53 	bl	8007288 <_Bfree>
 80075e2:	4646      	mov	r6, r8
 80075e4:	106d      	asrs	r5, r5, #1
 80075e6:	d00b      	beq.n	8007600 <__pow5mult+0xa0>
 80075e8:	6820      	ldr	r0, [r4, #0]
 80075ea:	b938      	cbnz	r0, 80075fc <__pow5mult+0x9c>
 80075ec:	4622      	mov	r2, r4
 80075ee:	4621      	mov	r1, r4
 80075f0:	4638      	mov	r0, r7
 80075f2:	f7ff ff13 	bl	800741c <__multiply>
 80075f6:	6020      	str	r0, [r4, #0]
 80075f8:	f8c0 9000 	str.w	r9, [r0]
 80075fc:	4604      	mov	r4, r0
 80075fe:	e7e4      	b.n	80075ca <__pow5mult+0x6a>
 8007600:	4630      	mov	r0, r6
 8007602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007606:	bf00      	nop
 8007608:	08008820 	.word	0x08008820
 800760c:	08008654 	.word	0x08008654
 8007610:	080087a9 	.word	0x080087a9

08007614 <__lshift>:
 8007614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007618:	460c      	mov	r4, r1
 800761a:	6849      	ldr	r1, [r1, #4]
 800761c:	6923      	ldr	r3, [r4, #16]
 800761e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007622:	68a3      	ldr	r3, [r4, #8]
 8007624:	4607      	mov	r7, r0
 8007626:	4691      	mov	r9, r2
 8007628:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800762c:	f108 0601 	add.w	r6, r8, #1
 8007630:	42b3      	cmp	r3, r6
 8007632:	db0b      	blt.n	800764c <__lshift+0x38>
 8007634:	4638      	mov	r0, r7
 8007636:	f7ff fde7 	bl	8007208 <_Balloc>
 800763a:	4605      	mov	r5, r0
 800763c:	b948      	cbnz	r0, 8007652 <__lshift+0x3e>
 800763e:	4602      	mov	r2, r0
 8007640:	4b28      	ldr	r3, [pc, #160]	@ (80076e4 <__lshift+0xd0>)
 8007642:	4829      	ldr	r0, [pc, #164]	@ (80076e8 <__lshift+0xd4>)
 8007644:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007648:	f7fe fe68 	bl	800631c <__assert_func>
 800764c:	3101      	adds	r1, #1
 800764e:	005b      	lsls	r3, r3, #1
 8007650:	e7ee      	b.n	8007630 <__lshift+0x1c>
 8007652:	2300      	movs	r3, #0
 8007654:	f100 0114 	add.w	r1, r0, #20
 8007658:	f100 0210 	add.w	r2, r0, #16
 800765c:	4618      	mov	r0, r3
 800765e:	4553      	cmp	r3, sl
 8007660:	db33      	blt.n	80076ca <__lshift+0xb6>
 8007662:	6920      	ldr	r0, [r4, #16]
 8007664:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007668:	f104 0314 	add.w	r3, r4, #20
 800766c:	f019 091f 	ands.w	r9, r9, #31
 8007670:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007674:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007678:	d02b      	beq.n	80076d2 <__lshift+0xbe>
 800767a:	f1c9 0e20 	rsb	lr, r9, #32
 800767e:	468a      	mov	sl, r1
 8007680:	2200      	movs	r2, #0
 8007682:	6818      	ldr	r0, [r3, #0]
 8007684:	fa00 f009 	lsl.w	r0, r0, r9
 8007688:	4310      	orrs	r0, r2
 800768a:	f84a 0b04 	str.w	r0, [sl], #4
 800768e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007692:	459c      	cmp	ip, r3
 8007694:	fa22 f20e 	lsr.w	r2, r2, lr
 8007698:	d8f3      	bhi.n	8007682 <__lshift+0x6e>
 800769a:	ebac 0304 	sub.w	r3, ip, r4
 800769e:	3b15      	subs	r3, #21
 80076a0:	f023 0303 	bic.w	r3, r3, #3
 80076a4:	3304      	adds	r3, #4
 80076a6:	f104 0015 	add.w	r0, r4, #21
 80076aa:	4560      	cmp	r0, ip
 80076ac:	bf88      	it	hi
 80076ae:	2304      	movhi	r3, #4
 80076b0:	50ca      	str	r2, [r1, r3]
 80076b2:	b10a      	cbz	r2, 80076b8 <__lshift+0xa4>
 80076b4:	f108 0602 	add.w	r6, r8, #2
 80076b8:	3e01      	subs	r6, #1
 80076ba:	4638      	mov	r0, r7
 80076bc:	612e      	str	r6, [r5, #16]
 80076be:	4621      	mov	r1, r4
 80076c0:	f7ff fde2 	bl	8007288 <_Bfree>
 80076c4:	4628      	mov	r0, r5
 80076c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80076ce:	3301      	adds	r3, #1
 80076d0:	e7c5      	b.n	800765e <__lshift+0x4a>
 80076d2:	3904      	subs	r1, #4
 80076d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80076d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80076dc:	459c      	cmp	ip, r3
 80076de:	d8f9      	bhi.n	80076d4 <__lshift+0xc0>
 80076e0:	e7ea      	b.n	80076b8 <__lshift+0xa4>
 80076e2:	bf00      	nop
 80076e4:	08008798 	.word	0x08008798
 80076e8:	080087a9 	.word	0x080087a9

080076ec <__mcmp>:
 80076ec:	690a      	ldr	r2, [r1, #16]
 80076ee:	4603      	mov	r3, r0
 80076f0:	6900      	ldr	r0, [r0, #16]
 80076f2:	1a80      	subs	r0, r0, r2
 80076f4:	b530      	push	{r4, r5, lr}
 80076f6:	d10e      	bne.n	8007716 <__mcmp+0x2a>
 80076f8:	3314      	adds	r3, #20
 80076fa:	3114      	adds	r1, #20
 80076fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007700:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007704:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007708:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800770c:	4295      	cmp	r5, r2
 800770e:	d003      	beq.n	8007718 <__mcmp+0x2c>
 8007710:	d205      	bcs.n	800771e <__mcmp+0x32>
 8007712:	f04f 30ff 	mov.w	r0, #4294967295
 8007716:	bd30      	pop	{r4, r5, pc}
 8007718:	42a3      	cmp	r3, r4
 800771a:	d3f3      	bcc.n	8007704 <__mcmp+0x18>
 800771c:	e7fb      	b.n	8007716 <__mcmp+0x2a>
 800771e:	2001      	movs	r0, #1
 8007720:	e7f9      	b.n	8007716 <__mcmp+0x2a>
	...

08007724 <__mdiff>:
 8007724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007728:	4689      	mov	r9, r1
 800772a:	4606      	mov	r6, r0
 800772c:	4611      	mov	r1, r2
 800772e:	4648      	mov	r0, r9
 8007730:	4614      	mov	r4, r2
 8007732:	f7ff ffdb 	bl	80076ec <__mcmp>
 8007736:	1e05      	subs	r5, r0, #0
 8007738:	d112      	bne.n	8007760 <__mdiff+0x3c>
 800773a:	4629      	mov	r1, r5
 800773c:	4630      	mov	r0, r6
 800773e:	f7ff fd63 	bl	8007208 <_Balloc>
 8007742:	4602      	mov	r2, r0
 8007744:	b928      	cbnz	r0, 8007752 <__mdiff+0x2e>
 8007746:	4b3f      	ldr	r3, [pc, #252]	@ (8007844 <__mdiff+0x120>)
 8007748:	f240 2137 	movw	r1, #567	@ 0x237
 800774c:	483e      	ldr	r0, [pc, #248]	@ (8007848 <__mdiff+0x124>)
 800774e:	f7fe fde5 	bl	800631c <__assert_func>
 8007752:	2301      	movs	r3, #1
 8007754:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007758:	4610      	mov	r0, r2
 800775a:	b003      	add	sp, #12
 800775c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007760:	bfbc      	itt	lt
 8007762:	464b      	movlt	r3, r9
 8007764:	46a1      	movlt	r9, r4
 8007766:	4630      	mov	r0, r6
 8007768:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800776c:	bfba      	itte	lt
 800776e:	461c      	movlt	r4, r3
 8007770:	2501      	movlt	r5, #1
 8007772:	2500      	movge	r5, #0
 8007774:	f7ff fd48 	bl	8007208 <_Balloc>
 8007778:	4602      	mov	r2, r0
 800777a:	b918      	cbnz	r0, 8007784 <__mdiff+0x60>
 800777c:	4b31      	ldr	r3, [pc, #196]	@ (8007844 <__mdiff+0x120>)
 800777e:	f240 2145 	movw	r1, #581	@ 0x245
 8007782:	e7e3      	b.n	800774c <__mdiff+0x28>
 8007784:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007788:	6926      	ldr	r6, [r4, #16]
 800778a:	60c5      	str	r5, [r0, #12]
 800778c:	f109 0310 	add.w	r3, r9, #16
 8007790:	f109 0514 	add.w	r5, r9, #20
 8007794:	f104 0e14 	add.w	lr, r4, #20
 8007798:	f100 0b14 	add.w	fp, r0, #20
 800779c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80077a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	46d9      	mov	r9, fp
 80077a8:	f04f 0c00 	mov.w	ip, #0
 80077ac:	9b01      	ldr	r3, [sp, #4]
 80077ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80077b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80077b6:	9301      	str	r3, [sp, #4]
 80077b8:	fa1f f38a 	uxth.w	r3, sl
 80077bc:	4619      	mov	r1, r3
 80077be:	b283      	uxth	r3, r0
 80077c0:	1acb      	subs	r3, r1, r3
 80077c2:	0c00      	lsrs	r0, r0, #16
 80077c4:	4463      	add	r3, ip
 80077c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80077ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80077d4:	4576      	cmp	r6, lr
 80077d6:	f849 3b04 	str.w	r3, [r9], #4
 80077da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077de:	d8e5      	bhi.n	80077ac <__mdiff+0x88>
 80077e0:	1b33      	subs	r3, r6, r4
 80077e2:	3b15      	subs	r3, #21
 80077e4:	f023 0303 	bic.w	r3, r3, #3
 80077e8:	3415      	adds	r4, #21
 80077ea:	3304      	adds	r3, #4
 80077ec:	42a6      	cmp	r6, r4
 80077ee:	bf38      	it	cc
 80077f0:	2304      	movcc	r3, #4
 80077f2:	441d      	add	r5, r3
 80077f4:	445b      	add	r3, fp
 80077f6:	461e      	mov	r6, r3
 80077f8:	462c      	mov	r4, r5
 80077fa:	4544      	cmp	r4, r8
 80077fc:	d30e      	bcc.n	800781c <__mdiff+0xf8>
 80077fe:	f108 0103 	add.w	r1, r8, #3
 8007802:	1b49      	subs	r1, r1, r5
 8007804:	f021 0103 	bic.w	r1, r1, #3
 8007808:	3d03      	subs	r5, #3
 800780a:	45a8      	cmp	r8, r5
 800780c:	bf38      	it	cc
 800780e:	2100      	movcc	r1, #0
 8007810:	440b      	add	r3, r1
 8007812:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007816:	b191      	cbz	r1, 800783e <__mdiff+0x11a>
 8007818:	6117      	str	r7, [r2, #16]
 800781a:	e79d      	b.n	8007758 <__mdiff+0x34>
 800781c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007820:	46e6      	mov	lr, ip
 8007822:	0c08      	lsrs	r0, r1, #16
 8007824:	fa1c fc81 	uxtah	ip, ip, r1
 8007828:	4471      	add	r1, lr
 800782a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800782e:	b289      	uxth	r1, r1
 8007830:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007834:	f846 1b04 	str.w	r1, [r6], #4
 8007838:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800783c:	e7dd      	b.n	80077fa <__mdiff+0xd6>
 800783e:	3f01      	subs	r7, #1
 8007840:	e7e7      	b.n	8007812 <__mdiff+0xee>
 8007842:	bf00      	nop
 8007844:	08008798 	.word	0x08008798
 8007848:	080087a9 	.word	0x080087a9

0800784c <__d2b>:
 800784c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007850:	460f      	mov	r7, r1
 8007852:	2101      	movs	r1, #1
 8007854:	ec59 8b10 	vmov	r8, r9, d0
 8007858:	4616      	mov	r6, r2
 800785a:	f7ff fcd5 	bl	8007208 <_Balloc>
 800785e:	4604      	mov	r4, r0
 8007860:	b930      	cbnz	r0, 8007870 <__d2b+0x24>
 8007862:	4602      	mov	r2, r0
 8007864:	4b23      	ldr	r3, [pc, #140]	@ (80078f4 <__d2b+0xa8>)
 8007866:	4824      	ldr	r0, [pc, #144]	@ (80078f8 <__d2b+0xac>)
 8007868:	f240 310f 	movw	r1, #783	@ 0x30f
 800786c:	f7fe fd56 	bl	800631c <__assert_func>
 8007870:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007874:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007878:	b10d      	cbz	r5, 800787e <__d2b+0x32>
 800787a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800787e:	9301      	str	r3, [sp, #4]
 8007880:	f1b8 0300 	subs.w	r3, r8, #0
 8007884:	d023      	beq.n	80078ce <__d2b+0x82>
 8007886:	4668      	mov	r0, sp
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	f7ff fd84 	bl	8007396 <__lo0bits>
 800788e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007892:	b1d0      	cbz	r0, 80078ca <__d2b+0x7e>
 8007894:	f1c0 0320 	rsb	r3, r0, #32
 8007898:	fa02 f303 	lsl.w	r3, r2, r3
 800789c:	430b      	orrs	r3, r1
 800789e:	40c2      	lsrs	r2, r0
 80078a0:	6163      	str	r3, [r4, #20]
 80078a2:	9201      	str	r2, [sp, #4]
 80078a4:	9b01      	ldr	r3, [sp, #4]
 80078a6:	61a3      	str	r3, [r4, #24]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	bf0c      	ite	eq
 80078ac:	2201      	moveq	r2, #1
 80078ae:	2202      	movne	r2, #2
 80078b0:	6122      	str	r2, [r4, #16]
 80078b2:	b1a5      	cbz	r5, 80078de <__d2b+0x92>
 80078b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80078b8:	4405      	add	r5, r0
 80078ba:	603d      	str	r5, [r7, #0]
 80078bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80078c0:	6030      	str	r0, [r6, #0]
 80078c2:	4620      	mov	r0, r4
 80078c4:	b003      	add	sp, #12
 80078c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078ca:	6161      	str	r1, [r4, #20]
 80078cc:	e7ea      	b.n	80078a4 <__d2b+0x58>
 80078ce:	a801      	add	r0, sp, #4
 80078d0:	f7ff fd61 	bl	8007396 <__lo0bits>
 80078d4:	9b01      	ldr	r3, [sp, #4]
 80078d6:	6163      	str	r3, [r4, #20]
 80078d8:	3020      	adds	r0, #32
 80078da:	2201      	movs	r2, #1
 80078dc:	e7e8      	b.n	80078b0 <__d2b+0x64>
 80078de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80078e6:	6038      	str	r0, [r7, #0]
 80078e8:	6918      	ldr	r0, [r3, #16]
 80078ea:	f7ff fd35 	bl	8007358 <__hi0bits>
 80078ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078f2:	e7e5      	b.n	80078c0 <__d2b+0x74>
 80078f4:	08008798 	.word	0x08008798
 80078f8:	080087a9 	.word	0x080087a9

080078fc <__ssputs_r>:
 80078fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007900:	688e      	ldr	r6, [r1, #8]
 8007902:	461f      	mov	r7, r3
 8007904:	42be      	cmp	r6, r7
 8007906:	680b      	ldr	r3, [r1, #0]
 8007908:	4682      	mov	sl, r0
 800790a:	460c      	mov	r4, r1
 800790c:	4690      	mov	r8, r2
 800790e:	d82d      	bhi.n	800796c <__ssputs_r+0x70>
 8007910:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007914:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007918:	d026      	beq.n	8007968 <__ssputs_r+0x6c>
 800791a:	6965      	ldr	r5, [r4, #20]
 800791c:	6909      	ldr	r1, [r1, #16]
 800791e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007922:	eba3 0901 	sub.w	r9, r3, r1
 8007926:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800792a:	1c7b      	adds	r3, r7, #1
 800792c:	444b      	add	r3, r9
 800792e:	106d      	asrs	r5, r5, #1
 8007930:	429d      	cmp	r5, r3
 8007932:	bf38      	it	cc
 8007934:	461d      	movcc	r5, r3
 8007936:	0553      	lsls	r3, r2, #21
 8007938:	d527      	bpl.n	800798a <__ssputs_r+0x8e>
 800793a:	4629      	mov	r1, r5
 800793c:	f7ff fbd8 	bl	80070f0 <_malloc_r>
 8007940:	4606      	mov	r6, r0
 8007942:	b360      	cbz	r0, 800799e <__ssputs_r+0xa2>
 8007944:	6921      	ldr	r1, [r4, #16]
 8007946:	464a      	mov	r2, r9
 8007948:	f000 fa18 	bl	8007d7c <memcpy>
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007956:	81a3      	strh	r3, [r4, #12]
 8007958:	6126      	str	r6, [r4, #16]
 800795a:	6165      	str	r5, [r4, #20]
 800795c:	444e      	add	r6, r9
 800795e:	eba5 0509 	sub.w	r5, r5, r9
 8007962:	6026      	str	r6, [r4, #0]
 8007964:	60a5      	str	r5, [r4, #8]
 8007966:	463e      	mov	r6, r7
 8007968:	42be      	cmp	r6, r7
 800796a:	d900      	bls.n	800796e <__ssputs_r+0x72>
 800796c:	463e      	mov	r6, r7
 800796e:	6820      	ldr	r0, [r4, #0]
 8007970:	4632      	mov	r2, r6
 8007972:	4641      	mov	r1, r8
 8007974:	f000 f9d8 	bl	8007d28 <memmove>
 8007978:	68a3      	ldr	r3, [r4, #8]
 800797a:	1b9b      	subs	r3, r3, r6
 800797c:	60a3      	str	r3, [r4, #8]
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	4433      	add	r3, r6
 8007982:	6023      	str	r3, [r4, #0]
 8007984:	2000      	movs	r0, #0
 8007986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798a:	462a      	mov	r2, r5
 800798c:	f000 fa31 	bl	8007df2 <_realloc_r>
 8007990:	4606      	mov	r6, r0
 8007992:	2800      	cmp	r0, #0
 8007994:	d1e0      	bne.n	8007958 <__ssputs_r+0x5c>
 8007996:	6921      	ldr	r1, [r4, #16]
 8007998:	4650      	mov	r0, sl
 800799a:	f7ff fb35 	bl	8007008 <_free_r>
 800799e:	230c      	movs	r3, #12
 80079a0:	f8ca 3000 	str.w	r3, [sl]
 80079a4:	89a3      	ldrh	r3, [r4, #12]
 80079a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079aa:	81a3      	strh	r3, [r4, #12]
 80079ac:	f04f 30ff 	mov.w	r0, #4294967295
 80079b0:	e7e9      	b.n	8007986 <__ssputs_r+0x8a>
	...

080079b4 <_svfiprintf_r>:
 80079b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b8:	4698      	mov	r8, r3
 80079ba:	898b      	ldrh	r3, [r1, #12]
 80079bc:	061b      	lsls	r3, r3, #24
 80079be:	b09d      	sub	sp, #116	@ 0x74
 80079c0:	4607      	mov	r7, r0
 80079c2:	460d      	mov	r5, r1
 80079c4:	4614      	mov	r4, r2
 80079c6:	d510      	bpl.n	80079ea <_svfiprintf_r+0x36>
 80079c8:	690b      	ldr	r3, [r1, #16]
 80079ca:	b973      	cbnz	r3, 80079ea <_svfiprintf_r+0x36>
 80079cc:	2140      	movs	r1, #64	@ 0x40
 80079ce:	f7ff fb8f 	bl	80070f0 <_malloc_r>
 80079d2:	6028      	str	r0, [r5, #0]
 80079d4:	6128      	str	r0, [r5, #16]
 80079d6:	b930      	cbnz	r0, 80079e6 <_svfiprintf_r+0x32>
 80079d8:	230c      	movs	r3, #12
 80079da:	603b      	str	r3, [r7, #0]
 80079dc:	f04f 30ff 	mov.w	r0, #4294967295
 80079e0:	b01d      	add	sp, #116	@ 0x74
 80079e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e6:	2340      	movs	r3, #64	@ 0x40
 80079e8:	616b      	str	r3, [r5, #20]
 80079ea:	2300      	movs	r3, #0
 80079ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ee:	2320      	movs	r3, #32
 80079f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80079f8:	2330      	movs	r3, #48	@ 0x30
 80079fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b98 <_svfiprintf_r+0x1e4>
 80079fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a02:	f04f 0901 	mov.w	r9, #1
 8007a06:	4623      	mov	r3, r4
 8007a08:	469a      	mov	sl, r3
 8007a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a0e:	b10a      	cbz	r2, 8007a14 <_svfiprintf_r+0x60>
 8007a10:	2a25      	cmp	r2, #37	@ 0x25
 8007a12:	d1f9      	bne.n	8007a08 <_svfiprintf_r+0x54>
 8007a14:	ebba 0b04 	subs.w	fp, sl, r4
 8007a18:	d00b      	beq.n	8007a32 <_svfiprintf_r+0x7e>
 8007a1a:	465b      	mov	r3, fp
 8007a1c:	4622      	mov	r2, r4
 8007a1e:	4629      	mov	r1, r5
 8007a20:	4638      	mov	r0, r7
 8007a22:	f7ff ff6b 	bl	80078fc <__ssputs_r>
 8007a26:	3001      	adds	r0, #1
 8007a28:	f000 80a7 	beq.w	8007b7a <_svfiprintf_r+0x1c6>
 8007a2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a2e:	445a      	add	r2, fp
 8007a30:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a32:	f89a 3000 	ldrb.w	r3, [sl]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 809f 	beq.w	8007b7a <_svfiprintf_r+0x1c6>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a46:	f10a 0a01 	add.w	sl, sl, #1
 8007a4a:	9304      	str	r3, [sp, #16]
 8007a4c:	9307      	str	r3, [sp, #28]
 8007a4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a52:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a54:	4654      	mov	r4, sl
 8007a56:	2205      	movs	r2, #5
 8007a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a5c:	484e      	ldr	r0, [pc, #312]	@ (8007b98 <_svfiprintf_r+0x1e4>)
 8007a5e:	f7f8 fbd7 	bl	8000210 <memchr>
 8007a62:	9a04      	ldr	r2, [sp, #16]
 8007a64:	b9d8      	cbnz	r0, 8007a9e <_svfiprintf_r+0xea>
 8007a66:	06d0      	lsls	r0, r2, #27
 8007a68:	bf44      	itt	mi
 8007a6a:	2320      	movmi	r3, #32
 8007a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a70:	0711      	lsls	r1, r2, #28
 8007a72:	bf44      	itt	mi
 8007a74:	232b      	movmi	r3, #43	@ 0x2b
 8007a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a80:	d015      	beq.n	8007aae <_svfiprintf_r+0xfa>
 8007a82:	9a07      	ldr	r2, [sp, #28]
 8007a84:	4654      	mov	r4, sl
 8007a86:	2000      	movs	r0, #0
 8007a88:	f04f 0c0a 	mov.w	ip, #10
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a92:	3b30      	subs	r3, #48	@ 0x30
 8007a94:	2b09      	cmp	r3, #9
 8007a96:	d94b      	bls.n	8007b30 <_svfiprintf_r+0x17c>
 8007a98:	b1b0      	cbz	r0, 8007ac8 <_svfiprintf_r+0x114>
 8007a9a:	9207      	str	r2, [sp, #28]
 8007a9c:	e014      	b.n	8007ac8 <_svfiprintf_r+0x114>
 8007a9e:	eba0 0308 	sub.w	r3, r0, r8
 8007aa2:	fa09 f303 	lsl.w	r3, r9, r3
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	9304      	str	r3, [sp, #16]
 8007aaa:	46a2      	mov	sl, r4
 8007aac:	e7d2      	b.n	8007a54 <_svfiprintf_r+0xa0>
 8007aae:	9b03      	ldr	r3, [sp, #12]
 8007ab0:	1d19      	adds	r1, r3, #4
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	9103      	str	r1, [sp, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	bfbb      	ittet	lt
 8007aba:	425b      	neglt	r3, r3
 8007abc:	f042 0202 	orrlt.w	r2, r2, #2
 8007ac0:	9307      	strge	r3, [sp, #28]
 8007ac2:	9307      	strlt	r3, [sp, #28]
 8007ac4:	bfb8      	it	lt
 8007ac6:	9204      	strlt	r2, [sp, #16]
 8007ac8:	7823      	ldrb	r3, [r4, #0]
 8007aca:	2b2e      	cmp	r3, #46	@ 0x2e
 8007acc:	d10a      	bne.n	8007ae4 <_svfiprintf_r+0x130>
 8007ace:	7863      	ldrb	r3, [r4, #1]
 8007ad0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ad2:	d132      	bne.n	8007b3a <_svfiprintf_r+0x186>
 8007ad4:	9b03      	ldr	r3, [sp, #12]
 8007ad6:	1d1a      	adds	r2, r3, #4
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	9203      	str	r2, [sp, #12]
 8007adc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ae0:	3402      	adds	r4, #2
 8007ae2:	9305      	str	r3, [sp, #20]
 8007ae4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ba8 <_svfiprintf_r+0x1f4>
 8007ae8:	7821      	ldrb	r1, [r4, #0]
 8007aea:	2203      	movs	r2, #3
 8007aec:	4650      	mov	r0, sl
 8007aee:	f7f8 fb8f 	bl	8000210 <memchr>
 8007af2:	b138      	cbz	r0, 8007b04 <_svfiprintf_r+0x150>
 8007af4:	9b04      	ldr	r3, [sp, #16]
 8007af6:	eba0 000a 	sub.w	r0, r0, sl
 8007afa:	2240      	movs	r2, #64	@ 0x40
 8007afc:	4082      	lsls	r2, r0
 8007afe:	4313      	orrs	r3, r2
 8007b00:	3401      	adds	r4, #1
 8007b02:	9304      	str	r3, [sp, #16]
 8007b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b08:	4824      	ldr	r0, [pc, #144]	@ (8007b9c <_svfiprintf_r+0x1e8>)
 8007b0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b0e:	2206      	movs	r2, #6
 8007b10:	f7f8 fb7e 	bl	8000210 <memchr>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d036      	beq.n	8007b86 <_svfiprintf_r+0x1d2>
 8007b18:	4b21      	ldr	r3, [pc, #132]	@ (8007ba0 <_svfiprintf_r+0x1ec>)
 8007b1a:	bb1b      	cbnz	r3, 8007b64 <_svfiprintf_r+0x1b0>
 8007b1c:	9b03      	ldr	r3, [sp, #12]
 8007b1e:	3307      	adds	r3, #7
 8007b20:	f023 0307 	bic.w	r3, r3, #7
 8007b24:	3308      	adds	r3, #8
 8007b26:	9303      	str	r3, [sp, #12]
 8007b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b2a:	4433      	add	r3, r6
 8007b2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b2e:	e76a      	b.n	8007a06 <_svfiprintf_r+0x52>
 8007b30:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b34:	460c      	mov	r4, r1
 8007b36:	2001      	movs	r0, #1
 8007b38:	e7a8      	b.n	8007a8c <_svfiprintf_r+0xd8>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	3401      	adds	r4, #1
 8007b3e:	9305      	str	r3, [sp, #20]
 8007b40:	4619      	mov	r1, r3
 8007b42:	f04f 0c0a 	mov.w	ip, #10
 8007b46:	4620      	mov	r0, r4
 8007b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b4c:	3a30      	subs	r2, #48	@ 0x30
 8007b4e:	2a09      	cmp	r2, #9
 8007b50:	d903      	bls.n	8007b5a <_svfiprintf_r+0x1a6>
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0c6      	beq.n	8007ae4 <_svfiprintf_r+0x130>
 8007b56:	9105      	str	r1, [sp, #20]
 8007b58:	e7c4      	b.n	8007ae4 <_svfiprintf_r+0x130>
 8007b5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b5e:	4604      	mov	r4, r0
 8007b60:	2301      	movs	r3, #1
 8007b62:	e7f0      	b.n	8007b46 <_svfiprintf_r+0x192>
 8007b64:	ab03      	add	r3, sp, #12
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	462a      	mov	r2, r5
 8007b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8007ba4 <_svfiprintf_r+0x1f0>)
 8007b6c:	a904      	add	r1, sp, #16
 8007b6e:	4638      	mov	r0, r7
 8007b70:	f7fd fe62 	bl	8005838 <_printf_float>
 8007b74:	1c42      	adds	r2, r0, #1
 8007b76:	4606      	mov	r6, r0
 8007b78:	d1d6      	bne.n	8007b28 <_svfiprintf_r+0x174>
 8007b7a:	89ab      	ldrh	r3, [r5, #12]
 8007b7c:	065b      	lsls	r3, r3, #25
 8007b7e:	f53f af2d 	bmi.w	80079dc <_svfiprintf_r+0x28>
 8007b82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b84:	e72c      	b.n	80079e0 <_svfiprintf_r+0x2c>
 8007b86:	ab03      	add	r3, sp, #12
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	462a      	mov	r2, r5
 8007b8c:	4b05      	ldr	r3, [pc, #20]	@ (8007ba4 <_svfiprintf_r+0x1f0>)
 8007b8e:	a904      	add	r1, sp, #16
 8007b90:	4638      	mov	r0, r7
 8007b92:	f7fe f8e9 	bl	8005d68 <_printf_i>
 8007b96:	e7ed      	b.n	8007b74 <_svfiprintf_r+0x1c0>
 8007b98:	08008802 	.word	0x08008802
 8007b9c:	0800880c 	.word	0x0800880c
 8007ba0:	08005839 	.word	0x08005839
 8007ba4:	080078fd 	.word	0x080078fd
 8007ba8:	08008808 	.word	0x08008808

08007bac <__sflush_r>:
 8007bac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb4:	0716      	lsls	r6, r2, #28
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	460c      	mov	r4, r1
 8007bba:	d454      	bmi.n	8007c66 <__sflush_r+0xba>
 8007bbc:	684b      	ldr	r3, [r1, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	dc02      	bgt.n	8007bc8 <__sflush_r+0x1c>
 8007bc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	dd48      	ble.n	8007c5a <__sflush_r+0xae>
 8007bc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bca:	2e00      	cmp	r6, #0
 8007bcc:	d045      	beq.n	8007c5a <__sflush_r+0xae>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bd4:	682f      	ldr	r7, [r5, #0]
 8007bd6:	6a21      	ldr	r1, [r4, #32]
 8007bd8:	602b      	str	r3, [r5, #0]
 8007bda:	d030      	beq.n	8007c3e <__sflush_r+0x92>
 8007bdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	0759      	lsls	r1, r3, #29
 8007be2:	d505      	bpl.n	8007bf0 <__sflush_r+0x44>
 8007be4:	6863      	ldr	r3, [r4, #4]
 8007be6:	1ad2      	subs	r2, r2, r3
 8007be8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bea:	b10b      	cbz	r3, 8007bf0 <__sflush_r+0x44>
 8007bec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bee:	1ad2      	subs	r2, r2, r3
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bf4:	6a21      	ldr	r1, [r4, #32]
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	47b0      	blx	r6
 8007bfa:	1c43      	adds	r3, r0, #1
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	d106      	bne.n	8007c0e <__sflush_r+0x62>
 8007c00:	6829      	ldr	r1, [r5, #0]
 8007c02:	291d      	cmp	r1, #29
 8007c04:	d82b      	bhi.n	8007c5e <__sflush_r+0xb2>
 8007c06:	4a2a      	ldr	r2, [pc, #168]	@ (8007cb0 <__sflush_r+0x104>)
 8007c08:	40ca      	lsrs	r2, r1
 8007c0a:	07d6      	lsls	r6, r2, #31
 8007c0c:	d527      	bpl.n	8007c5e <__sflush_r+0xb2>
 8007c0e:	2200      	movs	r2, #0
 8007c10:	6062      	str	r2, [r4, #4]
 8007c12:	04d9      	lsls	r1, r3, #19
 8007c14:	6922      	ldr	r2, [r4, #16]
 8007c16:	6022      	str	r2, [r4, #0]
 8007c18:	d504      	bpl.n	8007c24 <__sflush_r+0x78>
 8007c1a:	1c42      	adds	r2, r0, #1
 8007c1c:	d101      	bne.n	8007c22 <__sflush_r+0x76>
 8007c1e:	682b      	ldr	r3, [r5, #0]
 8007c20:	b903      	cbnz	r3, 8007c24 <__sflush_r+0x78>
 8007c22:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c26:	602f      	str	r7, [r5, #0]
 8007c28:	b1b9      	cbz	r1, 8007c5a <__sflush_r+0xae>
 8007c2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c2e:	4299      	cmp	r1, r3
 8007c30:	d002      	beq.n	8007c38 <__sflush_r+0x8c>
 8007c32:	4628      	mov	r0, r5
 8007c34:	f7ff f9e8 	bl	8007008 <_free_r>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c3c:	e00d      	b.n	8007c5a <__sflush_r+0xae>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	4628      	mov	r0, r5
 8007c42:	47b0      	blx	r6
 8007c44:	4602      	mov	r2, r0
 8007c46:	1c50      	adds	r0, r2, #1
 8007c48:	d1c9      	bne.n	8007bde <__sflush_r+0x32>
 8007c4a:	682b      	ldr	r3, [r5, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d0c6      	beq.n	8007bde <__sflush_r+0x32>
 8007c50:	2b1d      	cmp	r3, #29
 8007c52:	d001      	beq.n	8007c58 <__sflush_r+0xac>
 8007c54:	2b16      	cmp	r3, #22
 8007c56:	d11e      	bne.n	8007c96 <__sflush_r+0xea>
 8007c58:	602f      	str	r7, [r5, #0]
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	e022      	b.n	8007ca4 <__sflush_r+0xf8>
 8007c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c62:	b21b      	sxth	r3, r3
 8007c64:	e01b      	b.n	8007c9e <__sflush_r+0xf2>
 8007c66:	690f      	ldr	r7, [r1, #16]
 8007c68:	2f00      	cmp	r7, #0
 8007c6a:	d0f6      	beq.n	8007c5a <__sflush_r+0xae>
 8007c6c:	0793      	lsls	r3, r2, #30
 8007c6e:	680e      	ldr	r6, [r1, #0]
 8007c70:	bf08      	it	eq
 8007c72:	694b      	ldreq	r3, [r1, #20]
 8007c74:	600f      	str	r7, [r1, #0]
 8007c76:	bf18      	it	ne
 8007c78:	2300      	movne	r3, #0
 8007c7a:	eba6 0807 	sub.w	r8, r6, r7
 8007c7e:	608b      	str	r3, [r1, #8]
 8007c80:	f1b8 0f00 	cmp.w	r8, #0
 8007c84:	dde9      	ble.n	8007c5a <__sflush_r+0xae>
 8007c86:	6a21      	ldr	r1, [r4, #32]
 8007c88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c8a:	4643      	mov	r3, r8
 8007c8c:	463a      	mov	r2, r7
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b0      	blx	r6
 8007c92:	2800      	cmp	r0, #0
 8007c94:	dc08      	bgt.n	8007ca8 <__sflush_r+0xfc>
 8007c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c9e:	81a3      	strh	r3, [r4, #12]
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca8:	4407      	add	r7, r0
 8007caa:	eba8 0800 	sub.w	r8, r8, r0
 8007cae:	e7e7      	b.n	8007c80 <__sflush_r+0xd4>
 8007cb0:	20400001 	.word	0x20400001

08007cb4 <_fflush_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	690b      	ldr	r3, [r1, #16]
 8007cb8:	4605      	mov	r5, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	b913      	cbnz	r3, 8007cc4 <_fflush_r+0x10>
 8007cbe:	2500      	movs	r5, #0
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	b118      	cbz	r0, 8007cce <_fflush_r+0x1a>
 8007cc6:	6a03      	ldr	r3, [r0, #32]
 8007cc8:	b90b      	cbnz	r3, 8007cce <_fflush_r+0x1a>
 8007cca:	f7fe f9f7 	bl	80060bc <__sinit>
 8007cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0f3      	beq.n	8007cbe <_fflush_r+0xa>
 8007cd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007cd8:	07d0      	lsls	r0, r2, #31
 8007cda:	d404      	bmi.n	8007ce6 <_fflush_r+0x32>
 8007cdc:	0599      	lsls	r1, r3, #22
 8007cde:	d402      	bmi.n	8007ce6 <_fflush_r+0x32>
 8007ce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ce2:	f7fe fb18 	bl	8006316 <__retarget_lock_acquire_recursive>
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	4621      	mov	r1, r4
 8007cea:	f7ff ff5f 	bl	8007bac <__sflush_r>
 8007cee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cf0:	07da      	lsls	r2, r3, #31
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	d4e4      	bmi.n	8007cc0 <_fflush_r+0xc>
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	059b      	lsls	r3, r3, #22
 8007cfa:	d4e1      	bmi.n	8007cc0 <_fflush_r+0xc>
 8007cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cfe:	f7fe fb0b 	bl	8006318 <__retarget_lock_release_recursive>
 8007d02:	e7dd      	b.n	8007cc0 <_fflush_r+0xc>

08007d04 <fiprintf>:
 8007d04:	b40e      	push	{r1, r2, r3}
 8007d06:	b503      	push	{r0, r1, lr}
 8007d08:	4601      	mov	r1, r0
 8007d0a:	ab03      	add	r3, sp, #12
 8007d0c:	4805      	ldr	r0, [pc, #20]	@ (8007d24 <fiprintf+0x20>)
 8007d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d12:	6800      	ldr	r0, [r0, #0]
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	f000 f8d1 	bl	8007ebc <_vfiprintf_r>
 8007d1a:	b002      	add	sp, #8
 8007d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d20:	b003      	add	sp, #12
 8007d22:	4770      	bx	lr
 8007d24:	20000044 	.word	0x20000044

08007d28 <memmove>:
 8007d28:	4288      	cmp	r0, r1
 8007d2a:	b510      	push	{r4, lr}
 8007d2c:	eb01 0402 	add.w	r4, r1, r2
 8007d30:	d902      	bls.n	8007d38 <memmove+0x10>
 8007d32:	4284      	cmp	r4, r0
 8007d34:	4623      	mov	r3, r4
 8007d36:	d807      	bhi.n	8007d48 <memmove+0x20>
 8007d38:	1e43      	subs	r3, r0, #1
 8007d3a:	42a1      	cmp	r1, r4
 8007d3c:	d008      	beq.n	8007d50 <memmove+0x28>
 8007d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d46:	e7f8      	b.n	8007d3a <memmove+0x12>
 8007d48:	4402      	add	r2, r0
 8007d4a:	4601      	mov	r1, r0
 8007d4c:	428a      	cmp	r2, r1
 8007d4e:	d100      	bne.n	8007d52 <memmove+0x2a>
 8007d50:	bd10      	pop	{r4, pc}
 8007d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d5a:	e7f7      	b.n	8007d4c <memmove+0x24>

08007d5c <_sbrk_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d06      	ldr	r5, [pc, #24]	@ (8007d78 <_sbrk_r+0x1c>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	f7fa f876 	bl	8001e58 <_sbrk>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_sbrk_r+0x1a>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_sbrk_r+0x1a>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	200006a0 	.word	0x200006a0

08007d7c <memcpy>:
 8007d7c:	440a      	add	r2, r1
 8007d7e:	4291      	cmp	r1, r2
 8007d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d84:	d100      	bne.n	8007d88 <memcpy+0xc>
 8007d86:	4770      	bx	lr
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d92:	4291      	cmp	r1, r2
 8007d94:	d1f9      	bne.n	8007d8a <memcpy+0xe>
 8007d96:	bd10      	pop	{r4, pc}

08007d98 <abort>:
 8007d98:	b508      	push	{r3, lr}
 8007d9a:	2006      	movs	r0, #6
 8007d9c:	f000 fa62 	bl	8008264 <raise>
 8007da0:	2001      	movs	r0, #1
 8007da2:	f7f9 ffe1 	bl	8001d68 <_exit>

08007da6 <_calloc_r>:
 8007da6:	b570      	push	{r4, r5, r6, lr}
 8007da8:	fba1 5402 	umull	r5, r4, r1, r2
 8007dac:	b934      	cbnz	r4, 8007dbc <_calloc_r+0x16>
 8007dae:	4629      	mov	r1, r5
 8007db0:	f7ff f99e 	bl	80070f0 <_malloc_r>
 8007db4:	4606      	mov	r6, r0
 8007db6:	b928      	cbnz	r0, 8007dc4 <_calloc_r+0x1e>
 8007db8:	4630      	mov	r0, r6
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	220c      	movs	r2, #12
 8007dbe:	6002      	str	r2, [r0, #0]
 8007dc0:	2600      	movs	r6, #0
 8007dc2:	e7f9      	b.n	8007db8 <_calloc_r+0x12>
 8007dc4:	462a      	mov	r2, r5
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	f7fe fa27 	bl	800621a <memset>
 8007dcc:	e7f4      	b.n	8007db8 <_calloc_r+0x12>

08007dce <__ascii_mbtowc>:
 8007dce:	b082      	sub	sp, #8
 8007dd0:	b901      	cbnz	r1, 8007dd4 <__ascii_mbtowc+0x6>
 8007dd2:	a901      	add	r1, sp, #4
 8007dd4:	b142      	cbz	r2, 8007de8 <__ascii_mbtowc+0x1a>
 8007dd6:	b14b      	cbz	r3, 8007dec <__ascii_mbtowc+0x1e>
 8007dd8:	7813      	ldrb	r3, [r2, #0]
 8007dda:	600b      	str	r3, [r1, #0]
 8007ddc:	7812      	ldrb	r2, [r2, #0]
 8007dde:	1e10      	subs	r0, r2, #0
 8007de0:	bf18      	it	ne
 8007de2:	2001      	movne	r0, #1
 8007de4:	b002      	add	sp, #8
 8007de6:	4770      	bx	lr
 8007de8:	4610      	mov	r0, r2
 8007dea:	e7fb      	b.n	8007de4 <__ascii_mbtowc+0x16>
 8007dec:	f06f 0001 	mvn.w	r0, #1
 8007df0:	e7f8      	b.n	8007de4 <__ascii_mbtowc+0x16>

08007df2 <_realloc_r>:
 8007df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df6:	4607      	mov	r7, r0
 8007df8:	4614      	mov	r4, r2
 8007dfa:	460d      	mov	r5, r1
 8007dfc:	b921      	cbnz	r1, 8007e08 <_realloc_r+0x16>
 8007dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e02:	4611      	mov	r1, r2
 8007e04:	f7ff b974 	b.w	80070f0 <_malloc_r>
 8007e08:	b92a      	cbnz	r2, 8007e16 <_realloc_r+0x24>
 8007e0a:	f7ff f8fd 	bl	8007008 <_free_r>
 8007e0e:	4625      	mov	r5, r4
 8007e10:	4628      	mov	r0, r5
 8007e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e16:	f000 fa41 	bl	800829c <_malloc_usable_size_r>
 8007e1a:	4284      	cmp	r4, r0
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	d802      	bhi.n	8007e26 <_realloc_r+0x34>
 8007e20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e24:	d8f4      	bhi.n	8007e10 <_realloc_r+0x1e>
 8007e26:	4621      	mov	r1, r4
 8007e28:	4638      	mov	r0, r7
 8007e2a:	f7ff f961 	bl	80070f0 <_malloc_r>
 8007e2e:	4680      	mov	r8, r0
 8007e30:	b908      	cbnz	r0, 8007e36 <_realloc_r+0x44>
 8007e32:	4645      	mov	r5, r8
 8007e34:	e7ec      	b.n	8007e10 <_realloc_r+0x1e>
 8007e36:	42b4      	cmp	r4, r6
 8007e38:	4622      	mov	r2, r4
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	bf28      	it	cs
 8007e3e:	4632      	movcs	r2, r6
 8007e40:	f7ff ff9c 	bl	8007d7c <memcpy>
 8007e44:	4629      	mov	r1, r5
 8007e46:	4638      	mov	r0, r7
 8007e48:	f7ff f8de 	bl	8007008 <_free_r>
 8007e4c:	e7f1      	b.n	8007e32 <_realloc_r+0x40>

08007e4e <__ascii_wctomb>:
 8007e4e:	4603      	mov	r3, r0
 8007e50:	4608      	mov	r0, r1
 8007e52:	b141      	cbz	r1, 8007e66 <__ascii_wctomb+0x18>
 8007e54:	2aff      	cmp	r2, #255	@ 0xff
 8007e56:	d904      	bls.n	8007e62 <__ascii_wctomb+0x14>
 8007e58:	228a      	movs	r2, #138	@ 0x8a
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e60:	4770      	bx	lr
 8007e62:	700a      	strb	r2, [r1, #0]
 8007e64:	2001      	movs	r0, #1
 8007e66:	4770      	bx	lr

08007e68 <__sfputc_r>:
 8007e68:	6893      	ldr	r3, [r2, #8]
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	b410      	push	{r4}
 8007e70:	6093      	str	r3, [r2, #8]
 8007e72:	da08      	bge.n	8007e86 <__sfputc_r+0x1e>
 8007e74:	6994      	ldr	r4, [r2, #24]
 8007e76:	42a3      	cmp	r3, r4
 8007e78:	db01      	blt.n	8007e7e <__sfputc_r+0x16>
 8007e7a:	290a      	cmp	r1, #10
 8007e7c:	d103      	bne.n	8007e86 <__sfputc_r+0x1e>
 8007e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e82:	f000 b933 	b.w	80080ec <__swbuf_r>
 8007e86:	6813      	ldr	r3, [r2, #0]
 8007e88:	1c58      	adds	r0, r3, #1
 8007e8a:	6010      	str	r0, [r2, #0]
 8007e8c:	7019      	strb	r1, [r3, #0]
 8007e8e:	4608      	mov	r0, r1
 8007e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <__sfputs_r>:
 8007e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e98:	4606      	mov	r6, r0
 8007e9a:	460f      	mov	r7, r1
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	18d5      	adds	r5, r2, r3
 8007ea0:	42ac      	cmp	r4, r5
 8007ea2:	d101      	bne.n	8007ea8 <__sfputs_r+0x12>
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	e007      	b.n	8007eb8 <__sfputs_r+0x22>
 8007ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eac:	463a      	mov	r2, r7
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f7ff ffda 	bl	8007e68 <__sfputc_r>
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	d1f3      	bne.n	8007ea0 <__sfputs_r+0xa>
 8007eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ebc <_vfiprintf_r>:
 8007ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec0:	460d      	mov	r5, r1
 8007ec2:	b09d      	sub	sp, #116	@ 0x74
 8007ec4:	4614      	mov	r4, r2
 8007ec6:	4698      	mov	r8, r3
 8007ec8:	4606      	mov	r6, r0
 8007eca:	b118      	cbz	r0, 8007ed4 <_vfiprintf_r+0x18>
 8007ecc:	6a03      	ldr	r3, [r0, #32]
 8007ece:	b90b      	cbnz	r3, 8007ed4 <_vfiprintf_r+0x18>
 8007ed0:	f7fe f8f4 	bl	80060bc <__sinit>
 8007ed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ed6:	07d9      	lsls	r1, r3, #31
 8007ed8:	d405      	bmi.n	8007ee6 <_vfiprintf_r+0x2a>
 8007eda:	89ab      	ldrh	r3, [r5, #12]
 8007edc:	059a      	lsls	r2, r3, #22
 8007ede:	d402      	bmi.n	8007ee6 <_vfiprintf_r+0x2a>
 8007ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ee2:	f7fe fa18 	bl	8006316 <__retarget_lock_acquire_recursive>
 8007ee6:	89ab      	ldrh	r3, [r5, #12]
 8007ee8:	071b      	lsls	r3, r3, #28
 8007eea:	d501      	bpl.n	8007ef0 <_vfiprintf_r+0x34>
 8007eec:	692b      	ldr	r3, [r5, #16]
 8007eee:	b99b      	cbnz	r3, 8007f18 <_vfiprintf_r+0x5c>
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f000 f938 	bl	8008168 <__swsetup_r>
 8007ef8:	b170      	cbz	r0, 8007f18 <_vfiprintf_r+0x5c>
 8007efa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007efc:	07dc      	lsls	r4, r3, #31
 8007efe:	d504      	bpl.n	8007f0a <_vfiprintf_r+0x4e>
 8007f00:	f04f 30ff 	mov.w	r0, #4294967295
 8007f04:	b01d      	add	sp, #116	@ 0x74
 8007f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0a:	89ab      	ldrh	r3, [r5, #12]
 8007f0c:	0598      	lsls	r0, r3, #22
 8007f0e:	d4f7      	bmi.n	8007f00 <_vfiprintf_r+0x44>
 8007f10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f12:	f7fe fa01 	bl	8006318 <__retarget_lock_release_recursive>
 8007f16:	e7f3      	b.n	8007f00 <_vfiprintf_r+0x44>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f1c:	2320      	movs	r3, #32
 8007f1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f26:	2330      	movs	r3, #48	@ 0x30
 8007f28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80080d8 <_vfiprintf_r+0x21c>
 8007f2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f30:	f04f 0901 	mov.w	r9, #1
 8007f34:	4623      	mov	r3, r4
 8007f36:	469a      	mov	sl, r3
 8007f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f3c:	b10a      	cbz	r2, 8007f42 <_vfiprintf_r+0x86>
 8007f3e:	2a25      	cmp	r2, #37	@ 0x25
 8007f40:	d1f9      	bne.n	8007f36 <_vfiprintf_r+0x7a>
 8007f42:	ebba 0b04 	subs.w	fp, sl, r4
 8007f46:	d00b      	beq.n	8007f60 <_vfiprintf_r+0xa4>
 8007f48:	465b      	mov	r3, fp
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f7ff ffa1 	bl	8007e96 <__sfputs_r>
 8007f54:	3001      	adds	r0, #1
 8007f56:	f000 80a7 	beq.w	80080a8 <_vfiprintf_r+0x1ec>
 8007f5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f5c:	445a      	add	r2, fp
 8007f5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f60:	f89a 3000 	ldrb.w	r3, [sl]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 809f 	beq.w	80080a8 <_vfiprintf_r+0x1ec>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f74:	f10a 0a01 	add.w	sl, sl, #1
 8007f78:	9304      	str	r3, [sp, #16]
 8007f7a:	9307      	str	r3, [sp, #28]
 8007f7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f80:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f82:	4654      	mov	r4, sl
 8007f84:	2205      	movs	r2, #5
 8007f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f8a:	4853      	ldr	r0, [pc, #332]	@ (80080d8 <_vfiprintf_r+0x21c>)
 8007f8c:	f7f8 f940 	bl	8000210 <memchr>
 8007f90:	9a04      	ldr	r2, [sp, #16]
 8007f92:	b9d8      	cbnz	r0, 8007fcc <_vfiprintf_r+0x110>
 8007f94:	06d1      	lsls	r1, r2, #27
 8007f96:	bf44      	itt	mi
 8007f98:	2320      	movmi	r3, #32
 8007f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f9e:	0713      	lsls	r3, r2, #28
 8007fa0:	bf44      	itt	mi
 8007fa2:	232b      	movmi	r3, #43	@ 0x2b
 8007fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8007fac:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fae:	d015      	beq.n	8007fdc <_vfiprintf_r+0x120>
 8007fb0:	9a07      	ldr	r2, [sp, #28]
 8007fb2:	4654      	mov	r4, sl
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	f04f 0c0a 	mov.w	ip, #10
 8007fba:	4621      	mov	r1, r4
 8007fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fc0:	3b30      	subs	r3, #48	@ 0x30
 8007fc2:	2b09      	cmp	r3, #9
 8007fc4:	d94b      	bls.n	800805e <_vfiprintf_r+0x1a2>
 8007fc6:	b1b0      	cbz	r0, 8007ff6 <_vfiprintf_r+0x13a>
 8007fc8:	9207      	str	r2, [sp, #28]
 8007fca:	e014      	b.n	8007ff6 <_vfiprintf_r+0x13a>
 8007fcc:	eba0 0308 	sub.w	r3, r0, r8
 8007fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	9304      	str	r3, [sp, #16]
 8007fd8:	46a2      	mov	sl, r4
 8007fda:	e7d2      	b.n	8007f82 <_vfiprintf_r+0xc6>
 8007fdc:	9b03      	ldr	r3, [sp, #12]
 8007fde:	1d19      	adds	r1, r3, #4
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	9103      	str	r1, [sp, #12]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bfbb      	ittet	lt
 8007fe8:	425b      	neglt	r3, r3
 8007fea:	f042 0202 	orrlt.w	r2, r2, #2
 8007fee:	9307      	strge	r3, [sp, #28]
 8007ff0:	9307      	strlt	r3, [sp, #28]
 8007ff2:	bfb8      	it	lt
 8007ff4:	9204      	strlt	r2, [sp, #16]
 8007ff6:	7823      	ldrb	r3, [r4, #0]
 8007ff8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ffa:	d10a      	bne.n	8008012 <_vfiprintf_r+0x156>
 8007ffc:	7863      	ldrb	r3, [r4, #1]
 8007ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008000:	d132      	bne.n	8008068 <_vfiprintf_r+0x1ac>
 8008002:	9b03      	ldr	r3, [sp, #12]
 8008004:	1d1a      	adds	r2, r3, #4
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	9203      	str	r2, [sp, #12]
 800800a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800800e:	3402      	adds	r4, #2
 8008010:	9305      	str	r3, [sp, #20]
 8008012:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80080e8 <_vfiprintf_r+0x22c>
 8008016:	7821      	ldrb	r1, [r4, #0]
 8008018:	2203      	movs	r2, #3
 800801a:	4650      	mov	r0, sl
 800801c:	f7f8 f8f8 	bl	8000210 <memchr>
 8008020:	b138      	cbz	r0, 8008032 <_vfiprintf_r+0x176>
 8008022:	9b04      	ldr	r3, [sp, #16]
 8008024:	eba0 000a 	sub.w	r0, r0, sl
 8008028:	2240      	movs	r2, #64	@ 0x40
 800802a:	4082      	lsls	r2, r0
 800802c:	4313      	orrs	r3, r2
 800802e:	3401      	adds	r4, #1
 8008030:	9304      	str	r3, [sp, #16]
 8008032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008036:	4829      	ldr	r0, [pc, #164]	@ (80080dc <_vfiprintf_r+0x220>)
 8008038:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800803c:	2206      	movs	r2, #6
 800803e:	f7f8 f8e7 	bl	8000210 <memchr>
 8008042:	2800      	cmp	r0, #0
 8008044:	d03f      	beq.n	80080c6 <_vfiprintf_r+0x20a>
 8008046:	4b26      	ldr	r3, [pc, #152]	@ (80080e0 <_vfiprintf_r+0x224>)
 8008048:	bb1b      	cbnz	r3, 8008092 <_vfiprintf_r+0x1d6>
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	3307      	adds	r3, #7
 800804e:	f023 0307 	bic.w	r3, r3, #7
 8008052:	3308      	adds	r3, #8
 8008054:	9303      	str	r3, [sp, #12]
 8008056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008058:	443b      	add	r3, r7
 800805a:	9309      	str	r3, [sp, #36]	@ 0x24
 800805c:	e76a      	b.n	8007f34 <_vfiprintf_r+0x78>
 800805e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008062:	460c      	mov	r4, r1
 8008064:	2001      	movs	r0, #1
 8008066:	e7a8      	b.n	8007fba <_vfiprintf_r+0xfe>
 8008068:	2300      	movs	r3, #0
 800806a:	3401      	adds	r4, #1
 800806c:	9305      	str	r3, [sp, #20]
 800806e:	4619      	mov	r1, r3
 8008070:	f04f 0c0a 	mov.w	ip, #10
 8008074:	4620      	mov	r0, r4
 8008076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800807a:	3a30      	subs	r2, #48	@ 0x30
 800807c:	2a09      	cmp	r2, #9
 800807e:	d903      	bls.n	8008088 <_vfiprintf_r+0x1cc>
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0c6      	beq.n	8008012 <_vfiprintf_r+0x156>
 8008084:	9105      	str	r1, [sp, #20]
 8008086:	e7c4      	b.n	8008012 <_vfiprintf_r+0x156>
 8008088:	fb0c 2101 	mla	r1, ip, r1, r2
 800808c:	4604      	mov	r4, r0
 800808e:	2301      	movs	r3, #1
 8008090:	e7f0      	b.n	8008074 <_vfiprintf_r+0x1b8>
 8008092:	ab03      	add	r3, sp, #12
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	462a      	mov	r2, r5
 8008098:	4b12      	ldr	r3, [pc, #72]	@ (80080e4 <_vfiprintf_r+0x228>)
 800809a:	a904      	add	r1, sp, #16
 800809c:	4630      	mov	r0, r6
 800809e:	f7fd fbcb 	bl	8005838 <_printf_float>
 80080a2:	4607      	mov	r7, r0
 80080a4:	1c78      	adds	r0, r7, #1
 80080a6:	d1d6      	bne.n	8008056 <_vfiprintf_r+0x19a>
 80080a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080aa:	07d9      	lsls	r1, r3, #31
 80080ac:	d405      	bmi.n	80080ba <_vfiprintf_r+0x1fe>
 80080ae:	89ab      	ldrh	r3, [r5, #12]
 80080b0:	059a      	lsls	r2, r3, #22
 80080b2:	d402      	bmi.n	80080ba <_vfiprintf_r+0x1fe>
 80080b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080b6:	f7fe f92f 	bl	8006318 <__retarget_lock_release_recursive>
 80080ba:	89ab      	ldrh	r3, [r5, #12]
 80080bc:	065b      	lsls	r3, r3, #25
 80080be:	f53f af1f 	bmi.w	8007f00 <_vfiprintf_r+0x44>
 80080c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080c4:	e71e      	b.n	8007f04 <_vfiprintf_r+0x48>
 80080c6:	ab03      	add	r3, sp, #12
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	462a      	mov	r2, r5
 80080cc:	4b05      	ldr	r3, [pc, #20]	@ (80080e4 <_vfiprintf_r+0x228>)
 80080ce:	a904      	add	r1, sp, #16
 80080d0:	4630      	mov	r0, r6
 80080d2:	f7fd fe49 	bl	8005d68 <_printf_i>
 80080d6:	e7e4      	b.n	80080a2 <_vfiprintf_r+0x1e6>
 80080d8:	08008802 	.word	0x08008802
 80080dc:	0800880c 	.word	0x0800880c
 80080e0:	08005839 	.word	0x08005839
 80080e4:	08007e97 	.word	0x08007e97
 80080e8:	08008808 	.word	0x08008808

080080ec <__swbuf_r>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	460e      	mov	r6, r1
 80080f0:	4614      	mov	r4, r2
 80080f2:	4605      	mov	r5, r0
 80080f4:	b118      	cbz	r0, 80080fe <__swbuf_r+0x12>
 80080f6:	6a03      	ldr	r3, [r0, #32]
 80080f8:	b90b      	cbnz	r3, 80080fe <__swbuf_r+0x12>
 80080fa:	f7fd ffdf 	bl	80060bc <__sinit>
 80080fe:	69a3      	ldr	r3, [r4, #24]
 8008100:	60a3      	str	r3, [r4, #8]
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	071a      	lsls	r2, r3, #28
 8008106:	d501      	bpl.n	800810c <__swbuf_r+0x20>
 8008108:	6923      	ldr	r3, [r4, #16]
 800810a:	b943      	cbnz	r3, 800811e <__swbuf_r+0x32>
 800810c:	4621      	mov	r1, r4
 800810e:	4628      	mov	r0, r5
 8008110:	f000 f82a 	bl	8008168 <__swsetup_r>
 8008114:	b118      	cbz	r0, 800811e <__swbuf_r+0x32>
 8008116:	f04f 37ff 	mov.w	r7, #4294967295
 800811a:	4638      	mov	r0, r7
 800811c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	6922      	ldr	r2, [r4, #16]
 8008122:	1a98      	subs	r0, r3, r2
 8008124:	6963      	ldr	r3, [r4, #20]
 8008126:	b2f6      	uxtb	r6, r6
 8008128:	4283      	cmp	r3, r0
 800812a:	4637      	mov	r7, r6
 800812c:	dc05      	bgt.n	800813a <__swbuf_r+0x4e>
 800812e:	4621      	mov	r1, r4
 8008130:	4628      	mov	r0, r5
 8008132:	f7ff fdbf 	bl	8007cb4 <_fflush_r>
 8008136:	2800      	cmp	r0, #0
 8008138:	d1ed      	bne.n	8008116 <__swbuf_r+0x2a>
 800813a:	68a3      	ldr	r3, [r4, #8]
 800813c:	3b01      	subs	r3, #1
 800813e:	60a3      	str	r3, [r4, #8]
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	1c5a      	adds	r2, r3, #1
 8008144:	6022      	str	r2, [r4, #0]
 8008146:	701e      	strb	r6, [r3, #0]
 8008148:	6962      	ldr	r2, [r4, #20]
 800814a:	1c43      	adds	r3, r0, #1
 800814c:	429a      	cmp	r2, r3
 800814e:	d004      	beq.n	800815a <__swbuf_r+0x6e>
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	07db      	lsls	r3, r3, #31
 8008154:	d5e1      	bpl.n	800811a <__swbuf_r+0x2e>
 8008156:	2e0a      	cmp	r6, #10
 8008158:	d1df      	bne.n	800811a <__swbuf_r+0x2e>
 800815a:	4621      	mov	r1, r4
 800815c:	4628      	mov	r0, r5
 800815e:	f7ff fda9 	bl	8007cb4 <_fflush_r>
 8008162:	2800      	cmp	r0, #0
 8008164:	d0d9      	beq.n	800811a <__swbuf_r+0x2e>
 8008166:	e7d6      	b.n	8008116 <__swbuf_r+0x2a>

08008168 <__swsetup_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4b29      	ldr	r3, [pc, #164]	@ (8008210 <__swsetup_r+0xa8>)
 800816c:	4605      	mov	r5, r0
 800816e:	6818      	ldr	r0, [r3, #0]
 8008170:	460c      	mov	r4, r1
 8008172:	b118      	cbz	r0, 800817c <__swsetup_r+0x14>
 8008174:	6a03      	ldr	r3, [r0, #32]
 8008176:	b90b      	cbnz	r3, 800817c <__swsetup_r+0x14>
 8008178:	f7fd ffa0 	bl	80060bc <__sinit>
 800817c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008180:	0719      	lsls	r1, r3, #28
 8008182:	d422      	bmi.n	80081ca <__swsetup_r+0x62>
 8008184:	06da      	lsls	r2, r3, #27
 8008186:	d407      	bmi.n	8008198 <__swsetup_r+0x30>
 8008188:	2209      	movs	r2, #9
 800818a:	602a      	str	r2, [r5, #0]
 800818c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008190:	81a3      	strh	r3, [r4, #12]
 8008192:	f04f 30ff 	mov.w	r0, #4294967295
 8008196:	e033      	b.n	8008200 <__swsetup_r+0x98>
 8008198:	0758      	lsls	r0, r3, #29
 800819a:	d512      	bpl.n	80081c2 <__swsetup_r+0x5a>
 800819c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800819e:	b141      	cbz	r1, 80081b2 <__swsetup_r+0x4a>
 80081a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081a4:	4299      	cmp	r1, r3
 80081a6:	d002      	beq.n	80081ae <__swsetup_r+0x46>
 80081a8:	4628      	mov	r0, r5
 80081aa:	f7fe ff2d 	bl	8007008 <_free_r>
 80081ae:	2300      	movs	r3, #0
 80081b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081b8:	81a3      	strh	r3, [r4, #12]
 80081ba:	2300      	movs	r3, #0
 80081bc:	6063      	str	r3, [r4, #4]
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	f043 0308 	orr.w	r3, r3, #8
 80081c8:	81a3      	strh	r3, [r4, #12]
 80081ca:	6923      	ldr	r3, [r4, #16]
 80081cc:	b94b      	cbnz	r3, 80081e2 <__swsetup_r+0x7a>
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081d8:	d003      	beq.n	80081e2 <__swsetup_r+0x7a>
 80081da:	4621      	mov	r1, r4
 80081dc:	4628      	mov	r0, r5
 80081de:	f000 f88b 	bl	80082f8 <__smakebuf_r>
 80081e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e6:	f013 0201 	ands.w	r2, r3, #1
 80081ea:	d00a      	beq.n	8008202 <__swsetup_r+0x9a>
 80081ec:	2200      	movs	r2, #0
 80081ee:	60a2      	str	r2, [r4, #8]
 80081f0:	6962      	ldr	r2, [r4, #20]
 80081f2:	4252      	negs	r2, r2
 80081f4:	61a2      	str	r2, [r4, #24]
 80081f6:	6922      	ldr	r2, [r4, #16]
 80081f8:	b942      	cbnz	r2, 800820c <__swsetup_r+0xa4>
 80081fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081fe:	d1c5      	bne.n	800818c <__swsetup_r+0x24>
 8008200:	bd38      	pop	{r3, r4, r5, pc}
 8008202:	0799      	lsls	r1, r3, #30
 8008204:	bf58      	it	pl
 8008206:	6962      	ldrpl	r2, [r4, #20]
 8008208:	60a2      	str	r2, [r4, #8]
 800820a:	e7f4      	b.n	80081f6 <__swsetup_r+0x8e>
 800820c:	2000      	movs	r0, #0
 800820e:	e7f7      	b.n	8008200 <__swsetup_r+0x98>
 8008210:	20000044 	.word	0x20000044

08008214 <_raise_r>:
 8008214:	291f      	cmp	r1, #31
 8008216:	b538      	push	{r3, r4, r5, lr}
 8008218:	4605      	mov	r5, r0
 800821a:	460c      	mov	r4, r1
 800821c:	d904      	bls.n	8008228 <_raise_r+0x14>
 800821e:	2316      	movs	r3, #22
 8008220:	6003      	str	r3, [r0, #0]
 8008222:	f04f 30ff 	mov.w	r0, #4294967295
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800822a:	b112      	cbz	r2, 8008232 <_raise_r+0x1e>
 800822c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008230:	b94b      	cbnz	r3, 8008246 <_raise_r+0x32>
 8008232:	4628      	mov	r0, r5
 8008234:	f000 f830 	bl	8008298 <_getpid_r>
 8008238:	4622      	mov	r2, r4
 800823a:	4601      	mov	r1, r0
 800823c:	4628      	mov	r0, r5
 800823e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008242:	f000 b817 	b.w	8008274 <_kill_r>
 8008246:	2b01      	cmp	r3, #1
 8008248:	d00a      	beq.n	8008260 <_raise_r+0x4c>
 800824a:	1c59      	adds	r1, r3, #1
 800824c:	d103      	bne.n	8008256 <_raise_r+0x42>
 800824e:	2316      	movs	r3, #22
 8008250:	6003      	str	r3, [r0, #0]
 8008252:	2001      	movs	r0, #1
 8008254:	e7e7      	b.n	8008226 <_raise_r+0x12>
 8008256:	2100      	movs	r1, #0
 8008258:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800825c:	4620      	mov	r0, r4
 800825e:	4798      	blx	r3
 8008260:	2000      	movs	r0, #0
 8008262:	e7e0      	b.n	8008226 <_raise_r+0x12>

08008264 <raise>:
 8008264:	4b02      	ldr	r3, [pc, #8]	@ (8008270 <raise+0xc>)
 8008266:	4601      	mov	r1, r0
 8008268:	6818      	ldr	r0, [r3, #0]
 800826a:	f7ff bfd3 	b.w	8008214 <_raise_r>
 800826e:	bf00      	nop
 8008270:	20000044 	.word	0x20000044

08008274 <_kill_r>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	4d07      	ldr	r5, [pc, #28]	@ (8008294 <_kill_r+0x20>)
 8008278:	2300      	movs	r3, #0
 800827a:	4604      	mov	r4, r0
 800827c:	4608      	mov	r0, r1
 800827e:	4611      	mov	r1, r2
 8008280:	602b      	str	r3, [r5, #0]
 8008282:	f7f9 fd61 	bl	8001d48 <_kill>
 8008286:	1c43      	adds	r3, r0, #1
 8008288:	d102      	bne.n	8008290 <_kill_r+0x1c>
 800828a:	682b      	ldr	r3, [r5, #0]
 800828c:	b103      	cbz	r3, 8008290 <_kill_r+0x1c>
 800828e:	6023      	str	r3, [r4, #0]
 8008290:	bd38      	pop	{r3, r4, r5, pc}
 8008292:	bf00      	nop
 8008294:	200006a0 	.word	0x200006a0

08008298 <_getpid_r>:
 8008298:	f7f9 bd4e 	b.w	8001d38 <_getpid>

0800829c <_malloc_usable_size_r>:
 800829c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a0:	1f18      	subs	r0, r3, #4
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	bfbc      	itt	lt
 80082a6:	580b      	ldrlt	r3, [r1, r0]
 80082a8:	18c0      	addlt	r0, r0, r3
 80082aa:	4770      	bx	lr

080082ac <__swhatbuf_r>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	460c      	mov	r4, r1
 80082b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b4:	2900      	cmp	r1, #0
 80082b6:	b096      	sub	sp, #88	@ 0x58
 80082b8:	4615      	mov	r5, r2
 80082ba:	461e      	mov	r6, r3
 80082bc:	da0d      	bge.n	80082da <__swhatbuf_r+0x2e>
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082c4:	f04f 0100 	mov.w	r1, #0
 80082c8:	bf14      	ite	ne
 80082ca:	2340      	movne	r3, #64	@ 0x40
 80082cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082d0:	2000      	movs	r0, #0
 80082d2:	6031      	str	r1, [r6, #0]
 80082d4:	602b      	str	r3, [r5, #0]
 80082d6:	b016      	add	sp, #88	@ 0x58
 80082d8:	bd70      	pop	{r4, r5, r6, pc}
 80082da:	466a      	mov	r2, sp
 80082dc:	f000 f848 	bl	8008370 <_fstat_r>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	dbec      	blt.n	80082be <__swhatbuf_r+0x12>
 80082e4:	9901      	ldr	r1, [sp, #4]
 80082e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082ee:	4259      	negs	r1, r3
 80082f0:	4159      	adcs	r1, r3
 80082f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082f6:	e7eb      	b.n	80082d0 <__swhatbuf_r+0x24>

080082f8 <__smakebuf_r>:
 80082f8:	898b      	ldrh	r3, [r1, #12]
 80082fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082fc:	079d      	lsls	r5, r3, #30
 80082fe:	4606      	mov	r6, r0
 8008300:	460c      	mov	r4, r1
 8008302:	d507      	bpl.n	8008314 <__smakebuf_r+0x1c>
 8008304:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	6123      	str	r3, [r4, #16]
 800830c:	2301      	movs	r3, #1
 800830e:	6163      	str	r3, [r4, #20]
 8008310:	b003      	add	sp, #12
 8008312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008314:	ab01      	add	r3, sp, #4
 8008316:	466a      	mov	r2, sp
 8008318:	f7ff ffc8 	bl	80082ac <__swhatbuf_r>
 800831c:	9f00      	ldr	r7, [sp, #0]
 800831e:	4605      	mov	r5, r0
 8008320:	4639      	mov	r1, r7
 8008322:	4630      	mov	r0, r6
 8008324:	f7fe fee4 	bl	80070f0 <_malloc_r>
 8008328:	b948      	cbnz	r0, 800833e <__smakebuf_r+0x46>
 800832a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800832e:	059a      	lsls	r2, r3, #22
 8008330:	d4ee      	bmi.n	8008310 <__smakebuf_r+0x18>
 8008332:	f023 0303 	bic.w	r3, r3, #3
 8008336:	f043 0302 	orr.w	r3, r3, #2
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	e7e2      	b.n	8008304 <__smakebuf_r+0xc>
 800833e:	89a3      	ldrh	r3, [r4, #12]
 8008340:	6020      	str	r0, [r4, #0]
 8008342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008346:	81a3      	strh	r3, [r4, #12]
 8008348:	9b01      	ldr	r3, [sp, #4]
 800834a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800834e:	b15b      	cbz	r3, 8008368 <__smakebuf_r+0x70>
 8008350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008354:	4630      	mov	r0, r6
 8008356:	f000 f81d 	bl	8008394 <_isatty_r>
 800835a:	b128      	cbz	r0, 8008368 <__smakebuf_r+0x70>
 800835c:	89a3      	ldrh	r3, [r4, #12]
 800835e:	f023 0303 	bic.w	r3, r3, #3
 8008362:	f043 0301 	orr.w	r3, r3, #1
 8008366:	81a3      	strh	r3, [r4, #12]
 8008368:	89a3      	ldrh	r3, [r4, #12]
 800836a:	431d      	orrs	r5, r3
 800836c:	81a5      	strh	r5, [r4, #12]
 800836e:	e7cf      	b.n	8008310 <__smakebuf_r+0x18>

08008370 <_fstat_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	4d07      	ldr	r5, [pc, #28]	@ (8008390 <_fstat_r+0x20>)
 8008374:	2300      	movs	r3, #0
 8008376:	4604      	mov	r4, r0
 8008378:	4608      	mov	r0, r1
 800837a:	4611      	mov	r1, r2
 800837c:	602b      	str	r3, [r5, #0]
 800837e:	f7f9 fd43 	bl	8001e08 <_fstat>
 8008382:	1c43      	adds	r3, r0, #1
 8008384:	d102      	bne.n	800838c <_fstat_r+0x1c>
 8008386:	682b      	ldr	r3, [r5, #0]
 8008388:	b103      	cbz	r3, 800838c <_fstat_r+0x1c>
 800838a:	6023      	str	r3, [r4, #0]
 800838c:	bd38      	pop	{r3, r4, r5, pc}
 800838e:	bf00      	nop
 8008390:	200006a0 	.word	0x200006a0

08008394 <_isatty_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	4d06      	ldr	r5, [pc, #24]	@ (80083b0 <_isatty_r+0x1c>)
 8008398:	2300      	movs	r3, #0
 800839a:	4604      	mov	r4, r0
 800839c:	4608      	mov	r0, r1
 800839e:	602b      	str	r3, [r5, #0]
 80083a0:	f7f9 fd42 	bl	8001e28 <_isatty>
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d102      	bne.n	80083ae <_isatty_r+0x1a>
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	b103      	cbz	r3, 80083ae <_isatty_r+0x1a>
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	bd38      	pop	{r3, r4, r5, pc}
 80083b0:	200006a0 	.word	0x200006a0

080083b4 <_init>:
 80083b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b6:	bf00      	nop
 80083b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ba:	bc08      	pop	{r3}
 80083bc:	469e      	mov	lr, r3
 80083be:	4770      	bx	lr

080083c0 <_fini>:
 80083c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c2:	bf00      	nop
 80083c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083c6:	bc08      	pop	{r3}
 80083c8:	469e      	mov	lr, r3
 80083ca:	4770      	bx	lr
