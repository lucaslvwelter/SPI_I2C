
TRABALHO_SPI_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c7c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003e4c  08003e4c  00004e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f44  08003f44  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003f44  08003f44  00004f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f4c  08003f4c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f4c  08003f4c  00004f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f50  08003f50  00004f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003f54  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000068  08003fbc  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08003fbc  00005470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b08a  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f5  00000000  00000000  00010122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00012218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000805  00000000  00000000  00012ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c13  00000000  00000000  000134ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0ac  00000000  00000000  000350c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc1de  00000000  00000000  0004316c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f34a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d0  00000000  00000000  0010f390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00112660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003e34 	.word	0x08003e34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003e34 	.word	0x08003e34

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	4b39      	ldr	r3, [pc, #228]	@ (80006dc <MX_GPIO_Init+0x100>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a38      	ldr	r2, [pc, #224]	@ (80006dc <MX_GPIO_Init+0x100>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b36      	ldr	r3, [pc, #216]	@ (80006dc <MX_GPIO_Init+0x100>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	4b32      	ldr	r3, [pc, #200]	@ (80006dc <MX_GPIO_Init+0x100>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a31      	ldr	r2, [pc, #196]	@ (80006dc <MX_GPIO_Init+0x100>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b2f      	ldr	r3, [pc, #188]	@ (80006dc <MX_GPIO_Init+0x100>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	4b2b      	ldr	r3, [pc, #172]	@ (80006dc <MX_GPIO_Init+0x100>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a2a      	ldr	r2, [pc, #168]	@ (80006dc <MX_GPIO_Init+0x100>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b28      	ldr	r3, [pc, #160]	@ (80006dc <MX_GPIO_Init+0x100>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <MX_GPIO_Init+0x100>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a23      	ldr	r2, [pc, #140]	@ (80006dc <MX_GPIO_Init+0x100>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_GPIO_Init+0x100>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f249 0120 	movw	r1, #36896	@ 0x9020
 8000668:	481d      	ldr	r0, [pc, #116]	@ (80006e0 <MX_GPIO_Init+0x104>)
 800066a:	f001 f869 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CE_GPIO_Port, LCD_CE_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000674:	481b      	ldr	r0, [pc, #108]	@ (80006e4 <MX_GPIO_Init+0x108>)
 8000676:	f001 f863 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000680:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	4814      	ldr	r0, [pc, #80]	@ (80006e4 <MX_GPIO_Init+0x108>)
 8000692:	f000 fec1 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_RST_Pin|LCD_DC_Pin;
 8000696:	f249 0320 	movw	r3, #36896	@ 0x9020
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	480c      	ldr	r0, [pc, #48]	@ (80006e0 <MX_GPIO_Init+0x104>)
 80006b0:	f000 feb2 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CE_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin;
 80006b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CE_GPIO_Port, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_GPIO_Init+0x108>)
 80006ce:	f000 fea3 	bl	8001418 <HAL_GPIO_Init>

}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	@ 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020000 	.word	0x40020000
 80006e4:	40020800 	.word	0x40020800

080006e8 <LCD5110_update>:
#include "lcd5110_hal.h"
#include "lcd5110_graphics.h"

static uint8_t scrbuf[504];

void LCD5110_update(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
    LCD5110_SetXY(0, 0);
 80006ee:	2100      	movs	r1, #0
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 f992 	bl	8000a1a <LCD5110_SetXY>
    for (int i = 0; i < 504; i++) {
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	e009      	b.n	8000710 <LCD5110_update+0x28>
        LCD5110_SendData(scrbuf[i]);
 80006fc:	4a09      	ldr	r2, [pc, #36]	@ (8000724 <LCD5110_update+0x3c>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f939 	bl	800097c <LCD5110_SendData>
    for (int i = 0; i < 504; i++) {
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3301      	adds	r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 8000716:	dbf1      	blt.n	80006fc <LCD5110_update+0x14>
    }
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000084 	.word	0x20000084

08000728 <LCD5110_clrScr>:

void LCD5110_clrScr(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 504; i++) {
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	e007      	b.n	8000744 <LCD5110_clrScr+0x1c>
        scrbuf[i] = 0x00;
 8000734:	4a08      	ldr	r2, [pc, #32]	@ (8000758 <LCD5110_clrScr+0x30>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4413      	add	r3, r2
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 504; i++) {
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3301      	adds	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 800074a:	dbf3      	blt.n	8000734 <LCD5110_clrScr+0xc>
    }
    LCD5110_update();
 800074c:	f7ff ffcc 	bl	80006e8 <LCD5110_update>
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000084 	.word	0x20000084

0800075c <LCD5110_setPixel>:
        scrbuf[i] = 0xFF;
    }
    LCD5110_update();
}

void LCD5110_setPixel(uint16_t x, uint16_t y) {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	460a      	mov	r2, r1
 8000766:	80fb      	strh	r3, [r7, #6]
 8000768:	4613      	mov	r3, r2
 800076a:	80bb      	strh	r3, [r7, #4]
    if (x >= 84 || y >= 48) return;
 800076c:	88fb      	ldrh	r3, [r7, #6]
 800076e:	2b53      	cmp	r3, #83	@ 0x53
 8000770:	d821      	bhi.n	80007b6 <LCD5110_setPixel+0x5a>
 8000772:	88bb      	ldrh	r3, [r7, #4]
 8000774:	2b2f      	cmp	r3, #47	@ 0x2f
 8000776:	d81e      	bhi.n	80007b6 <LCD5110_setPixel+0x5a>
    scrbuf[(y/8)*84 + x] |= (1 << (y % 8));
 8000778:	88bb      	ldrh	r3, [r7, #4]
 800077a:	08db      	lsrs	r3, r3, #3
 800077c:	b298      	uxth	r0, r3
 800077e:	4602      	mov	r2, r0
 8000780:	2354      	movs	r3, #84	@ 0x54
 8000782:	fb03 f202 	mul.w	r2, r3, r2
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	4413      	add	r3, r2
 800078a:	4a0e      	ldr	r2, [pc, #56]	@ (80007c4 <LCD5110_setPixel+0x68>)
 800078c:	5cd3      	ldrb	r3, [r2, r3]
 800078e:	b25a      	sxtb	r2, r3
 8000790:	88bb      	ldrh	r3, [r7, #4]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	2101      	movs	r1, #1
 8000798:	fa01 f303 	lsl.w	r3, r1, r3
 800079c:	b25b      	sxtb	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b259      	sxtb	r1, r3
 80007a2:	4602      	mov	r2, r0
 80007a4:	2354      	movs	r3, #84	@ 0x54
 80007a6:	fb03 f202 	mul.w	r2, r3, r2
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	4413      	add	r3, r2
 80007ae:	b2c9      	uxtb	r1, r1
 80007b0:	4a04      	ldr	r2, [pc, #16]	@ (80007c4 <LCD5110_setPixel+0x68>)
 80007b2:	54d1      	strb	r1, [r2, r3]
 80007b4:	e000      	b.n	80007b8 <LCD5110_setPixel+0x5c>
    if (x >= 84 || y >= 48) return;
 80007b6:	bf00      	nop
}
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000084 	.word	0x20000084

080007c8 <LCD5110_drawLine>:
        LCD5110_clrPixel(x, y+i);
    }
    LCD5110_update();
}

void LCD5110_drawLine(int x1, int y1, int x2, int y2) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	@ 0x28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	603b      	str	r3, [r7, #0]
    int dx = abs(x2 - x1);
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	1ad3      	subs	r3, r2, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	bfb8      	it	lt
 80007e0:	425b      	neglt	r3, r3
 80007e2:	623b      	str	r3, [r7, #32]
    int dy = abs(y2 - y1);
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	bfb8      	it	lt
 80007ee:	425b      	neglt	r3, r3
 80007f0:	61fb      	str	r3, [r7, #28]
    int sx = (x1 < x2) ? 1 : -1;
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	da01      	bge.n	80007fe <LCD5110_drawLine+0x36>
 80007fa:	2301      	movs	r3, #1
 80007fc:	e001      	b.n	8000802 <LCD5110_drawLine+0x3a>
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	61bb      	str	r3, [r7, #24]
    int sy = (y1 < y2) ? 1 : -1;
 8000804:	68ba      	ldr	r2, [r7, #8]
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	429a      	cmp	r2, r3
 800080a:	da01      	bge.n	8000810 <LCD5110_drawLine+0x48>
 800080c:	2301      	movs	r3, #1
 800080e:	e001      	b.n	8000814 <LCD5110_drawLine+0x4c>
 8000810:	f04f 33ff 	mov.w	r3, #4294967295
 8000814:	617b      	str	r3, [r7, #20]
    int err = dx - dy;
 8000816:	6a3a      	ldr	r2, [r7, #32]
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24

    while (1) {
        LCD5110_setPixel(x1, y1);
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	b29b      	uxth	r3, r3
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	b292      	uxth	r2, r2
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff97 	bl	800075c <LCD5110_setPixel>
        if (x1 == x2 && y1 == y2) break;
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	429a      	cmp	r2, r3
 8000834:	d103      	bne.n	800083e <LCD5110_drawLine+0x76>
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	429a      	cmp	r2, r3
 800083c:	d01c      	beq.n	8000878 <LCD5110_drawLine+0xb0>
        int e2 = 2 * err;
 800083e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	613b      	str	r3, [r7, #16]
        if (e2 > -dy) { err -= dy; x1 += sx; }
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	425b      	negs	r3, r3
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	429a      	cmp	r2, r3
 800084c:	dd07      	ble.n	800085e <LCD5110_drawLine+0x96>
 800084e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	4413      	add	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
        if (e2 < dx)  { err += dx; y1 += sy; }
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	6a3b      	ldr	r3, [r7, #32]
 8000862:	429a      	cmp	r2, r3
 8000864:	dadb      	bge.n	800081e <LCD5110_drawLine+0x56>
 8000866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000868:	6a3b      	ldr	r3, [r7, #32]
 800086a:	4413      	add	r3, r2
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	4413      	add	r3, r2
 8000874:	60bb      	str	r3, [r7, #8]
    while (1) {
 8000876:	e7d2      	b.n	800081e <LCD5110_drawLine+0x56>
        if (x1 == x2 && y1 == y2) break;
 8000878:	bf00      	nop
    }
    LCD5110_update();
 800087a:	f7ff ff35 	bl	80006e8 <LCD5110_update>
}
 800087e:	bf00      	nop
 8000880:	3728      	adds	r7, #40	@ 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <LCD5110_Delay>:
#include "lcd5110_hal.h"
#include "font6_8.h" // fonte 6x8

static void LCD5110_Delay(uint32_t ms) {
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f000 fcb8 	bl	8001204 <HAL_Delay>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <LCD5110_DC>:

static void LCD5110_DC(uint8_t val) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	bf14      	ite	ne
 80008ac:	2301      	movne	r3, #1
 80008ae:	2300      	moveq	r3, #0
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	461a      	mov	r2, r3
 80008b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b8:	4803      	ldr	r0, [pc, #12]	@ (80008c8 <LCD5110_DC+0x2c>)
 80008ba:	f000 ff41 	bl	8001740 <HAL_GPIO_WritePin>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40020000 	.word	0x40020000

080008cc <LCD5110_RST>:

static void LCD5110_RST(uint8_t val) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	bf14      	ite	ne
 80008dc:	2301      	movne	r3, #1
 80008de:	2300      	moveq	r3, #0
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	461a      	mov	r2, r3
 80008e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008e8:	4803      	ldr	r0, [pc, #12]	@ (80008f8 <LCD5110_RST+0x2c>)
 80008ea:	f000 ff29 	bl	8001740 <HAL_GPIO_WritePin>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40020000 	.word	0x40020000

080008fc <LCD5110_CE>:

static void LCD5110_CE(uint8_t val) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CE_GPIO_Port, LCD_CE_Pin, val ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	bf14      	ite	ne
 800090c:	2301      	movne	r3, #1
 800090e:	2300      	moveq	r3, #0
 8000910:	b2db      	uxtb	r3, r3
 8000912:	461a      	mov	r2, r3
 8000914:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000918:	4803      	ldr	r0, [pc, #12]	@ (8000928 <LCD5110_CE+0x2c>)
 800091a:	f000 ff11 	bl	8001740 <HAL_GPIO_WritePin>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40020800 	.word	0x40020800

0800092c <LCD5110_Send>:

void LCD5110_Send(uint8_t data) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8000936:	1df9      	adds	r1, r7, #7
 8000938:	f04f 33ff 	mov.w	r3, #4294967295
 800093c:	2201      	movs	r2, #1
 800093e:	4803      	ldr	r0, [pc, #12]	@ (800094c <LCD5110_Send+0x20>)
 8000940:	f001 fd89 	bl	8002456 <HAL_SPI_Transmit>
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000027c 	.word	0x2000027c

08000950 <LCD5110_SendCommand>:

void LCD5110_SendCommand(uint8_t cmd) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
    LCD5110_DC(0);
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff ff9e 	bl	800089c <LCD5110_DC>
    LCD5110_CE(0);
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff ffcb 	bl	80008fc <LCD5110_CE>
    LCD5110_Send(cmd);
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ffdf 	bl	800092c <LCD5110_Send>
    LCD5110_CE(1);
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff ffc4 	bl	80008fc <LCD5110_CE>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <LCD5110_SendData>:

void LCD5110_SendData(uint8_t data) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
    LCD5110_DC(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff ff88 	bl	800089c <LCD5110_DC>
    LCD5110_CE(0);
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff ffb5 	bl	80008fc <LCD5110_CE>
    LCD5110_Send(data);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ffc9 	bl	800092c <LCD5110_Send>
    LCD5110_CE(1);
 800099a:	2001      	movs	r0, #1
 800099c:	f7ff ffae 	bl	80008fc <LCD5110_CE>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <LCD5110_Init>:

void LCD5110_Init(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    LCD5110_RST(0);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff ff8d 	bl	80008cc <LCD5110_RST>
    LCD5110_Delay(10);
 80009b2:	200a      	movs	r0, #10
 80009b4:	f7ff ff67 	bl	8000886 <LCD5110_Delay>
    LCD5110_RST(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff ff87 	bl	80008cc <LCD5110_RST>

    LCD5110_SendCommand(0x21); // Extended commands
 80009be:	2021      	movs	r0, #33	@ 0x21
 80009c0:	f7ff ffc6 	bl	8000950 <LCD5110_SendCommand>
    LCD5110_SendCommand(0xC6); // Vop (contrast)
 80009c4:	20c6      	movs	r0, #198	@ 0xc6
 80009c6:	f7ff ffc3 	bl	8000950 <LCD5110_SendCommand>
    LCD5110_SendCommand(0x06); // Temp coef
 80009ca:	2006      	movs	r0, #6
 80009cc:	f7ff ffc0 	bl	8000950 <LCD5110_SendCommand>
    LCD5110_SendCommand(0x13); // Bias
 80009d0:	2013      	movs	r0, #19
 80009d2:	f7ff ffbd 	bl	8000950 <LCD5110_SendCommand>
    LCD5110_SendCommand(0x20); // Basic commands
 80009d6:	2020      	movs	r0, #32
 80009d8:	f7ff ffba 	bl	8000950 <LCD5110_SendCommand>
    LCD5110_SendCommand(0x0C); // Normal display
 80009dc:	200c      	movs	r0, #12
 80009de:	f7ff ffb7 	bl	8000950 <LCD5110_SendCommand>

    LCD5110_Clear();
 80009e2:	f000 f802 	bl	80009ea <LCD5110_Clear>
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}

080009ea <LCD5110_Clear>:

void LCD5110_Clear(void) {
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
    for (int i = 0; i < 504; i++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	e005      	b.n	8000a02 <LCD5110_Clear+0x18>
        LCD5110_SendData(0x00);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f7ff ffc0 	bl	800097c <LCD5110_SendData>
    for (int i = 0; i < 504; i++)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3301      	adds	r3, #1
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 8000a08:	dbf5      	blt.n	80009f6 <LCD5110_Clear+0xc>
    LCD5110_SetXY(0, 0);
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f000 f804 	bl	8000a1a <LCD5110_SetXY>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <LCD5110_SetXY>:

void LCD5110_SetXY(uint8_t x, uint8_t y) {
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	460a      	mov	r2, r1
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	4613      	mov	r3, r2
 8000a28:	71bb      	strb	r3, [r7, #6]
    LCD5110_SendCommand(0x80 | (x * 6));
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	0052      	lsls	r2, r2, #1
 8000a30:	4413      	add	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	b25b      	sxtb	r3, r3
 8000a38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff85 	bl	8000950 <LCD5110_SendCommand>
    LCD5110_SendCommand(0x40 | y);
 8000a46:	79bb      	ldrb	r3, [r7, #6]
 8000a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ff7e 	bl	8000950 <LCD5110_SendCommand>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a62:	f000 fb5d 	bl	8001120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a66:	f000 f87d 	bl	8000b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6a:	f7ff fdb7 	bl	80005dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a6e:	f000 fabb 	bl	8000fe8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000a72:	f000 f8eb 	bl	8000c4c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  LCD5110_Init();
 8000a76:	f7ff ff97 	bl	80009a8 <LCD5110_Init>
  LCD5110_clrScr();
 8000a7a:	f7ff fe55 	bl	8000728 <LCD5110_clrScr>

  srand(HAL_GetTick());
 8000a7e:	f000 fbb5 	bl	80011ec <HAL_GetTick>
 8000a82:	4603      	mov	r3, r0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 f9cb 	bl	8002e20 <srand>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    // Sorteia uma direção de seta: 0=cima, 1=baixo, 2=esquerda, 3=direita
	    uint8_t dir = rand() % 4;
 8000a8a:	f002 f9f7 	bl	8002e7c <rand>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	425a      	negs	r2, r3
 8000a92:	f003 0303 	and.w	r3, r3, #3
 8000a96:	f002 0203 	and.w	r2, r2, #3
 8000a9a:	bf58      	it	pl
 8000a9c:	4253      	negpl	r3, r2
 8000a9e:	71fb      	strb	r3, [r7, #7]

	    LCD5110_clrScr();
 8000aa0:	f7ff fe42 	bl	8000728 <LCD5110_clrScr>

	    switch (dir) {
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d856      	bhi.n	8000b58 <main+0xfc>
 8000aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab0 <main+0x54>)
 8000aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab0:	08000ac1 	.word	0x08000ac1
 8000ab4:	08000ae7 	.word	0x08000ae7
 8000ab8:	08000b0d 	.word	0x08000b0d
 8000abc:	08000b33 	.word	0x08000b33
	      case 0: // Cima
	        LCD5110_drawLine(42, 30, 42, 10);
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	222a      	movs	r2, #42	@ 0x2a
 8000ac4:	211e      	movs	r1, #30
 8000ac6:	202a      	movs	r0, #42	@ 0x2a
 8000ac8:	f7ff fe7e 	bl	80007c8 <LCD5110_drawLine>
	        LCD5110_drawLine(42, 10, 36, 16);
 8000acc:	2310      	movs	r3, #16
 8000ace:	2224      	movs	r2, #36	@ 0x24
 8000ad0:	210a      	movs	r1, #10
 8000ad2:	202a      	movs	r0, #42	@ 0x2a
 8000ad4:	f7ff fe78 	bl	80007c8 <LCD5110_drawLine>
	        LCD5110_drawLine(42, 10, 48, 16);
 8000ad8:	2310      	movs	r3, #16
 8000ada:	2230      	movs	r2, #48	@ 0x30
 8000adc:	210a      	movs	r1, #10
 8000ade:	202a      	movs	r0, #42	@ 0x2a
 8000ae0:	f7ff fe72 	bl	80007c8 <LCD5110_drawLine>
	        break;
 8000ae4:	e038      	b.n	8000b58 <main+0xfc>
	      case 1: // Baixo
	        LCD5110_drawLine(42, 10, 42, 30);
 8000ae6:	231e      	movs	r3, #30
 8000ae8:	222a      	movs	r2, #42	@ 0x2a
 8000aea:	210a      	movs	r1, #10
 8000aec:	202a      	movs	r0, #42	@ 0x2a
 8000aee:	f7ff fe6b 	bl	80007c8 <LCD5110_drawLine>
	        LCD5110_drawLine(42, 30, 36, 24);
 8000af2:	2318      	movs	r3, #24
 8000af4:	2224      	movs	r2, #36	@ 0x24
 8000af6:	211e      	movs	r1, #30
 8000af8:	202a      	movs	r0, #42	@ 0x2a
 8000afa:	f7ff fe65 	bl	80007c8 <LCD5110_drawLine>
	        LCD5110_drawLine(42, 30, 48, 24);
 8000afe:	2318      	movs	r3, #24
 8000b00:	2230      	movs	r2, #48	@ 0x30
 8000b02:	211e      	movs	r1, #30
 8000b04:	202a      	movs	r0, #42	@ 0x2a
 8000b06:	f7ff fe5f 	bl	80007c8 <LCD5110_drawLine>
	        break;
 8000b0a:	e025      	b.n	8000b58 <main+0xfc>
	      case 2: // Esquerda
	        LCD5110_drawLine(50, 24, 30, 24);
 8000b0c:	2318      	movs	r3, #24
 8000b0e:	221e      	movs	r2, #30
 8000b10:	2118      	movs	r1, #24
 8000b12:	2032      	movs	r0, #50	@ 0x32
 8000b14:	f7ff fe58 	bl	80007c8 <LCD5110_drawLine>
	        LCD5110_drawLine(30, 24, 36, 18);
 8000b18:	2312      	movs	r3, #18
 8000b1a:	2224      	movs	r2, #36	@ 0x24
 8000b1c:	2118      	movs	r1, #24
 8000b1e:	201e      	movs	r0, #30
 8000b20:	f7ff fe52 	bl	80007c8 <LCD5110_drawLine>
	        LCD5110_drawLine(30, 24, 36, 30);
 8000b24:	231e      	movs	r3, #30
 8000b26:	2224      	movs	r2, #36	@ 0x24
 8000b28:	2118      	movs	r1, #24
 8000b2a:	201e      	movs	r0, #30
 8000b2c:	f7ff fe4c 	bl	80007c8 <LCD5110_drawLine>
	        break;
 8000b30:	e012      	b.n	8000b58 <main+0xfc>
	      case 3: // Direita
	        LCD5110_drawLine(30, 24, 50, 24);
 8000b32:	2318      	movs	r3, #24
 8000b34:	2232      	movs	r2, #50	@ 0x32
 8000b36:	2118      	movs	r1, #24
 8000b38:	201e      	movs	r0, #30
 8000b3a:	f7ff fe45 	bl	80007c8 <LCD5110_drawLine>
	        LCD5110_drawLine(50, 24, 44, 18);
 8000b3e:	2312      	movs	r3, #18
 8000b40:	222c      	movs	r2, #44	@ 0x2c
 8000b42:	2118      	movs	r1, #24
 8000b44:	2032      	movs	r0, #50	@ 0x32
 8000b46:	f7ff fe3f 	bl	80007c8 <LCD5110_drawLine>
	        LCD5110_drawLine(50, 24, 44, 30);
 8000b4a:	231e      	movs	r3, #30
 8000b4c:	222c      	movs	r2, #44	@ 0x2c
 8000b4e:	2118      	movs	r1, #24
 8000b50:	2032      	movs	r0, #50	@ 0x32
 8000b52:	f7ff fe39 	bl	80007c8 <LCD5110_drawLine>
	        break;
 8000b56:	bf00      	nop
	    }

	    HAL_Delay(1000);
 8000b58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b5c:	f000 fb52 	bl	8001204 <HAL_Delay>
  {
 8000b60:	e793      	b.n	8000a8a <main+0x2e>
 8000b62:	bf00      	nop

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b094      	sub	sp, #80	@ 0x50
 8000b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2234      	movs	r2, #52	@ 0x34
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 fac5 	bl	8003102 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c38 <SystemClock_Config+0xd4>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	4a29      	ldr	r2, [pc, #164]	@ (8000c38 <SystemClock_Config+0xd4>)
 8000b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b98:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <SystemClock_Config+0xd4>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	4b24      	ldr	r3, [pc, #144]	@ (8000c3c <SystemClock_Config+0xd8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bb0:	4a22      	ldr	r2, [pc, #136]	@ (8000c3c <SystemClock_Config+0xd8>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b20      	ldr	r3, [pc, #128]	@ (8000c3c <SystemClock_Config+0xd8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bcc:	2310      	movs	r3, #16
 8000bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bd8:	2310      	movs	r3, #16
 8000bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bdc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000be0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000be2:	2304      	movs	r3, #4
 8000be4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000be6:	2302      	movs	r3, #2
 8000be8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 f908 	bl	8001e08 <HAL_RCC_OscConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bfe:	f000 f81f 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c02:	230f      	movs	r3, #15
 8000c04:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c06:	2302      	movs	r3, #2
 8000c08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c18:	f107 0308 	add.w	r3, r7, #8
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fda8 	bl	8001774 <HAL_RCC_ClockConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c2a:	f000 f809 	bl	8000c40 <Error_Handler>
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3750      	adds	r7, #80	@ 0x50
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40007000 	.word	0x40007000

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <Error_Handler+0x8>

08000c4c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000c50:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <MX_SPI2_Init+0x64>)
 8000c52:	4a18      	ldr	r2, [pc, #96]	@ (8000cb4 <MX_SPI2_Init+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c56:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <MX_SPI2_Init+0x64>)
 8000c58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <MX_SPI2_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <MX_SPI2_Init+0x64>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_SPI2_Init+0x64>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <MX_SPI2_Init+0x64>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <MX_SPI2_Init+0x64>)
 8000c78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <MX_SPI2_Init+0x64>)
 8000c80:	2220      	movs	r2, #32
 8000c82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <MX_SPI2_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <MX_SPI2_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c90:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <MX_SPI2_Init+0x64>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <MX_SPI2_Init+0x64>)
 8000c98:	220a      	movs	r2, #10
 8000c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	@ (8000cb0 <MX_SPI2_Init+0x64>)
 8000c9e:	f001 fb51 	bl	8002344 <HAL_SPI_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ca8:	f7ff ffca 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000027c 	.word	0x2000027c
 8000cb4:	40003800 	.word	0x40003800

08000cb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	@ 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a28      	ldr	r2, [pc, #160]	@ (8000d78 <HAL_SPI_MspInit+0xc0>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d14a      	bne.n	8000d70 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b27      	ldr	r3, [pc, #156]	@ (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	4a26      	ldr	r2, [pc, #152]	@ (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cea:	4b24      	ldr	r3, [pc, #144]	@ (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b20      	ldr	r3, [pc, #128]	@ (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a18      	ldr	r2, [pc, #96]	@ (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d3e:	2305      	movs	r3, #5
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <HAL_SPI_MspInit+0xc8>)
 8000d4a:	f000 fb65 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000d4e:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d60:	2305      	movs	r3, #5
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4806      	ldr	r0, [pc, #24]	@ (8000d84 <HAL_SPI_MspInit+0xcc>)
 8000d6c:	f000 fb54 	bl	8001418 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	@ 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40003800 	.word	0x40003800
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020800 	.word	0x40020800
 8000d84:	40020400 	.word	0x40020400

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	4a08      	ldr	r2, [pc, #32]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dc6:	2007      	movs	r0, #7
 8000dc8:	f000 faf2 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <NMI_Handler+0x4>

08000de0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <MemManage_Handler+0x4>

08000df0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <UsageFault_Handler+0x4>

08000e00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2e:	f000 f9c9 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  return 1;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <_kill>:

int _kill(int pid, int sig)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e50:	f002 f9a6 	bl	80031a0 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2216      	movs	r2, #22
 8000e58:	601a      	str	r2, [r3, #0]
  return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_exit>:

void _exit (int status)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffe7 	bl	8000e46 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <_exit+0x12>

08000e7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	e00a      	b.n	8000ea4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e8e:	f3af 8000 	nop.w
 8000e92:	4601      	mov	r1, r0
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	60ba      	str	r2, [r7, #8]
 8000e9a:	b2ca      	uxtb	r2, r1
 8000e9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dbf0      	blt.n	8000e8e <_read+0x12>
  }

  return len;
 8000eac:	687b      	ldr	r3, [r7, #4]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	e009      	b.n	8000edc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	60ba      	str	r2, [r7, #8]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbf1      	blt.n	8000ec8 <_write+0x12>
  }
  return len;
 8000ee4:	687b      	ldr	r3, [r7, #4]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <_close>:

int _close(int file)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f16:	605a      	str	r2, [r3, #4]
  return 0;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <_isatty>:

int _isatty(int file)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f002 f90a 	bl	80031a0 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20020000 	.word	0x20020000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	200002d4 	.word	0x200002d4
 8000fc0:	20000470 	.word	0x20000470

08000fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <SystemInit+0x20>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <SystemInit+0x20>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_USART2_UART_Init+0x4c>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <MX_USART2_UART_Init+0x50>)
 8000ff0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <MX_USART2_UART_Init+0x4c>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ff8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_USART2_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_USART2_UART_Init+0x4c>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <MX_USART2_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_USART2_UART_Init+0x4c>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_USART2_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_USART2_UART_Init+0x4c>)
 8001020:	f001 fc3a 	bl	8002898 <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800102a:	f7ff fe09 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200002d8 	.word	0x200002d8
 8001038:	40004400 	.word	0x40004400

0800103c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	@ 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a19      	ldr	r2, [pc, #100]	@ (80010c0 <HAL_UART_MspInit+0x84>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d12b      	bne.n	80010b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <HAL_UART_MspInit+0x88>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	4a17      	ldr	r2, [pc, #92]	@ (80010c4 <HAL_UART_MspInit+0x88>)
 8001068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800106c:	6413      	str	r3, [r2, #64]	@ 0x40
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <HAL_UART_MspInit+0x88>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <HAL_UART_MspInit+0x88>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a10      	ldr	r2, [pc, #64]	@ (80010c4 <HAL_UART_MspInit+0x88>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <HAL_UART_MspInit+0x88>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001096:	230c      	movs	r3, #12
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010a6:	2307      	movs	r3, #7
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <HAL_UART_MspInit+0x8c>)
 80010b2:	f000 f9b1 	bl	8001418 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	@ 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40004400 	.word	0x40004400
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020000 	.word	0x40020000

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001104 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010d0:	f7ff ff78 	bl	8000fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d4:	480c      	ldr	r0, [pc, #48]	@ (8001108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010d6:	490d      	ldr	r1, [pc, #52]	@ (800110c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010fa:	f002 f857 	bl	80031ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fe:	f7ff fcad 	bl	8000a5c <main>
  bx  lr    
 8001102:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001104:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001110:	08003f54 	.word	0x08003f54
  ldr r2, =_sbss
 8001114:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001118:	20000470 	.word	0x20000470

0800111c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC_IRQHandler>
	...

08001120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001124:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0d      	ldr	r2, [pc, #52]	@ (8001160 <HAL_Init+0x40>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800112e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001130:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <HAL_Init+0x40>)
 8001136:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800113a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800113c:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a07      	ldr	r2, [pc, #28]	@ (8001160 <HAL_Init+0x40>)
 8001142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001148:	2003      	movs	r0, #3
 800114a:	f000 f931 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114e:	2000      	movs	r0, #0
 8001150:	f000 f808 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001154:	f7ff fe18 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023c00 	.word	0x40023c00

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_InitTick+0x54>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_InitTick+0x58>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f93b 	bl	80013fe <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e00e      	b.n	80011b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d80a      	bhi.n	80011ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f911 	bl	80013c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a4:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <HAL_InitTick+0x5c>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000004 	.word	0x20000004

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000320 	.word	0x20000320

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000320 	.word	0x20000320

08001204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff ffee 	bl	80011ec <HAL_GetTick>
 8001210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d005      	beq.n	800122a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121e:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <HAL_Delay+0x44>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800122a:	bf00      	nop
 800122c:	f7ff ffde 	bl	80011ec <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d8f7      	bhi.n	800122c <HAL_Delay+0x28>
  {
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	@ (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	@ (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	@ 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	@ 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff8e 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff47 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff5c 	bl	8001294 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff8e 	bl	8001304 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5d 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffb0 	bl	800136c <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	@ 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e165      	b.n	8001700 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 8154 	bne.w	80016fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d005      	beq.n	800146a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001466:	2b02      	cmp	r3, #2
 8001468:	d130      	bne.n	80014cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d017      	beq.n	8001508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80ae 	beq.w	80016fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001718 <HAL_GPIO_Init+0x300>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001718 <HAL_GPIO_Init+0x300>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001718 <HAL_GPIO_Init+0x300>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ba:	4a58      	ldr	r2, [pc, #352]	@ (800171c <HAL_GPIO_Init+0x304>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001720 <HAL_GPIO_Init+0x308>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d025      	beq.n	8001632 <HAL_GPIO_Init+0x21a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001724 <HAL_GPIO_Init+0x30c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d01f      	beq.n	800162e <HAL_GPIO_Init+0x216>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001728 <HAL_GPIO_Init+0x310>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d019      	beq.n	800162a <HAL_GPIO_Init+0x212>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4c      	ldr	r2, [pc, #304]	@ (800172c <HAL_GPIO_Init+0x314>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_GPIO_Init+0x20e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4b      	ldr	r2, [pc, #300]	@ (8001730 <HAL_GPIO_Init+0x318>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d00d      	beq.n	8001622 <HAL_GPIO_Init+0x20a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4a      	ldr	r2, [pc, #296]	@ (8001734 <HAL_GPIO_Init+0x31c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d007      	beq.n	800161e <HAL_GPIO_Init+0x206>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a49      	ldr	r2, [pc, #292]	@ (8001738 <HAL_GPIO_Init+0x320>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_GPIO_Init+0x202>
 8001616:	2306      	movs	r3, #6
 8001618:	e00c      	b.n	8001634 <HAL_GPIO_Init+0x21c>
 800161a:	2307      	movs	r3, #7
 800161c:	e00a      	b.n	8001634 <HAL_GPIO_Init+0x21c>
 800161e:	2305      	movs	r3, #5
 8001620:	e008      	b.n	8001634 <HAL_GPIO_Init+0x21c>
 8001622:	2304      	movs	r3, #4
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x21c>
 8001626:	2303      	movs	r3, #3
 8001628:	e004      	b.n	8001634 <HAL_GPIO_Init+0x21c>
 800162a:	2302      	movs	r3, #2
 800162c:	e002      	b.n	8001634 <HAL_GPIO_Init+0x21c>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <HAL_GPIO_Init+0x21c>
 8001632:	2300      	movs	r3, #0
 8001634:	69fa      	ldr	r2, [r7, #28]
 8001636:	f002 0203 	and.w	r2, r2, #3
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	4093      	lsls	r3, r2
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001644:	4935      	ldr	r1, [pc, #212]	@ (800171c <HAL_GPIO_Init+0x304>)
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	3302      	adds	r3, #2
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001652:	4b3a      	ldr	r3, [pc, #232]	@ (800173c <HAL_GPIO_Init+0x324>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001676:	4a31      	ldr	r2, [pc, #196]	@ (800173c <HAL_GPIO_Init+0x324>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800167c:	4b2f      	ldr	r3, [pc, #188]	@ (800173c <HAL_GPIO_Init+0x324>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a0:	4a26      	ldr	r2, [pc, #152]	@ (800173c <HAL_GPIO_Init+0x324>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016a6:	4b25      	ldr	r3, [pc, #148]	@ (800173c <HAL_GPIO_Init+0x324>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ca:	4a1c      	ldr	r2, [pc, #112]	@ (800173c <HAL_GPIO_Init+0x324>)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <HAL_GPIO_Init+0x324>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016f4:	4a11      	ldr	r2, [pc, #68]	@ (800173c <HAL_GPIO_Init+0x324>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3301      	adds	r3, #1
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	2b0f      	cmp	r3, #15
 8001704:	f67f ae96 	bls.w	8001434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3724      	adds	r7, #36	@ 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40013800 	.word	0x40013800
 8001720:	40020000 	.word	0x40020000
 8001724:	40020400 	.word	0x40020400
 8001728:	40020800 	.word	0x40020800
 800172c:	40020c00 	.word	0x40020c00
 8001730:	40021000 	.word	0x40021000
 8001734:	40021400 	.word	0x40021400
 8001738:	40021800 	.word	0x40021800
 800173c:	40013c00 	.word	0x40013c00

08001740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001750:	787b      	ldrb	r3, [r7, #1]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800175c:	e003      	b.n	8001766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	041a      	lsls	r2, r3, #16
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	619a      	str	r2, [r3, #24]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0cc      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b68      	ldr	r3, [pc, #416]	@ (800192c <HAL_RCC_ClockConfig+0x1b8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d90c      	bls.n	80017b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b65      	ldr	r3, [pc, #404]	@ (800192c <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b63      	ldr	r3, [pc, #396]	@ (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b8      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c8:	4b59      	ldr	r3, [pc, #356]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a58      	ldr	r2, [pc, #352]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e0:	4b53      	ldr	r3, [pc, #332]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a52      	ldr	r2, [pc, #328]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4b50      	ldr	r3, [pc, #320]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	494d      	ldr	r1, [pc, #308]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d044      	beq.n	8001894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b47      	ldr	r3, [pc, #284]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d119      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e07f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d003      	beq.n	8001832 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182e:	2b03      	cmp	r3, #3
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001832:	4b3f      	ldr	r3, [pc, #252]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d109      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001842:	4b3b      	ldr	r3, [pc, #236]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e067      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001852:	4b37      	ldr	r3, [pc, #220]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f023 0203 	bic.w	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4934      	ldr	r1, [pc, #208]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	4313      	orrs	r3, r2
 8001862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001864:	f7ff fcc2 	bl	80011ec <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	e00a      	b.n	8001882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186c:	f7ff fcbe 	bl	80011ec <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e04f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	4b2b      	ldr	r3, [pc, #172]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 020c 	and.w	r2, r3, #12
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	429a      	cmp	r2, r3
 8001892:	d1eb      	bne.n	800186c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001894:	4b25      	ldr	r3, [pc, #148]	@ (800192c <HAL_RCC_ClockConfig+0x1b8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d20c      	bcs.n	80018bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b22      	ldr	r3, [pc, #136]	@ (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b20      	ldr	r3, [pc, #128]	@ (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e032      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c8:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4916      	ldr	r1, [pc, #88]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	490e      	ldr	r1, [pc, #56]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018fa:	f000 f855 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 80018fe:	4602      	mov	r2, r0
 8001900:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	490a      	ldr	r1, [pc, #40]	@ (8001934 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	5ccb      	ldrb	r3, [r1, r3]
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	4a09      	ldr	r2, [pc, #36]	@ (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fc22 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00
 8001930:	40023800 	.word	0x40023800
 8001934:	08003e4c 	.word	0x08003e4c
 8001938:	20000000 	.word	0x20000000
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001944:	4b03      	ldr	r3, [pc, #12]	@ (8001954 <HAL_RCC_GetHCLKFreq+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000000 	.word	0x20000000

08001958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800195c:	f7ff fff0 	bl	8001940 <HAL_RCC_GetHCLKFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	0a9b      	lsrs	r3, r3, #10
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	4903      	ldr	r1, [pc, #12]	@ (800197c <HAL_RCC_GetPCLK1Freq+0x24>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001974:	4618      	mov	r0, r3
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	08003e5c 	.word	0x08003e5c

08001980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001984:	f7ff ffdc 	bl	8001940 <HAL_RCC_GetHCLKFreq>
 8001988:	4602      	mov	r2, r0
 800198a:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	0b5b      	lsrs	r3, r3, #13
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	4903      	ldr	r1, [pc, #12]	@ (80019a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001996:	5ccb      	ldrb	r3, [r1, r3]
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	08003e5c 	.word	0x08003e5c

080019a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019ac:	b0ae      	sub	sp, #184	@ 0xb8
 80019ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ce:	4bcb      	ldr	r3, [pc, #812]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x354>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b0c      	cmp	r3, #12
 80019d8:	f200 8206 	bhi.w	8001de8 <HAL_RCC_GetSysClockFreq+0x440>
 80019dc:	a201      	add	r2, pc, #4	@ (adr r2, 80019e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80019de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e2:	bf00      	nop
 80019e4:	08001a19 	.word	0x08001a19
 80019e8:	08001de9 	.word	0x08001de9
 80019ec:	08001de9 	.word	0x08001de9
 80019f0:	08001de9 	.word	0x08001de9
 80019f4:	08001a21 	.word	0x08001a21
 80019f8:	08001de9 	.word	0x08001de9
 80019fc:	08001de9 	.word	0x08001de9
 8001a00:	08001de9 	.word	0x08001de9
 8001a04:	08001a29 	.word	0x08001a29
 8001a08:	08001de9 	.word	0x08001de9
 8001a0c:	08001de9 	.word	0x08001de9
 8001a10:	08001de9 	.word	0x08001de9
 8001a14:	08001c19 	.word	0x08001c19
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a18:	4bb9      	ldr	r3, [pc, #740]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a1e:	e1e7      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a20:	4bb8      	ldr	r3, [pc, #736]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a26:	e1e3      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a28:	4bb4      	ldr	r3, [pc, #720]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x354>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a34:	4bb1      	ldr	r3, [pc, #708]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x354>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d071      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a40:	4bae      	ldr	r3, [pc, #696]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x354>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	099b      	lsrs	r3, r3, #6
 8001a46:	2200      	movs	r2, #0
 8001a48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001a4c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001a66:	4622      	mov	r2, r4
 8001a68:	462b      	mov	r3, r5
 8001a6a:	f04f 0000 	mov.w	r0, #0
 8001a6e:	f04f 0100 	mov.w	r1, #0
 8001a72:	0159      	lsls	r1, r3, #5
 8001a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a78:	0150      	lsls	r0, r2, #5
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4621      	mov	r1, r4
 8001a80:	1a51      	subs	r1, r2, r1
 8001a82:	6439      	str	r1, [r7, #64]	@ 0x40
 8001a84:	4629      	mov	r1, r5
 8001a86:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001a98:	4649      	mov	r1, r9
 8001a9a:	018b      	lsls	r3, r1, #6
 8001a9c:	4641      	mov	r1, r8
 8001a9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aa2:	4641      	mov	r1, r8
 8001aa4:	018a      	lsls	r2, r1, #6
 8001aa6:	4641      	mov	r1, r8
 8001aa8:	1a51      	subs	r1, r2, r1
 8001aaa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001aac:	4649      	mov	r1, r9
 8001aae:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001ac0:	4649      	mov	r1, r9
 8001ac2:	00cb      	lsls	r3, r1, #3
 8001ac4:	4641      	mov	r1, r8
 8001ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001aca:	4641      	mov	r1, r8
 8001acc:	00ca      	lsls	r2, r1, #3
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4622      	mov	r2, r4
 8001ad6:	189b      	adds	r3, r3, r2
 8001ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ada:	462b      	mov	r3, r5
 8001adc:	460a      	mov	r2, r1
 8001ade:	eb42 0303 	adc.w	r3, r2, r3
 8001ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001af0:	4629      	mov	r1, r5
 8001af2:	024b      	lsls	r3, r1, #9
 8001af4:	4621      	mov	r1, r4
 8001af6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001afa:	4621      	mov	r1, r4
 8001afc:	024a      	lsls	r2, r1, #9
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b06:	2200      	movs	r2, #0
 8001b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001b14:	f7fe fbcc 	bl	80002b0 <__aeabi_uldivmod>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001b22:	e067      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b24:	4b75      	ldr	r3, [pc, #468]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x354>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001b30:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001b34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001b3e:	2300      	movs	r3, #0
 8001b40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b42:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001b46:	4622      	mov	r2, r4
 8001b48:	462b      	mov	r3, r5
 8001b4a:	f04f 0000 	mov.w	r0, #0
 8001b4e:	f04f 0100 	mov.w	r1, #0
 8001b52:	0159      	lsls	r1, r3, #5
 8001b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b58:	0150      	lsls	r0, r2, #5
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4621      	mov	r1, r4
 8001b60:	1a51      	subs	r1, r2, r1
 8001b62:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001b64:	4629      	mov	r1, r5
 8001b66:	eb63 0301 	sbc.w	r3, r3, r1
 8001b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001b78:	4649      	mov	r1, r9
 8001b7a:	018b      	lsls	r3, r1, #6
 8001b7c:	4641      	mov	r1, r8
 8001b7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b82:	4641      	mov	r1, r8
 8001b84:	018a      	lsls	r2, r1, #6
 8001b86:	4641      	mov	r1, r8
 8001b88:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b8c:	4649      	mov	r1, r9
 8001b8e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ba2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ba6:	4692      	mov	sl, r2
 8001ba8:	469b      	mov	fp, r3
 8001baa:	4623      	mov	r3, r4
 8001bac:	eb1a 0303 	adds.w	r3, sl, r3
 8001bb0:	623b      	str	r3, [r7, #32]
 8001bb2:	462b      	mov	r3, r5
 8001bb4:	eb4b 0303 	adc.w	r3, fp, r3
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	028b      	lsls	r3, r1, #10
 8001bca:	4621      	mov	r1, r4
 8001bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	028a      	lsls	r2, r1, #10
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bdc:	2200      	movs	r2, #0
 8001bde:	673b      	str	r3, [r7, #112]	@ 0x70
 8001be0:	677a      	str	r2, [r7, #116]	@ 0x74
 8001be2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001be6:	f7fe fb63 	bl	80002b0 <__aeabi_uldivmod>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4613      	mov	r3, r2
 8001bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001bf4:	4b41      	ldr	r3, [pc, #260]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x354>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	0c1b      	lsrs	r3, r3, #16
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001c06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001c0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c16:	e0eb      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c18:	4b38      	ldr	r3, [pc, #224]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x354>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c24:	4b35      	ldr	r3, [pc, #212]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x354>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d06b      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c30:	4b32      	ldr	r3, [pc, #200]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x354>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	099b      	lsrs	r3, r3, #6
 8001c36:	2200      	movs	r2, #0
 8001c38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001c3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001c3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c42:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c44:	2300      	movs	r3, #0
 8001c46:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c48:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001c4c:	4622      	mov	r2, r4
 8001c4e:	462b      	mov	r3, r5
 8001c50:	f04f 0000 	mov.w	r0, #0
 8001c54:	f04f 0100 	mov.w	r1, #0
 8001c58:	0159      	lsls	r1, r3, #5
 8001c5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c5e:	0150      	lsls	r0, r2, #5
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4621      	mov	r1, r4
 8001c66:	1a51      	subs	r1, r2, r1
 8001c68:	61b9      	str	r1, [r7, #24]
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	eb63 0301 	sbc.w	r3, r3, r1
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c7e:	4659      	mov	r1, fp
 8001c80:	018b      	lsls	r3, r1, #6
 8001c82:	4651      	mov	r1, sl
 8001c84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c88:	4651      	mov	r1, sl
 8001c8a:	018a      	lsls	r2, r1, #6
 8001c8c:	4651      	mov	r1, sl
 8001c8e:	ebb2 0801 	subs.w	r8, r2, r1
 8001c92:	4659      	mov	r1, fp
 8001c94:	eb63 0901 	sbc.w	r9, r3, r1
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ca4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ca8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cac:	4690      	mov	r8, r2
 8001cae:	4699      	mov	r9, r3
 8001cb0:	4623      	mov	r3, r4
 8001cb2:	eb18 0303 	adds.w	r3, r8, r3
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	462b      	mov	r3, r5
 8001cba:	eb49 0303 	adc.w	r3, r9, r3
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ccc:	4629      	mov	r1, r5
 8001cce:	024b      	lsls	r3, r1, #9
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	024a      	lsls	r2, r1, #9
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ce6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001ce8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001cec:	f7fe fae0 	bl	80002b0 <__aeabi_uldivmod>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001cfa:	e065      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x420>
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	00f42400 	.word	0x00f42400
 8001d04:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d08:	4b3d      	ldr	r3, [pc, #244]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	099b      	lsrs	r3, r3, #6
 8001d0e:	2200      	movs	r2, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	4611      	mov	r1, r2
 8001d14:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d18:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d1e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001d22:	4642      	mov	r2, r8
 8001d24:	464b      	mov	r3, r9
 8001d26:	f04f 0000 	mov.w	r0, #0
 8001d2a:	f04f 0100 	mov.w	r1, #0
 8001d2e:	0159      	lsls	r1, r3, #5
 8001d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d34:	0150      	lsls	r0, r2, #5
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4641      	mov	r1, r8
 8001d3c:	1a51      	subs	r1, r2, r1
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	4649      	mov	r1, r9
 8001d42:	eb63 0301 	sbc.w	r3, r3, r1
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d54:	4659      	mov	r1, fp
 8001d56:	018b      	lsls	r3, r1, #6
 8001d58:	4651      	mov	r1, sl
 8001d5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d5e:	4651      	mov	r1, sl
 8001d60:	018a      	lsls	r2, r1, #6
 8001d62:	4651      	mov	r1, sl
 8001d64:	1a54      	subs	r4, r2, r1
 8001d66:	4659      	mov	r1, fp
 8001d68:	eb63 0501 	sbc.w	r5, r3, r1
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	00eb      	lsls	r3, r5, #3
 8001d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d7a:	00e2      	lsls	r2, r4, #3
 8001d7c:	4614      	mov	r4, r2
 8001d7e:	461d      	mov	r5, r3
 8001d80:	4643      	mov	r3, r8
 8001d82:	18e3      	adds	r3, r4, r3
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	464b      	mov	r3, r9
 8001d88:	eb45 0303 	adc.w	r3, r5, r3
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	028b      	lsls	r3, r1, #10
 8001d9e:	4621      	mov	r1, r4
 8001da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da4:	4621      	mov	r1, r4
 8001da6:	028a      	lsls	r2, r1, #10
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001db0:	2200      	movs	r2, #0
 8001db2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001db4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001db6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001dba:	f7fe fa79 	bl	80002b0 <__aeabi_uldivmod>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x458>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	0f1b      	lsrs	r3, r3, #28
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001dd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001dda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001de6:	e003      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001dea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001dee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001df0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	37b8      	adds	r7, #184	@ 0xb8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	00f42400 	.word	0x00f42400

08001e08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e28d      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8083 	beq.w	8001f2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e28:	4b94      	ldr	r3, [pc, #592]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d019      	beq.n	8001e68 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e34:	4b91      	ldr	r3, [pc, #580]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e40:	4b8e      	ldr	r3, [pc, #568]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e4c:	d00c      	beq.n	8001e68 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4e:	4b8b      	ldr	r3, [pc, #556]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e56:	2b0c      	cmp	r3, #12
 8001e58:	d112      	bne.n	8001e80 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e5a:	4b88      	ldr	r3, [pc, #544]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e66:	d10b      	bne.n	8001e80 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	4b84      	ldr	r3, [pc, #528]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d05b      	beq.n	8001f2c <HAL_RCC_OscConfig+0x124>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d157      	bne.n	8001f2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e25a      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e88:	d106      	bne.n	8001e98 <HAL_RCC_OscConfig+0x90>
 8001e8a:	4b7c      	ldr	r3, [pc, #496]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a7b      	ldr	r2, [pc, #492]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e01d      	b.n	8001ed4 <HAL_RCC_OscConfig+0xcc>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0xb4>
 8001ea2:	4b76      	ldr	r3, [pc, #472]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a75      	ldr	r2, [pc, #468]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b73      	ldr	r3, [pc, #460]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a72      	ldr	r2, [pc, #456]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0xcc>
 8001ebc:	4b6f      	ldr	r3, [pc, #444]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a6e      	ldr	r2, [pc, #440]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b6c      	ldr	r3, [pc, #432]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a6b      	ldr	r2, [pc, #428]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001ece:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d013      	beq.n	8001f04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff f986 	bl	80011ec <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff f982 	bl	80011ec <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	@ 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e21f      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b61      	ldr	r3, [pc, #388]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xdc>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff f972 	bl	80011ec <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff f96e 	bl	80011ec <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	@ 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e20b      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1e:	4b57      	ldr	r3, [pc, #348]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x104>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d06f      	beq.n	800201a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f3a:	4b50      	ldr	r3, [pc, #320]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d017      	beq.n	8001f76 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f46:	4b4d      	ldr	r3, [pc, #308]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d105      	bne.n	8001f5e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f52:	4b4a      	ldr	r3, [pc, #296]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f5e:	4b47      	ldr	r3, [pc, #284]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d11c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6a:	4b44      	ldr	r3, [pc, #272]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d116      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	4b41      	ldr	r3, [pc, #260]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_RCC_OscConfig+0x186>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e1d3      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4937      	ldr	r1, [pc, #220]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa2:	e03a      	b.n	800201a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d020      	beq.n	8001fee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fac:	4b34      	ldr	r3, [pc, #208]	@ (8002080 <HAL_RCC_OscConfig+0x278>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb2:	f7ff f91b 	bl	80011ec <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fba:	f7ff f917 	bl	80011ec <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e1b4      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b28      	ldr	r3, [pc, #160]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4925      	ldr	r1, [pc, #148]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]
 8001fec:	e015      	b.n	800201a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fee:	4b24      	ldr	r3, [pc, #144]	@ (8002080 <HAL_RCC_OscConfig+0x278>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f8fa 	bl	80011ec <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7ff f8f6 	bl	80011ec <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e193      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d036      	beq.n	8002094 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d016      	beq.n	800205c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202e:	4b15      	ldr	r3, [pc, #84]	@ (8002084 <HAL_RCC_OscConfig+0x27c>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7ff f8da 	bl	80011ec <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203c:	f7ff f8d6 	bl	80011ec <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e173      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_RCC_OscConfig+0x274>)
 8002050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x234>
 800205a:	e01b      	b.n	8002094 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205c:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <HAL_RCC_OscConfig+0x27c>)
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002062:	f7ff f8c3 	bl	80011ec <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002068:	e00e      	b.n	8002088 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206a:	f7ff f8bf 	bl	80011ec <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d907      	bls.n	8002088 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e15c      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
 800207c:	40023800 	.word	0x40023800
 8002080:	42470000 	.word	0x42470000
 8002084:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002088:	4b8a      	ldr	r3, [pc, #552]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800208a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ea      	bne.n	800206a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 8097 	beq.w	80021d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a6:	4b83      	ldr	r3, [pc, #524]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10f      	bne.n	80020d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	4b7f      	ldr	r3, [pc, #508]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	4a7e      	ldr	r2, [pc, #504]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c2:	4b7c      	ldr	r3, [pc, #496]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ce:	2301      	movs	r3, #1
 80020d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d2:	4b79      	ldr	r3, [pc, #484]	@ (80022b8 <HAL_RCC_OscConfig+0x4b0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d118      	bne.n	8002110 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020de:	4b76      	ldr	r3, [pc, #472]	@ (80022b8 <HAL_RCC_OscConfig+0x4b0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a75      	ldr	r2, [pc, #468]	@ (80022b8 <HAL_RCC_OscConfig+0x4b0>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ea:	f7ff f87f 	bl	80011ec <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f2:	f7ff f87b 	bl	80011ec <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e118      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	4b6c      	ldr	r3, [pc, #432]	@ (80022b8 <HAL_RCC_OscConfig+0x4b0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x31e>
 8002118:	4b66      	ldr	r3, [pc, #408]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211c:	4a65      	ldr	r2, [pc, #404]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6713      	str	r3, [r2, #112]	@ 0x70
 8002124:	e01c      	b.n	8002160 <HAL_RCC_OscConfig+0x358>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b05      	cmp	r3, #5
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x340>
 800212e:	4b61      	ldr	r3, [pc, #388]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002132:	4a60      	ldr	r2, [pc, #384]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	6713      	str	r3, [r2, #112]	@ 0x70
 800213a:	4b5e      	ldr	r3, [pc, #376]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800213e:	4a5d      	ldr	r2, [pc, #372]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6713      	str	r3, [r2, #112]	@ 0x70
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0x358>
 8002148:	4b5a      	ldr	r3, [pc, #360]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214c:	4a59      	ldr	r2, [pc, #356]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800214e:	f023 0301 	bic.w	r3, r3, #1
 8002152:	6713      	str	r3, [r2, #112]	@ 0x70
 8002154:	4b57      	ldr	r3, [pc, #348]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002158:	4a56      	ldr	r2, [pc, #344]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800215a:	f023 0304 	bic.w	r3, r3, #4
 800215e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d015      	beq.n	8002194 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002168:	f7ff f840 	bl	80011ec <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216e:	e00a      	b.n	8002186 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002170:	f7ff f83c 	bl	80011ec <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0d7      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002186:	4b4b      	ldr	r3, [pc, #300]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0ee      	beq.n	8002170 <HAL_RCC_OscConfig+0x368>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7ff f82a 	bl	80011ec <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7ff f826 	bl	80011ec <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e0c1      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b2:	4b40      	ldr	r3, [pc, #256]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1ee      	bne.n	800219c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021be:	7dfb      	ldrb	r3, [r7, #23]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d105      	bne.n	80021d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c4:	4b3b      	ldr	r3, [pc, #236]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	4a3a      	ldr	r2, [pc, #232]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 80021ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80ad 	beq.w	8002334 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021da:	4b36      	ldr	r3, [pc, #216]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d060      	beq.n	80022a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d145      	bne.n	800227a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b33      	ldr	r3, [pc, #204]	@ (80022bc <HAL_RCC_OscConfig+0x4b4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7fe fffa 	bl	80011ec <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fc:	f7fe fff6 	bl	80011ec <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e093      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	4b29      	ldr	r3, [pc, #164]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002228:	019b      	lsls	r3, r3, #6
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002230:	085b      	lsrs	r3, r3, #1
 8002232:	3b01      	subs	r3, #1
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	061b      	lsls	r3, r3, #24
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002244:	071b      	lsls	r3, r3, #28
 8002246:	491b      	ldr	r1, [pc, #108]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800224c:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <HAL_RCC_OscConfig+0x4b4>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7fe ffcb 	bl	80011ec <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225a:	f7fe ffc7 	bl	80011ec <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e064      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226c:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x452>
 8002278:	e05c      	b.n	8002334 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227a:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <HAL_RCC_OscConfig+0x4b4>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7fe ffb4 	bl	80011ec <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002288:	f7fe ffb0 	bl	80011ec <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e04d      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229a:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_RCC_OscConfig+0x4ac>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x480>
 80022a6:	e045      	b.n	8002334 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e040      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40007000 	.word	0x40007000
 80022bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <HAL_RCC_OscConfig+0x538>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d030      	beq.n	8002330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d129      	bne.n	8002330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d122      	bne.n	8002330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022f0:	4013      	ands	r3, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d119      	bne.n	8002330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	3b01      	subs	r3, #1
 800230a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d10f      	bne.n	8002330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d107      	bne.n	8002330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800

08002344 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e07b      	b.n	800244e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235a:	2b00      	cmp	r3, #0
 800235c:	d108      	bne.n	8002370 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002366:	d009      	beq.n	800237c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
 800236e:	e005      	b.n	800237c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe fc8e 	bl	8000cb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002400:	ea42 0103 	orr.w	r1, r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	f003 0104 	and.w	r1, r3, #4
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002422:	f003 0210 	and.w	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69da      	ldr	r2, [r3, #28]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800243c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b088      	sub	sp, #32
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	4613      	mov	r3, r2
 8002464:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002466:	f7fe fec1 	bl	80011ec <HAL_GetTick>
 800246a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d001      	beq.n	8002480 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800247c:	2302      	movs	r3, #2
 800247e:	e12a      	b.n	80026d6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_SPI_Transmit+0x36>
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e122      	b.n	80026d6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_SPI_Transmit+0x48>
 800249a:	2302      	movs	r3, #2
 800249c:	e11b      	b.n	80026d6 <HAL_SPI_Transmit+0x280>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2203      	movs	r2, #3
 80024aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	88fa      	ldrh	r2, [r7, #6]
 80024be:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	88fa      	ldrh	r2, [r7, #6]
 80024c4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024ec:	d10f      	bne.n	800250e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800250c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002518:	2b40      	cmp	r3, #64	@ 0x40
 800251a:	d007      	beq.n	800252c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800252a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002534:	d152      	bne.n	80025dc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_SPI_Transmit+0xee>
 800253e:	8b7b      	ldrh	r3, [r7, #26]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d145      	bne.n	80025d0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002548:	881a      	ldrh	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002554:	1c9a      	adds	r2, r3, #2
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002568:	e032      	b.n	80025d0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b02      	cmp	r3, #2
 8002576:	d112      	bne.n	800259e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	881a      	ldrh	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002588:	1c9a      	adds	r2, r3, #2
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800259c:	e018      	b.n	80025d0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800259e:	f7fe fe25 	bl	80011ec <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d803      	bhi.n	80025b6 <HAL_SPI_Transmit+0x160>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d102      	bne.n	80025bc <HAL_SPI_Transmit+0x166>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e082      	b.n	80026d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1c7      	bne.n	800256a <HAL_SPI_Transmit+0x114>
 80025da:	e053      	b.n	8002684 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <HAL_SPI_Transmit+0x194>
 80025e4:	8b7b      	ldrh	r3, [r7, #26]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d147      	bne.n	800267a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	330c      	adds	r3, #12
 80025f4:	7812      	ldrb	r2, [r2, #0]
 80025f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002610:	e033      	b.n	800267a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b02      	cmp	r3, #2
 800261e:	d113      	bne.n	8002648 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	330c      	adds	r3, #12
 800262a:	7812      	ldrb	r2, [r2, #0]
 800262c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800263c:	b29b      	uxth	r3, r3
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002646:	e018      	b.n	800267a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002648:	f7fe fdd0 	bl	80011ec <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d803      	bhi.n	8002660 <HAL_SPI_Transmit+0x20a>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265e:	d102      	bne.n	8002666 <HAL_SPI_Transmit+0x210>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e02d      	b.n	80026d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1c6      	bne.n	8002612 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	6839      	ldr	r1, [r7, #0]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f8b1 	bl	80027f0 <SPI_EndRxTxTransaction>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10a      	bne.n	80026b8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80026d4:	2300      	movs	r3, #0
  }
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026f0:	f7fe fd7c 	bl	80011ec <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002700:	f7fe fd74 	bl	80011ec <HAL_GetTick>
 8002704:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002706:	4b39      	ldr	r3, [pc, #228]	@ (80027ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	015b      	lsls	r3, r3, #5
 800270c:	0d1b      	lsrs	r3, r3, #20
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	fb02 f303 	mul.w	r3, r2, r3
 8002714:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002716:	e055      	b.n	80027c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271e:	d051      	beq.n	80027c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002720:	f7fe fd64 	bl	80011ec <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	429a      	cmp	r2, r3
 800272e:	d902      	bls.n	8002736 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d13d      	bne.n	80027b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002744:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800274e:	d111      	bne.n	8002774 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002758:	d004      	beq.n	8002764 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002762:	d107      	bne.n	8002774 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002772:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800277c:	d10f      	bne.n	800279e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800279c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e018      	b.n	80027e4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d102      	bne.n	80027be <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61fb      	str	r3, [r7, #28]
 80027bc:	e002      	b.n	80027c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	4013      	ands	r3, r2
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d19a      	bne.n	8002718 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3720      	adds	r7, #32
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000000 	.word	0x20000000

080027f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2201      	movs	r2, #1
 8002804:	2102      	movs	r1, #2
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f7ff ff6a 	bl	80026e0 <SPI_WaitFlagStateUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002816:	f043 0220 	orr.w	r2, r3, #32
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e032      	b.n	8002888 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002822:	4b1b      	ldr	r3, [pc, #108]	@ (8002890 <SPI_EndRxTxTransaction+0xa0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a1b      	ldr	r2, [pc, #108]	@ (8002894 <SPI_EndRxTxTransaction+0xa4>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	0d5b      	lsrs	r3, r3, #21
 800282e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002840:	d112      	bne.n	8002868 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2200      	movs	r2, #0
 800284a:	2180      	movs	r1, #128	@ 0x80
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f7ff ff47 	bl	80026e0 <SPI_WaitFlagStateUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d016      	beq.n	8002886 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285c:	f043 0220 	orr.w	r2, r3, #32
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e00f      	b.n	8002888 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3b01      	subs	r3, #1
 8002872:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287e:	2b80      	cmp	r3, #128	@ 0x80
 8002880:	d0f2      	beq.n	8002868 <SPI_EndRxTxTransaction+0x78>
 8002882:	e000      	b.n	8002886 <SPI_EndRxTxTransaction+0x96>
        break;
 8002884:	bf00      	nop
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000000 	.word	0x20000000
 8002894:	165e9f81 	.word	0x165e9f81

08002898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e042      	b.n	8002930 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe fbbc 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2224      	movs	r2, #36	@ 0x24
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f82b 	bl	8002938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800293c:	b0c0      	sub	sp, #256	@ 0x100
 800293e:	af00      	add	r7, sp, #0
 8002940:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002954:	68d9      	ldr	r1, [r3, #12]
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	ea40 0301 	orr.w	r3, r0, r1
 8002960:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	431a      	orrs	r2, r3
 8002970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	431a      	orrs	r2, r3
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002990:	f021 010c 	bic.w	r1, r1, #12
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800299e:	430b      	orrs	r3, r1
 80029a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80029ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b2:	6999      	ldr	r1, [r3, #24]
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	ea40 0301 	orr.w	r3, r0, r1
 80029be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4b8f      	ldr	r3, [pc, #572]	@ (8002c04 <UART_SetConfig+0x2cc>)
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d005      	beq.n	80029d8 <UART_SetConfig+0xa0>
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002c08 <UART_SetConfig+0x2d0>)
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d104      	bne.n	80029e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029d8:	f7fe ffd2 	bl	8001980 <HAL_RCC_GetPCLK2Freq>
 80029dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80029e0:	e003      	b.n	80029ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029e2:	f7fe ffb9 	bl	8001958 <HAL_RCC_GetPCLK1Freq>
 80029e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029f4:	f040 810c 	bne.w	8002c10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029fc:	2200      	movs	r2, #0
 80029fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a0a:	4622      	mov	r2, r4
 8002a0c:	462b      	mov	r3, r5
 8002a0e:	1891      	adds	r1, r2, r2
 8002a10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a12:	415b      	adcs	r3, r3
 8002a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	eb12 0801 	adds.w	r8, r2, r1
 8002a20:	4629      	mov	r1, r5
 8002a22:	eb43 0901 	adc.w	r9, r3, r1
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a3a:	4690      	mov	r8, r2
 8002a3c:	4699      	mov	r9, r3
 8002a3e:	4623      	mov	r3, r4
 8002a40:	eb18 0303 	adds.w	r3, r8, r3
 8002a44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a48:	462b      	mov	r3, r5
 8002a4a:	eb49 0303 	adc.w	r3, r9, r3
 8002a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a66:	460b      	mov	r3, r1
 8002a68:	18db      	adds	r3, r3, r3
 8002a6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	eb42 0303 	adc.w	r3, r2, r3
 8002a72:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a7c:	f7fd fc18 	bl	80002b0 <__aeabi_uldivmod>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4b61      	ldr	r3, [pc, #388]	@ (8002c0c <UART_SetConfig+0x2d4>)
 8002a86:	fba3 2302 	umull	r2, r3, r3, r2
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	011c      	lsls	r4, r3, #4
 8002a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a92:	2200      	movs	r2, #0
 8002a94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	464b      	mov	r3, r9
 8002aa4:	1891      	adds	r1, r2, r2
 8002aa6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002aa8:	415b      	adcs	r3, r3
 8002aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002aac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ab0:	4641      	mov	r1, r8
 8002ab2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ab6:	4649      	mov	r1, r9
 8002ab8:	eb43 0b01 	adc.w	fp, r3, r1
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ac8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002acc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ad0:	4692      	mov	sl, r2
 8002ad2:	469b      	mov	fp, r3
 8002ad4:	4643      	mov	r3, r8
 8002ad6:	eb1a 0303 	adds.w	r3, sl, r3
 8002ada:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ade:	464b      	mov	r3, r9
 8002ae0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ae4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002af4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002af8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002afc:	460b      	mov	r3, r1
 8002afe:	18db      	adds	r3, r3, r3
 8002b00:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b02:	4613      	mov	r3, r2
 8002b04:	eb42 0303 	adc.w	r3, r2, r3
 8002b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b12:	f7fd fbcd 	bl	80002b0 <__aeabi_uldivmod>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c0c <UART_SetConfig+0x2d4>)
 8002b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	2264      	movs	r2, #100	@ 0x64
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	1acb      	subs	r3, r1, r3
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b32:	4b36      	ldr	r3, [pc, #216]	@ (8002c0c <UART_SetConfig+0x2d4>)
 8002b34:	fba3 2302 	umull	r2, r3, r3, r2
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b40:	441c      	add	r4, r3
 8002b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b46:	2200      	movs	r2, #0
 8002b48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b54:	4642      	mov	r2, r8
 8002b56:	464b      	mov	r3, r9
 8002b58:	1891      	adds	r1, r2, r2
 8002b5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b5c:	415b      	adcs	r3, r3
 8002b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b64:	4641      	mov	r1, r8
 8002b66:	1851      	adds	r1, r2, r1
 8002b68:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b6a:	4649      	mov	r1, r9
 8002b6c:	414b      	adcs	r3, r1
 8002b6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b7c:	4659      	mov	r1, fp
 8002b7e:	00cb      	lsls	r3, r1, #3
 8002b80:	4651      	mov	r1, sl
 8002b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b86:	4651      	mov	r1, sl
 8002b88:	00ca      	lsls	r2, r1, #3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4642      	mov	r2, r8
 8002b92:	189b      	adds	r3, r3, r2
 8002b94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b98:	464b      	mov	r3, r9
 8002b9a:	460a      	mov	r2, r1
 8002b9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002bb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002bb8:	460b      	mov	r3, r1
 8002bba:	18db      	adds	r3, r3, r3
 8002bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	eb42 0303 	adc.w	r3, r2, r3
 8002bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002bce:	f7fd fb6f 	bl	80002b0 <__aeabi_uldivmod>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c0c <UART_SetConfig+0x2d4>)
 8002bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	2164      	movs	r1, #100	@ 0x64
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	3332      	adds	r3, #50	@ 0x32
 8002bea:	4a08      	ldr	r2, [pc, #32]	@ (8002c0c <UART_SetConfig+0x2d4>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	f003 0207 	and.w	r2, r3, #7
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4422      	add	r2, r4
 8002bfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c00:	e106      	b.n	8002e10 <UART_SetConfig+0x4d8>
 8002c02:	bf00      	nop
 8002c04:	40011000 	.word	0x40011000
 8002c08:	40011400 	.word	0x40011400
 8002c0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c14:	2200      	movs	r2, #0
 8002c16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c1a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c22:	4642      	mov	r2, r8
 8002c24:	464b      	mov	r3, r9
 8002c26:	1891      	adds	r1, r2, r2
 8002c28:	6239      	str	r1, [r7, #32]
 8002c2a:	415b      	adcs	r3, r3
 8002c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c32:	4641      	mov	r1, r8
 8002c34:	1854      	adds	r4, r2, r1
 8002c36:	4649      	mov	r1, r9
 8002c38:	eb43 0501 	adc.w	r5, r3, r1
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	00eb      	lsls	r3, r5, #3
 8002c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c4a:	00e2      	lsls	r2, r4, #3
 8002c4c:	4614      	mov	r4, r2
 8002c4e:	461d      	mov	r5, r3
 8002c50:	4643      	mov	r3, r8
 8002c52:	18e3      	adds	r3, r4, r3
 8002c54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c58:	464b      	mov	r3, r9
 8002c5a:	eb45 0303 	adc.w	r3, r5, r3
 8002c5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c7e:	4629      	mov	r1, r5
 8002c80:	008b      	lsls	r3, r1, #2
 8002c82:	4621      	mov	r1, r4
 8002c84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c88:	4621      	mov	r1, r4
 8002c8a:	008a      	lsls	r2, r1, #2
 8002c8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c90:	f7fd fb0e 	bl	80002b0 <__aeabi_uldivmod>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4b60      	ldr	r3, [pc, #384]	@ (8002e1c <UART_SetConfig+0x4e4>)
 8002c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	011c      	lsls	r4, r3, #4
 8002ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002cb4:	4642      	mov	r2, r8
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	1891      	adds	r1, r2, r2
 8002cba:	61b9      	str	r1, [r7, #24]
 8002cbc:	415b      	adcs	r3, r3
 8002cbe:	61fb      	str	r3, [r7, #28]
 8002cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc4:	4641      	mov	r1, r8
 8002cc6:	1851      	adds	r1, r2, r1
 8002cc8:	6139      	str	r1, [r7, #16]
 8002cca:	4649      	mov	r1, r9
 8002ccc:	414b      	adcs	r3, r1
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cdc:	4659      	mov	r1, fp
 8002cde:	00cb      	lsls	r3, r1, #3
 8002ce0:	4651      	mov	r1, sl
 8002ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ce6:	4651      	mov	r1, sl
 8002ce8:	00ca      	lsls	r2, r1, #3
 8002cea:	4610      	mov	r0, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	189b      	adds	r3, r3, r2
 8002cf4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cf8:	464b      	mov	r3, r9
 8002cfa:	460a      	mov	r2, r1
 8002cfc:	eb42 0303 	adc.w	r3, r2, r3
 8002d00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	008b      	lsls	r3, r1, #2
 8002d20:	4641      	mov	r1, r8
 8002d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d26:	4641      	mov	r1, r8
 8002d28:	008a      	lsls	r2, r1, #2
 8002d2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d2e:	f7fd fabf 	bl	80002b0 <__aeabi_uldivmod>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	4b38      	ldr	r3, [pc, #224]	@ (8002e1c <UART_SetConfig+0x4e4>)
 8002d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2264      	movs	r2, #100	@ 0x64
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	1acb      	subs	r3, r1, r3
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	3332      	adds	r3, #50	@ 0x32
 8002d4c:	4a33      	ldr	r2, [pc, #204]	@ (8002e1c <UART_SetConfig+0x4e4>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d58:	441c      	add	r4, r3
 8002d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d5e:	2200      	movs	r2, #0
 8002d60:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d62:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d68:	4642      	mov	r2, r8
 8002d6a:	464b      	mov	r3, r9
 8002d6c:	1891      	adds	r1, r2, r2
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	415b      	adcs	r3, r3
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d78:	4641      	mov	r1, r8
 8002d7a:	1851      	adds	r1, r2, r1
 8002d7c:	6039      	str	r1, [r7, #0]
 8002d7e:	4649      	mov	r1, r9
 8002d80:	414b      	adcs	r3, r1
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d90:	4659      	mov	r1, fp
 8002d92:	00cb      	lsls	r3, r1, #3
 8002d94:	4651      	mov	r1, sl
 8002d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d9a:	4651      	mov	r1, sl
 8002d9c:	00ca      	lsls	r2, r1, #3
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	4642      	mov	r2, r8
 8002da6:	189b      	adds	r3, r3, r2
 8002da8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002daa:	464b      	mov	r3, r9
 8002dac:	460a      	mov	r2, r1
 8002dae:	eb42 0303 	adc.w	r3, r2, r3
 8002db2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dbe:	667a      	str	r2, [r7, #100]	@ 0x64
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002dcc:	4649      	mov	r1, r9
 8002dce:	008b      	lsls	r3, r1, #2
 8002dd0:	4641      	mov	r1, r8
 8002dd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dd6:	4641      	mov	r1, r8
 8002dd8:	008a      	lsls	r2, r1, #2
 8002dda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002dde:	f7fd fa67 	bl	80002b0 <__aeabi_uldivmod>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e1c <UART_SetConfig+0x4e4>)
 8002de8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	2164      	movs	r1, #100	@ 0x64
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	3332      	adds	r3, #50	@ 0x32
 8002dfa:	4a08      	ldr	r2, [pc, #32]	@ (8002e1c <UART_SetConfig+0x4e4>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	f003 020f 	and.w	r2, r3, #15
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4422      	add	r2, r4
 8002e0e:	609a      	str	r2, [r3, #8]
}
 8002e10:	bf00      	nop
 8002e12:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e16:	46bd      	mov	sp, r7
 8002e18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e1c:	51eb851f 	.word	0x51eb851f

08002e20 <srand>:
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <srand+0x44>)
 8002e24:	681d      	ldr	r5, [r3, #0]
 8002e26:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002e28:	4604      	mov	r4, r0
 8002e2a:	b9b3      	cbnz	r3, 8002e5a <srand+0x3a>
 8002e2c:	2018      	movs	r0, #24
 8002e2e:	f000 fa4d 	bl	80032cc <malloc>
 8002e32:	4602      	mov	r2, r0
 8002e34:	6328      	str	r0, [r5, #48]	@ 0x30
 8002e36:	b920      	cbnz	r0, 8002e42 <srand+0x22>
 8002e38:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <srand+0x48>)
 8002e3a:	480c      	ldr	r0, [pc, #48]	@ (8002e6c <srand+0x4c>)
 8002e3c:	2146      	movs	r1, #70	@ 0x46
 8002e3e:	f000 f9dd 	bl	80031fc <__assert_func>
 8002e42:	490b      	ldr	r1, [pc, #44]	@ (8002e70 <srand+0x50>)
 8002e44:	4b0b      	ldr	r3, [pc, #44]	@ (8002e74 <srand+0x54>)
 8002e46:	e9c0 1300 	strd	r1, r3, [r0]
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <srand+0x58>)
 8002e4c:	6083      	str	r3, [r0, #8]
 8002e4e:	230b      	movs	r3, #11
 8002e50:	8183      	strh	r3, [r0, #12]
 8002e52:	2100      	movs	r1, #0
 8002e54:	2001      	movs	r0, #1
 8002e56:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002e5a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611c      	str	r4, [r3, #16]
 8002e60:	615a      	str	r2, [r3, #20]
 8002e62:	bd38      	pop	{r3, r4, r5, pc}
 8002e64:	20000018 	.word	0x20000018
 8002e68:	08003e64 	.word	0x08003e64
 8002e6c:	08003e7b 	.word	0x08003e7b
 8002e70:	abcd330e 	.word	0xabcd330e
 8002e74:	e66d1234 	.word	0xe66d1234
 8002e78:	0005deec 	.word	0x0005deec

08002e7c <rand>:
 8002e7c:	4b16      	ldr	r3, [pc, #88]	@ (8002ed8 <rand+0x5c>)
 8002e7e:	b510      	push	{r4, lr}
 8002e80:	681c      	ldr	r4, [r3, #0]
 8002e82:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002e84:	b9b3      	cbnz	r3, 8002eb4 <rand+0x38>
 8002e86:	2018      	movs	r0, #24
 8002e88:	f000 fa20 	bl	80032cc <malloc>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	6320      	str	r0, [r4, #48]	@ 0x30
 8002e90:	b920      	cbnz	r0, 8002e9c <rand+0x20>
 8002e92:	4b12      	ldr	r3, [pc, #72]	@ (8002edc <rand+0x60>)
 8002e94:	4812      	ldr	r0, [pc, #72]	@ (8002ee0 <rand+0x64>)
 8002e96:	2152      	movs	r1, #82	@ 0x52
 8002e98:	f000 f9b0 	bl	80031fc <__assert_func>
 8002e9c:	4911      	ldr	r1, [pc, #68]	@ (8002ee4 <rand+0x68>)
 8002e9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ee8 <rand+0x6c>)
 8002ea0:	e9c0 1300 	strd	r1, r3, [r0]
 8002ea4:	4b11      	ldr	r3, [pc, #68]	@ (8002eec <rand+0x70>)
 8002ea6:	6083      	str	r3, [r0, #8]
 8002ea8:	230b      	movs	r3, #11
 8002eaa:	8183      	strh	r3, [r0, #12]
 8002eac:	2100      	movs	r1, #0
 8002eae:	2001      	movs	r0, #1
 8002eb0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002eb4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002eb6:	480e      	ldr	r0, [pc, #56]	@ (8002ef0 <rand+0x74>)
 8002eb8:	690b      	ldr	r3, [r1, #16]
 8002eba:	694c      	ldr	r4, [r1, #20]
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef4 <rand+0x78>)
 8002ebe:	4358      	muls	r0, r3
 8002ec0:	fb02 0004 	mla	r0, r2, r4, r0
 8002ec4:	fba3 3202 	umull	r3, r2, r3, r2
 8002ec8:	3301      	adds	r3, #1
 8002eca:	eb40 0002 	adc.w	r0, r0, r2
 8002ece:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002ed2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002ed6:	bd10      	pop	{r4, pc}
 8002ed8:	20000018 	.word	0x20000018
 8002edc:	08003e64 	.word	0x08003e64
 8002ee0:	08003e7b 	.word	0x08003e7b
 8002ee4:	abcd330e 	.word	0xabcd330e
 8002ee8:	e66d1234 	.word	0xe66d1234
 8002eec:	0005deec 	.word	0x0005deec
 8002ef0:	5851f42d 	.word	0x5851f42d
 8002ef4:	4c957f2d 	.word	0x4c957f2d

08002ef8 <std>:
 8002ef8:	2300      	movs	r3, #0
 8002efa:	b510      	push	{r4, lr}
 8002efc:	4604      	mov	r4, r0
 8002efe:	e9c0 3300 	strd	r3, r3, [r0]
 8002f02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f06:	6083      	str	r3, [r0, #8]
 8002f08:	8181      	strh	r1, [r0, #12]
 8002f0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f0c:	81c2      	strh	r2, [r0, #14]
 8002f0e:	6183      	str	r3, [r0, #24]
 8002f10:	4619      	mov	r1, r3
 8002f12:	2208      	movs	r2, #8
 8002f14:	305c      	adds	r0, #92	@ 0x5c
 8002f16:	f000 f8f4 	bl	8003102 <memset>
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f50 <std+0x58>)
 8002f1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f54 <std+0x5c>)
 8002f20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f22:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <std+0x60>)
 8002f24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f26:	4b0d      	ldr	r3, [pc, #52]	@ (8002f5c <std+0x64>)
 8002f28:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f60 <std+0x68>)
 8002f2c:	6224      	str	r4, [r4, #32]
 8002f2e:	429c      	cmp	r4, r3
 8002f30:	d006      	beq.n	8002f40 <std+0x48>
 8002f32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f36:	4294      	cmp	r4, r2
 8002f38:	d002      	beq.n	8002f40 <std+0x48>
 8002f3a:	33d0      	adds	r3, #208	@ 0xd0
 8002f3c:	429c      	cmp	r4, r3
 8002f3e:	d105      	bne.n	8002f4c <std+0x54>
 8002f40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f48:	f000 b954 	b.w	80031f4 <__retarget_lock_init_recursive>
 8002f4c:	bd10      	pop	{r4, pc}
 8002f4e:	bf00      	nop
 8002f50:	0800307d 	.word	0x0800307d
 8002f54:	0800309f 	.word	0x0800309f
 8002f58:	080030d7 	.word	0x080030d7
 8002f5c:	080030fb 	.word	0x080030fb
 8002f60:	20000324 	.word	0x20000324

08002f64 <stdio_exit_handler>:
 8002f64:	4a02      	ldr	r2, [pc, #8]	@ (8002f70 <stdio_exit_handler+0xc>)
 8002f66:	4903      	ldr	r1, [pc, #12]	@ (8002f74 <stdio_exit_handler+0x10>)
 8002f68:	4803      	ldr	r0, [pc, #12]	@ (8002f78 <stdio_exit_handler+0x14>)
 8002f6a:	f000 b869 	b.w	8003040 <_fwalk_sglue>
 8002f6e:	bf00      	nop
 8002f70:	2000000c 	.word	0x2000000c
 8002f74:	08003541 	.word	0x08003541
 8002f78:	2000001c 	.word	0x2000001c

08002f7c <cleanup_stdio>:
 8002f7c:	6841      	ldr	r1, [r0, #4]
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <cleanup_stdio+0x34>)
 8002f80:	4299      	cmp	r1, r3
 8002f82:	b510      	push	{r4, lr}
 8002f84:	4604      	mov	r4, r0
 8002f86:	d001      	beq.n	8002f8c <cleanup_stdio+0x10>
 8002f88:	f000 fada 	bl	8003540 <_fflush_r>
 8002f8c:	68a1      	ldr	r1, [r4, #8]
 8002f8e:	4b09      	ldr	r3, [pc, #36]	@ (8002fb4 <cleanup_stdio+0x38>)
 8002f90:	4299      	cmp	r1, r3
 8002f92:	d002      	beq.n	8002f9a <cleanup_stdio+0x1e>
 8002f94:	4620      	mov	r0, r4
 8002f96:	f000 fad3 	bl	8003540 <_fflush_r>
 8002f9a:	68e1      	ldr	r1, [r4, #12]
 8002f9c:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <cleanup_stdio+0x3c>)
 8002f9e:	4299      	cmp	r1, r3
 8002fa0:	d004      	beq.n	8002fac <cleanup_stdio+0x30>
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fa8:	f000 baca 	b.w	8003540 <_fflush_r>
 8002fac:	bd10      	pop	{r4, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000324 	.word	0x20000324
 8002fb4:	2000038c 	.word	0x2000038c
 8002fb8:	200003f4 	.word	0x200003f4

08002fbc <global_stdio_init.part.0>:
 8002fbc:	b510      	push	{r4, lr}
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <global_stdio_init.part.0+0x30>)
 8002fc0:	4c0b      	ldr	r4, [pc, #44]	@ (8002ff0 <global_stdio_init.part.0+0x34>)
 8002fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ff4 <global_stdio_init.part.0+0x38>)
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2104      	movs	r1, #4
 8002fcc:	f7ff ff94 	bl	8002ef8 <std>
 8002fd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	2109      	movs	r1, #9
 8002fd8:	f7ff ff8e 	bl	8002ef8 <std>
 8002fdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fe6:	2112      	movs	r1, #18
 8002fe8:	f7ff bf86 	b.w	8002ef8 <std>
 8002fec:	2000045c 	.word	0x2000045c
 8002ff0:	20000324 	.word	0x20000324
 8002ff4:	08002f65 	.word	0x08002f65

08002ff8 <__sfp_lock_acquire>:
 8002ff8:	4801      	ldr	r0, [pc, #4]	@ (8003000 <__sfp_lock_acquire+0x8>)
 8002ffa:	f000 b8fc 	b.w	80031f6 <__retarget_lock_acquire_recursive>
 8002ffe:	bf00      	nop
 8003000:	20000465 	.word	0x20000465

08003004 <__sfp_lock_release>:
 8003004:	4801      	ldr	r0, [pc, #4]	@ (800300c <__sfp_lock_release+0x8>)
 8003006:	f000 b8f7 	b.w	80031f8 <__retarget_lock_release_recursive>
 800300a:	bf00      	nop
 800300c:	20000465 	.word	0x20000465

08003010 <__sinit>:
 8003010:	b510      	push	{r4, lr}
 8003012:	4604      	mov	r4, r0
 8003014:	f7ff fff0 	bl	8002ff8 <__sfp_lock_acquire>
 8003018:	6a23      	ldr	r3, [r4, #32]
 800301a:	b11b      	cbz	r3, 8003024 <__sinit+0x14>
 800301c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003020:	f7ff bff0 	b.w	8003004 <__sfp_lock_release>
 8003024:	4b04      	ldr	r3, [pc, #16]	@ (8003038 <__sinit+0x28>)
 8003026:	6223      	str	r3, [r4, #32]
 8003028:	4b04      	ldr	r3, [pc, #16]	@ (800303c <__sinit+0x2c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f5      	bne.n	800301c <__sinit+0xc>
 8003030:	f7ff ffc4 	bl	8002fbc <global_stdio_init.part.0>
 8003034:	e7f2      	b.n	800301c <__sinit+0xc>
 8003036:	bf00      	nop
 8003038:	08002f7d 	.word	0x08002f7d
 800303c:	2000045c 	.word	0x2000045c

08003040 <_fwalk_sglue>:
 8003040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003044:	4607      	mov	r7, r0
 8003046:	4688      	mov	r8, r1
 8003048:	4614      	mov	r4, r2
 800304a:	2600      	movs	r6, #0
 800304c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003050:	f1b9 0901 	subs.w	r9, r9, #1
 8003054:	d505      	bpl.n	8003062 <_fwalk_sglue+0x22>
 8003056:	6824      	ldr	r4, [r4, #0]
 8003058:	2c00      	cmp	r4, #0
 800305a:	d1f7      	bne.n	800304c <_fwalk_sglue+0xc>
 800305c:	4630      	mov	r0, r6
 800305e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003062:	89ab      	ldrh	r3, [r5, #12]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d907      	bls.n	8003078 <_fwalk_sglue+0x38>
 8003068:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800306c:	3301      	adds	r3, #1
 800306e:	d003      	beq.n	8003078 <_fwalk_sglue+0x38>
 8003070:	4629      	mov	r1, r5
 8003072:	4638      	mov	r0, r7
 8003074:	47c0      	blx	r8
 8003076:	4306      	orrs	r6, r0
 8003078:	3568      	adds	r5, #104	@ 0x68
 800307a:	e7e9      	b.n	8003050 <_fwalk_sglue+0x10>

0800307c <__sread>:
 800307c:	b510      	push	{r4, lr}
 800307e:	460c      	mov	r4, r1
 8003080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003084:	f000 f868 	bl	8003158 <_read_r>
 8003088:	2800      	cmp	r0, #0
 800308a:	bfab      	itete	ge
 800308c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800308e:	89a3      	ldrhlt	r3, [r4, #12]
 8003090:	181b      	addge	r3, r3, r0
 8003092:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003096:	bfac      	ite	ge
 8003098:	6563      	strge	r3, [r4, #84]	@ 0x54
 800309a:	81a3      	strhlt	r3, [r4, #12]
 800309c:	bd10      	pop	{r4, pc}

0800309e <__swrite>:
 800309e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030a2:	461f      	mov	r7, r3
 80030a4:	898b      	ldrh	r3, [r1, #12]
 80030a6:	05db      	lsls	r3, r3, #23
 80030a8:	4605      	mov	r5, r0
 80030aa:	460c      	mov	r4, r1
 80030ac:	4616      	mov	r6, r2
 80030ae:	d505      	bpl.n	80030bc <__swrite+0x1e>
 80030b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030b4:	2302      	movs	r3, #2
 80030b6:	2200      	movs	r2, #0
 80030b8:	f000 f83c 	bl	8003134 <_lseek_r>
 80030bc:	89a3      	ldrh	r3, [r4, #12]
 80030be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030c6:	81a3      	strh	r3, [r4, #12]
 80030c8:	4632      	mov	r2, r6
 80030ca:	463b      	mov	r3, r7
 80030cc:	4628      	mov	r0, r5
 80030ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030d2:	f000 b853 	b.w	800317c <_write_r>

080030d6 <__sseek>:
 80030d6:	b510      	push	{r4, lr}
 80030d8:	460c      	mov	r4, r1
 80030da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030de:	f000 f829 	bl	8003134 <_lseek_r>
 80030e2:	1c43      	adds	r3, r0, #1
 80030e4:	89a3      	ldrh	r3, [r4, #12]
 80030e6:	bf15      	itete	ne
 80030e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80030ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80030ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80030f2:	81a3      	strheq	r3, [r4, #12]
 80030f4:	bf18      	it	ne
 80030f6:	81a3      	strhne	r3, [r4, #12]
 80030f8:	bd10      	pop	{r4, pc}

080030fa <__sclose>:
 80030fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030fe:	f000 b809 	b.w	8003114 <_close_r>

08003102 <memset>:
 8003102:	4402      	add	r2, r0
 8003104:	4603      	mov	r3, r0
 8003106:	4293      	cmp	r3, r2
 8003108:	d100      	bne.n	800310c <memset+0xa>
 800310a:	4770      	bx	lr
 800310c:	f803 1b01 	strb.w	r1, [r3], #1
 8003110:	e7f9      	b.n	8003106 <memset+0x4>
	...

08003114 <_close_r>:
 8003114:	b538      	push	{r3, r4, r5, lr}
 8003116:	4d06      	ldr	r5, [pc, #24]	@ (8003130 <_close_r+0x1c>)
 8003118:	2300      	movs	r3, #0
 800311a:	4604      	mov	r4, r0
 800311c:	4608      	mov	r0, r1
 800311e:	602b      	str	r3, [r5, #0]
 8003120:	f7fd fee5 	bl	8000eee <_close>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d102      	bne.n	800312e <_close_r+0x1a>
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	b103      	cbz	r3, 800312e <_close_r+0x1a>
 800312c:	6023      	str	r3, [r4, #0]
 800312e:	bd38      	pop	{r3, r4, r5, pc}
 8003130:	20000460 	.word	0x20000460

08003134 <_lseek_r>:
 8003134:	b538      	push	{r3, r4, r5, lr}
 8003136:	4d07      	ldr	r5, [pc, #28]	@ (8003154 <_lseek_r+0x20>)
 8003138:	4604      	mov	r4, r0
 800313a:	4608      	mov	r0, r1
 800313c:	4611      	mov	r1, r2
 800313e:	2200      	movs	r2, #0
 8003140:	602a      	str	r2, [r5, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	f7fd fefa 	bl	8000f3c <_lseek>
 8003148:	1c43      	adds	r3, r0, #1
 800314a:	d102      	bne.n	8003152 <_lseek_r+0x1e>
 800314c:	682b      	ldr	r3, [r5, #0]
 800314e:	b103      	cbz	r3, 8003152 <_lseek_r+0x1e>
 8003150:	6023      	str	r3, [r4, #0]
 8003152:	bd38      	pop	{r3, r4, r5, pc}
 8003154:	20000460 	.word	0x20000460

08003158 <_read_r>:
 8003158:	b538      	push	{r3, r4, r5, lr}
 800315a:	4d07      	ldr	r5, [pc, #28]	@ (8003178 <_read_r+0x20>)
 800315c:	4604      	mov	r4, r0
 800315e:	4608      	mov	r0, r1
 8003160:	4611      	mov	r1, r2
 8003162:	2200      	movs	r2, #0
 8003164:	602a      	str	r2, [r5, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	f7fd fe88 	bl	8000e7c <_read>
 800316c:	1c43      	adds	r3, r0, #1
 800316e:	d102      	bne.n	8003176 <_read_r+0x1e>
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	b103      	cbz	r3, 8003176 <_read_r+0x1e>
 8003174:	6023      	str	r3, [r4, #0]
 8003176:	bd38      	pop	{r3, r4, r5, pc}
 8003178:	20000460 	.word	0x20000460

0800317c <_write_r>:
 800317c:	b538      	push	{r3, r4, r5, lr}
 800317e:	4d07      	ldr	r5, [pc, #28]	@ (800319c <_write_r+0x20>)
 8003180:	4604      	mov	r4, r0
 8003182:	4608      	mov	r0, r1
 8003184:	4611      	mov	r1, r2
 8003186:	2200      	movs	r2, #0
 8003188:	602a      	str	r2, [r5, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	f7fd fe93 	bl	8000eb6 <_write>
 8003190:	1c43      	adds	r3, r0, #1
 8003192:	d102      	bne.n	800319a <_write_r+0x1e>
 8003194:	682b      	ldr	r3, [r5, #0]
 8003196:	b103      	cbz	r3, 800319a <_write_r+0x1e>
 8003198:	6023      	str	r3, [r4, #0]
 800319a:	bd38      	pop	{r3, r4, r5, pc}
 800319c:	20000460 	.word	0x20000460

080031a0 <__errno>:
 80031a0:	4b01      	ldr	r3, [pc, #4]	@ (80031a8 <__errno+0x8>)
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000018 	.word	0x20000018

080031ac <__libc_init_array>:
 80031ac:	b570      	push	{r4, r5, r6, lr}
 80031ae:	4d0d      	ldr	r5, [pc, #52]	@ (80031e4 <__libc_init_array+0x38>)
 80031b0:	4c0d      	ldr	r4, [pc, #52]	@ (80031e8 <__libc_init_array+0x3c>)
 80031b2:	1b64      	subs	r4, r4, r5
 80031b4:	10a4      	asrs	r4, r4, #2
 80031b6:	2600      	movs	r6, #0
 80031b8:	42a6      	cmp	r6, r4
 80031ba:	d109      	bne.n	80031d0 <__libc_init_array+0x24>
 80031bc:	4d0b      	ldr	r5, [pc, #44]	@ (80031ec <__libc_init_array+0x40>)
 80031be:	4c0c      	ldr	r4, [pc, #48]	@ (80031f0 <__libc_init_array+0x44>)
 80031c0:	f000 fe38 	bl	8003e34 <_init>
 80031c4:	1b64      	subs	r4, r4, r5
 80031c6:	10a4      	asrs	r4, r4, #2
 80031c8:	2600      	movs	r6, #0
 80031ca:	42a6      	cmp	r6, r4
 80031cc:	d105      	bne.n	80031da <__libc_init_array+0x2e>
 80031ce:	bd70      	pop	{r4, r5, r6, pc}
 80031d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d4:	4798      	blx	r3
 80031d6:	3601      	adds	r6, #1
 80031d8:	e7ee      	b.n	80031b8 <__libc_init_array+0xc>
 80031da:	f855 3b04 	ldr.w	r3, [r5], #4
 80031de:	4798      	blx	r3
 80031e0:	3601      	adds	r6, #1
 80031e2:	e7f2      	b.n	80031ca <__libc_init_array+0x1e>
 80031e4:	08003f4c 	.word	0x08003f4c
 80031e8:	08003f4c 	.word	0x08003f4c
 80031ec:	08003f4c 	.word	0x08003f4c
 80031f0:	08003f50 	.word	0x08003f50

080031f4 <__retarget_lock_init_recursive>:
 80031f4:	4770      	bx	lr

080031f6 <__retarget_lock_acquire_recursive>:
 80031f6:	4770      	bx	lr

080031f8 <__retarget_lock_release_recursive>:
 80031f8:	4770      	bx	lr
	...

080031fc <__assert_func>:
 80031fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80031fe:	4614      	mov	r4, r2
 8003200:	461a      	mov	r2, r3
 8003202:	4b09      	ldr	r3, [pc, #36]	@ (8003228 <__assert_func+0x2c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4605      	mov	r5, r0
 8003208:	68d8      	ldr	r0, [r3, #12]
 800320a:	b14c      	cbz	r4, 8003220 <__assert_func+0x24>
 800320c:	4b07      	ldr	r3, [pc, #28]	@ (800322c <__assert_func+0x30>)
 800320e:	9100      	str	r1, [sp, #0]
 8003210:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003214:	4906      	ldr	r1, [pc, #24]	@ (8003230 <__assert_func+0x34>)
 8003216:	462b      	mov	r3, r5
 8003218:	f000 f9ba 	bl	8003590 <fiprintf>
 800321c:	f000 f9da 	bl	80035d4 <abort>
 8003220:	4b04      	ldr	r3, [pc, #16]	@ (8003234 <__assert_func+0x38>)
 8003222:	461c      	mov	r4, r3
 8003224:	e7f3      	b.n	800320e <__assert_func+0x12>
 8003226:	bf00      	nop
 8003228:	20000018 	.word	0x20000018
 800322c:	08003ed3 	.word	0x08003ed3
 8003230:	08003ee0 	.word	0x08003ee0
 8003234:	08003f0e 	.word	0x08003f0e

08003238 <_free_r>:
 8003238:	b538      	push	{r3, r4, r5, lr}
 800323a:	4605      	mov	r5, r0
 800323c:	2900      	cmp	r1, #0
 800323e:	d041      	beq.n	80032c4 <_free_r+0x8c>
 8003240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003244:	1f0c      	subs	r4, r1, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	bfb8      	it	lt
 800324a:	18e4      	addlt	r4, r4, r3
 800324c:	f000 f8e8 	bl	8003420 <__malloc_lock>
 8003250:	4a1d      	ldr	r2, [pc, #116]	@ (80032c8 <_free_r+0x90>)
 8003252:	6813      	ldr	r3, [r2, #0]
 8003254:	b933      	cbnz	r3, 8003264 <_free_r+0x2c>
 8003256:	6063      	str	r3, [r4, #4]
 8003258:	6014      	str	r4, [r2, #0]
 800325a:	4628      	mov	r0, r5
 800325c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003260:	f000 b8e4 	b.w	800342c <__malloc_unlock>
 8003264:	42a3      	cmp	r3, r4
 8003266:	d908      	bls.n	800327a <_free_r+0x42>
 8003268:	6820      	ldr	r0, [r4, #0]
 800326a:	1821      	adds	r1, r4, r0
 800326c:	428b      	cmp	r3, r1
 800326e:	bf01      	itttt	eq
 8003270:	6819      	ldreq	r1, [r3, #0]
 8003272:	685b      	ldreq	r3, [r3, #4]
 8003274:	1809      	addeq	r1, r1, r0
 8003276:	6021      	streq	r1, [r4, #0]
 8003278:	e7ed      	b.n	8003256 <_free_r+0x1e>
 800327a:	461a      	mov	r2, r3
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	b10b      	cbz	r3, 8003284 <_free_r+0x4c>
 8003280:	42a3      	cmp	r3, r4
 8003282:	d9fa      	bls.n	800327a <_free_r+0x42>
 8003284:	6811      	ldr	r1, [r2, #0]
 8003286:	1850      	adds	r0, r2, r1
 8003288:	42a0      	cmp	r0, r4
 800328a:	d10b      	bne.n	80032a4 <_free_r+0x6c>
 800328c:	6820      	ldr	r0, [r4, #0]
 800328e:	4401      	add	r1, r0
 8003290:	1850      	adds	r0, r2, r1
 8003292:	4283      	cmp	r3, r0
 8003294:	6011      	str	r1, [r2, #0]
 8003296:	d1e0      	bne.n	800325a <_free_r+0x22>
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	6053      	str	r3, [r2, #4]
 800329e:	4408      	add	r0, r1
 80032a0:	6010      	str	r0, [r2, #0]
 80032a2:	e7da      	b.n	800325a <_free_r+0x22>
 80032a4:	d902      	bls.n	80032ac <_free_r+0x74>
 80032a6:	230c      	movs	r3, #12
 80032a8:	602b      	str	r3, [r5, #0]
 80032aa:	e7d6      	b.n	800325a <_free_r+0x22>
 80032ac:	6820      	ldr	r0, [r4, #0]
 80032ae:	1821      	adds	r1, r4, r0
 80032b0:	428b      	cmp	r3, r1
 80032b2:	bf04      	itt	eq
 80032b4:	6819      	ldreq	r1, [r3, #0]
 80032b6:	685b      	ldreq	r3, [r3, #4]
 80032b8:	6063      	str	r3, [r4, #4]
 80032ba:	bf04      	itt	eq
 80032bc:	1809      	addeq	r1, r1, r0
 80032be:	6021      	streq	r1, [r4, #0]
 80032c0:	6054      	str	r4, [r2, #4]
 80032c2:	e7ca      	b.n	800325a <_free_r+0x22>
 80032c4:	bd38      	pop	{r3, r4, r5, pc}
 80032c6:	bf00      	nop
 80032c8:	2000046c 	.word	0x2000046c

080032cc <malloc>:
 80032cc:	4b02      	ldr	r3, [pc, #8]	@ (80032d8 <malloc+0xc>)
 80032ce:	4601      	mov	r1, r0
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	f000 b825 	b.w	8003320 <_malloc_r>
 80032d6:	bf00      	nop
 80032d8:	20000018 	.word	0x20000018

080032dc <sbrk_aligned>:
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	4e0f      	ldr	r6, [pc, #60]	@ (800331c <sbrk_aligned+0x40>)
 80032e0:	460c      	mov	r4, r1
 80032e2:	6831      	ldr	r1, [r6, #0]
 80032e4:	4605      	mov	r5, r0
 80032e6:	b911      	cbnz	r1, 80032ee <sbrk_aligned+0x12>
 80032e8:	f000 f964 	bl	80035b4 <_sbrk_r>
 80032ec:	6030      	str	r0, [r6, #0]
 80032ee:	4621      	mov	r1, r4
 80032f0:	4628      	mov	r0, r5
 80032f2:	f000 f95f 	bl	80035b4 <_sbrk_r>
 80032f6:	1c43      	adds	r3, r0, #1
 80032f8:	d103      	bne.n	8003302 <sbrk_aligned+0x26>
 80032fa:	f04f 34ff 	mov.w	r4, #4294967295
 80032fe:	4620      	mov	r0, r4
 8003300:	bd70      	pop	{r4, r5, r6, pc}
 8003302:	1cc4      	adds	r4, r0, #3
 8003304:	f024 0403 	bic.w	r4, r4, #3
 8003308:	42a0      	cmp	r0, r4
 800330a:	d0f8      	beq.n	80032fe <sbrk_aligned+0x22>
 800330c:	1a21      	subs	r1, r4, r0
 800330e:	4628      	mov	r0, r5
 8003310:	f000 f950 	bl	80035b4 <_sbrk_r>
 8003314:	3001      	adds	r0, #1
 8003316:	d1f2      	bne.n	80032fe <sbrk_aligned+0x22>
 8003318:	e7ef      	b.n	80032fa <sbrk_aligned+0x1e>
 800331a:	bf00      	nop
 800331c:	20000468 	.word	0x20000468

08003320 <_malloc_r>:
 8003320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003324:	1ccd      	adds	r5, r1, #3
 8003326:	f025 0503 	bic.w	r5, r5, #3
 800332a:	3508      	adds	r5, #8
 800332c:	2d0c      	cmp	r5, #12
 800332e:	bf38      	it	cc
 8003330:	250c      	movcc	r5, #12
 8003332:	2d00      	cmp	r5, #0
 8003334:	4606      	mov	r6, r0
 8003336:	db01      	blt.n	800333c <_malloc_r+0x1c>
 8003338:	42a9      	cmp	r1, r5
 800333a:	d904      	bls.n	8003346 <_malloc_r+0x26>
 800333c:	230c      	movs	r3, #12
 800333e:	6033      	str	r3, [r6, #0]
 8003340:	2000      	movs	r0, #0
 8003342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003346:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800341c <_malloc_r+0xfc>
 800334a:	f000 f869 	bl	8003420 <__malloc_lock>
 800334e:	f8d8 3000 	ldr.w	r3, [r8]
 8003352:	461c      	mov	r4, r3
 8003354:	bb44      	cbnz	r4, 80033a8 <_malloc_r+0x88>
 8003356:	4629      	mov	r1, r5
 8003358:	4630      	mov	r0, r6
 800335a:	f7ff ffbf 	bl	80032dc <sbrk_aligned>
 800335e:	1c43      	adds	r3, r0, #1
 8003360:	4604      	mov	r4, r0
 8003362:	d158      	bne.n	8003416 <_malloc_r+0xf6>
 8003364:	f8d8 4000 	ldr.w	r4, [r8]
 8003368:	4627      	mov	r7, r4
 800336a:	2f00      	cmp	r7, #0
 800336c:	d143      	bne.n	80033f6 <_malloc_r+0xd6>
 800336e:	2c00      	cmp	r4, #0
 8003370:	d04b      	beq.n	800340a <_malloc_r+0xea>
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	4639      	mov	r1, r7
 8003376:	4630      	mov	r0, r6
 8003378:	eb04 0903 	add.w	r9, r4, r3
 800337c:	f000 f91a 	bl	80035b4 <_sbrk_r>
 8003380:	4581      	cmp	r9, r0
 8003382:	d142      	bne.n	800340a <_malloc_r+0xea>
 8003384:	6821      	ldr	r1, [r4, #0]
 8003386:	1a6d      	subs	r5, r5, r1
 8003388:	4629      	mov	r1, r5
 800338a:	4630      	mov	r0, r6
 800338c:	f7ff ffa6 	bl	80032dc <sbrk_aligned>
 8003390:	3001      	adds	r0, #1
 8003392:	d03a      	beq.n	800340a <_malloc_r+0xea>
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	442b      	add	r3, r5
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	f8d8 3000 	ldr.w	r3, [r8]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	bb62      	cbnz	r2, 80033fc <_malloc_r+0xdc>
 80033a2:	f8c8 7000 	str.w	r7, [r8]
 80033a6:	e00f      	b.n	80033c8 <_malloc_r+0xa8>
 80033a8:	6822      	ldr	r2, [r4, #0]
 80033aa:	1b52      	subs	r2, r2, r5
 80033ac:	d420      	bmi.n	80033f0 <_malloc_r+0xd0>
 80033ae:	2a0b      	cmp	r2, #11
 80033b0:	d917      	bls.n	80033e2 <_malloc_r+0xc2>
 80033b2:	1961      	adds	r1, r4, r5
 80033b4:	42a3      	cmp	r3, r4
 80033b6:	6025      	str	r5, [r4, #0]
 80033b8:	bf18      	it	ne
 80033ba:	6059      	strne	r1, [r3, #4]
 80033bc:	6863      	ldr	r3, [r4, #4]
 80033be:	bf08      	it	eq
 80033c0:	f8c8 1000 	streq.w	r1, [r8]
 80033c4:	5162      	str	r2, [r4, r5]
 80033c6:	604b      	str	r3, [r1, #4]
 80033c8:	4630      	mov	r0, r6
 80033ca:	f000 f82f 	bl	800342c <__malloc_unlock>
 80033ce:	f104 000b 	add.w	r0, r4, #11
 80033d2:	1d23      	adds	r3, r4, #4
 80033d4:	f020 0007 	bic.w	r0, r0, #7
 80033d8:	1ac2      	subs	r2, r0, r3
 80033da:	bf1c      	itt	ne
 80033dc:	1a1b      	subne	r3, r3, r0
 80033de:	50a3      	strne	r3, [r4, r2]
 80033e0:	e7af      	b.n	8003342 <_malloc_r+0x22>
 80033e2:	6862      	ldr	r2, [r4, #4]
 80033e4:	42a3      	cmp	r3, r4
 80033e6:	bf0c      	ite	eq
 80033e8:	f8c8 2000 	streq.w	r2, [r8]
 80033ec:	605a      	strne	r2, [r3, #4]
 80033ee:	e7eb      	b.n	80033c8 <_malloc_r+0xa8>
 80033f0:	4623      	mov	r3, r4
 80033f2:	6864      	ldr	r4, [r4, #4]
 80033f4:	e7ae      	b.n	8003354 <_malloc_r+0x34>
 80033f6:	463c      	mov	r4, r7
 80033f8:	687f      	ldr	r7, [r7, #4]
 80033fa:	e7b6      	b.n	800336a <_malloc_r+0x4a>
 80033fc:	461a      	mov	r2, r3
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	42a3      	cmp	r3, r4
 8003402:	d1fb      	bne.n	80033fc <_malloc_r+0xdc>
 8003404:	2300      	movs	r3, #0
 8003406:	6053      	str	r3, [r2, #4]
 8003408:	e7de      	b.n	80033c8 <_malloc_r+0xa8>
 800340a:	230c      	movs	r3, #12
 800340c:	6033      	str	r3, [r6, #0]
 800340e:	4630      	mov	r0, r6
 8003410:	f000 f80c 	bl	800342c <__malloc_unlock>
 8003414:	e794      	b.n	8003340 <_malloc_r+0x20>
 8003416:	6005      	str	r5, [r0, #0]
 8003418:	e7d6      	b.n	80033c8 <_malloc_r+0xa8>
 800341a:	bf00      	nop
 800341c:	2000046c 	.word	0x2000046c

08003420 <__malloc_lock>:
 8003420:	4801      	ldr	r0, [pc, #4]	@ (8003428 <__malloc_lock+0x8>)
 8003422:	f7ff bee8 	b.w	80031f6 <__retarget_lock_acquire_recursive>
 8003426:	bf00      	nop
 8003428:	20000464 	.word	0x20000464

0800342c <__malloc_unlock>:
 800342c:	4801      	ldr	r0, [pc, #4]	@ (8003434 <__malloc_unlock+0x8>)
 800342e:	f7ff bee3 	b.w	80031f8 <__retarget_lock_release_recursive>
 8003432:	bf00      	nop
 8003434:	20000464 	.word	0x20000464

08003438 <__sflush_r>:
 8003438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800343c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003440:	0716      	lsls	r6, r2, #28
 8003442:	4605      	mov	r5, r0
 8003444:	460c      	mov	r4, r1
 8003446:	d454      	bmi.n	80034f2 <__sflush_r+0xba>
 8003448:	684b      	ldr	r3, [r1, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	dc02      	bgt.n	8003454 <__sflush_r+0x1c>
 800344e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	dd48      	ble.n	80034e6 <__sflush_r+0xae>
 8003454:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003456:	2e00      	cmp	r6, #0
 8003458:	d045      	beq.n	80034e6 <__sflush_r+0xae>
 800345a:	2300      	movs	r3, #0
 800345c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003460:	682f      	ldr	r7, [r5, #0]
 8003462:	6a21      	ldr	r1, [r4, #32]
 8003464:	602b      	str	r3, [r5, #0]
 8003466:	d030      	beq.n	80034ca <__sflush_r+0x92>
 8003468:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800346a:	89a3      	ldrh	r3, [r4, #12]
 800346c:	0759      	lsls	r1, r3, #29
 800346e:	d505      	bpl.n	800347c <__sflush_r+0x44>
 8003470:	6863      	ldr	r3, [r4, #4]
 8003472:	1ad2      	subs	r2, r2, r3
 8003474:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003476:	b10b      	cbz	r3, 800347c <__sflush_r+0x44>
 8003478:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800347a:	1ad2      	subs	r2, r2, r3
 800347c:	2300      	movs	r3, #0
 800347e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003480:	6a21      	ldr	r1, [r4, #32]
 8003482:	4628      	mov	r0, r5
 8003484:	47b0      	blx	r6
 8003486:	1c43      	adds	r3, r0, #1
 8003488:	89a3      	ldrh	r3, [r4, #12]
 800348a:	d106      	bne.n	800349a <__sflush_r+0x62>
 800348c:	6829      	ldr	r1, [r5, #0]
 800348e:	291d      	cmp	r1, #29
 8003490:	d82b      	bhi.n	80034ea <__sflush_r+0xb2>
 8003492:	4a2a      	ldr	r2, [pc, #168]	@ (800353c <__sflush_r+0x104>)
 8003494:	40ca      	lsrs	r2, r1
 8003496:	07d6      	lsls	r6, r2, #31
 8003498:	d527      	bpl.n	80034ea <__sflush_r+0xb2>
 800349a:	2200      	movs	r2, #0
 800349c:	6062      	str	r2, [r4, #4]
 800349e:	04d9      	lsls	r1, r3, #19
 80034a0:	6922      	ldr	r2, [r4, #16]
 80034a2:	6022      	str	r2, [r4, #0]
 80034a4:	d504      	bpl.n	80034b0 <__sflush_r+0x78>
 80034a6:	1c42      	adds	r2, r0, #1
 80034a8:	d101      	bne.n	80034ae <__sflush_r+0x76>
 80034aa:	682b      	ldr	r3, [r5, #0]
 80034ac:	b903      	cbnz	r3, 80034b0 <__sflush_r+0x78>
 80034ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80034b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034b2:	602f      	str	r7, [r5, #0]
 80034b4:	b1b9      	cbz	r1, 80034e6 <__sflush_r+0xae>
 80034b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80034ba:	4299      	cmp	r1, r3
 80034bc:	d002      	beq.n	80034c4 <__sflush_r+0x8c>
 80034be:	4628      	mov	r0, r5
 80034c0:	f7ff feba 	bl	8003238 <_free_r>
 80034c4:	2300      	movs	r3, #0
 80034c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80034c8:	e00d      	b.n	80034e6 <__sflush_r+0xae>
 80034ca:	2301      	movs	r3, #1
 80034cc:	4628      	mov	r0, r5
 80034ce:	47b0      	blx	r6
 80034d0:	4602      	mov	r2, r0
 80034d2:	1c50      	adds	r0, r2, #1
 80034d4:	d1c9      	bne.n	800346a <__sflush_r+0x32>
 80034d6:	682b      	ldr	r3, [r5, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0c6      	beq.n	800346a <__sflush_r+0x32>
 80034dc:	2b1d      	cmp	r3, #29
 80034de:	d001      	beq.n	80034e4 <__sflush_r+0xac>
 80034e0:	2b16      	cmp	r3, #22
 80034e2:	d11e      	bne.n	8003522 <__sflush_r+0xea>
 80034e4:	602f      	str	r7, [r5, #0]
 80034e6:	2000      	movs	r0, #0
 80034e8:	e022      	b.n	8003530 <__sflush_r+0xf8>
 80034ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034ee:	b21b      	sxth	r3, r3
 80034f0:	e01b      	b.n	800352a <__sflush_r+0xf2>
 80034f2:	690f      	ldr	r7, [r1, #16]
 80034f4:	2f00      	cmp	r7, #0
 80034f6:	d0f6      	beq.n	80034e6 <__sflush_r+0xae>
 80034f8:	0793      	lsls	r3, r2, #30
 80034fa:	680e      	ldr	r6, [r1, #0]
 80034fc:	bf08      	it	eq
 80034fe:	694b      	ldreq	r3, [r1, #20]
 8003500:	600f      	str	r7, [r1, #0]
 8003502:	bf18      	it	ne
 8003504:	2300      	movne	r3, #0
 8003506:	eba6 0807 	sub.w	r8, r6, r7
 800350a:	608b      	str	r3, [r1, #8]
 800350c:	f1b8 0f00 	cmp.w	r8, #0
 8003510:	dde9      	ble.n	80034e6 <__sflush_r+0xae>
 8003512:	6a21      	ldr	r1, [r4, #32]
 8003514:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003516:	4643      	mov	r3, r8
 8003518:	463a      	mov	r2, r7
 800351a:	4628      	mov	r0, r5
 800351c:	47b0      	blx	r6
 800351e:	2800      	cmp	r0, #0
 8003520:	dc08      	bgt.n	8003534 <__sflush_r+0xfc>
 8003522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800352a:	81a3      	strh	r3, [r4, #12]
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003534:	4407      	add	r7, r0
 8003536:	eba8 0800 	sub.w	r8, r8, r0
 800353a:	e7e7      	b.n	800350c <__sflush_r+0xd4>
 800353c:	20400001 	.word	0x20400001

08003540 <_fflush_r>:
 8003540:	b538      	push	{r3, r4, r5, lr}
 8003542:	690b      	ldr	r3, [r1, #16]
 8003544:	4605      	mov	r5, r0
 8003546:	460c      	mov	r4, r1
 8003548:	b913      	cbnz	r3, 8003550 <_fflush_r+0x10>
 800354a:	2500      	movs	r5, #0
 800354c:	4628      	mov	r0, r5
 800354e:	bd38      	pop	{r3, r4, r5, pc}
 8003550:	b118      	cbz	r0, 800355a <_fflush_r+0x1a>
 8003552:	6a03      	ldr	r3, [r0, #32]
 8003554:	b90b      	cbnz	r3, 800355a <_fflush_r+0x1a>
 8003556:	f7ff fd5b 	bl	8003010 <__sinit>
 800355a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f3      	beq.n	800354a <_fflush_r+0xa>
 8003562:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003564:	07d0      	lsls	r0, r2, #31
 8003566:	d404      	bmi.n	8003572 <_fflush_r+0x32>
 8003568:	0599      	lsls	r1, r3, #22
 800356a:	d402      	bmi.n	8003572 <_fflush_r+0x32>
 800356c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800356e:	f7ff fe42 	bl	80031f6 <__retarget_lock_acquire_recursive>
 8003572:	4628      	mov	r0, r5
 8003574:	4621      	mov	r1, r4
 8003576:	f7ff ff5f 	bl	8003438 <__sflush_r>
 800357a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800357c:	07da      	lsls	r2, r3, #31
 800357e:	4605      	mov	r5, r0
 8003580:	d4e4      	bmi.n	800354c <_fflush_r+0xc>
 8003582:	89a3      	ldrh	r3, [r4, #12]
 8003584:	059b      	lsls	r3, r3, #22
 8003586:	d4e1      	bmi.n	800354c <_fflush_r+0xc>
 8003588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800358a:	f7ff fe35 	bl	80031f8 <__retarget_lock_release_recursive>
 800358e:	e7dd      	b.n	800354c <_fflush_r+0xc>

08003590 <fiprintf>:
 8003590:	b40e      	push	{r1, r2, r3}
 8003592:	b503      	push	{r0, r1, lr}
 8003594:	4601      	mov	r1, r0
 8003596:	ab03      	add	r3, sp, #12
 8003598:	4805      	ldr	r0, [pc, #20]	@ (80035b0 <fiprintf+0x20>)
 800359a:	f853 2b04 	ldr.w	r2, [r3], #4
 800359e:	6800      	ldr	r0, [r0, #0]
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	f000 f847 	bl	8003634 <_vfiprintf_r>
 80035a6:	b002      	add	sp, #8
 80035a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80035ac:	b003      	add	sp, #12
 80035ae:	4770      	bx	lr
 80035b0:	20000018 	.word	0x20000018

080035b4 <_sbrk_r>:
 80035b4:	b538      	push	{r3, r4, r5, lr}
 80035b6:	4d06      	ldr	r5, [pc, #24]	@ (80035d0 <_sbrk_r+0x1c>)
 80035b8:	2300      	movs	r3, #0
 80035ba:	4604      	mov	r4, r0
 80035bc:	4608      	mov	r0, r1
 80035be:	602b      	str	r3, [r5, #0]
 80035c0:	f7fd fcca 	bl	8000f58 <_sbrk>
 80035c4:	1c43      	adds	r3, r0, #1
 80035c6:	d102      	bne.n	80035ce <_sbrk_r+0x1a>
 80035c8:	682b      	ldr	r3, [r5, #0]
 80035ca:	b103      	cbz	r3, 80035ce <_sbrk_r+0x1a>
 80035cc:	6023      	str	r3, [r4, #0]
 80035ce:	bd38      	pop	{r3, r4, r5, pc}
 80035d0:	20000460 	.word	0x20000460

080035d4 <abort>:
 80035d4:	b508      	push	{r3, lr}
 80035d6:	2006      	movs	r0, #6
 80035d8:	f000 fb8c 	bl	8003cf4 <raise>
 80035dc:	2001      	movs	r0, #1
 80035de:	f7fd fc42 	bl	8000e66 <_exit>

080035e2 <__sfputc_r>:
 80035e2:	6893      	ldr	r3, [r2, #8]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	b410      	push	{r4}
 80035ea:	6093      	str	r3, [r2, #8]
 80035ec:	da08      	bge.n	8003600 <__sfputc_r+0x1e>
 80035ee:	6994      	ldr	r4, [r2, #24]
 80035f0:	42a3      	cmp	r3, r4
 80035f2:	db01      	blt.n	80035f8 <__sfputc_r+0x16>
 80035f4:	290a      	cmp	r1, #10
 80035f6:	d103      	bne.n	8003600 <__sfputc_r+0x1e>
 80035f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035fc:	f000 babe 	b.w	8003b7c <__swbuf_r>
 8003600:	6813      	ldr	r3, [r2, #0]
 8003602:	1c58      	adds	r0, r3, #1
 8003604:	6010      	str	r0, [r2, #0]
 8003606:	7019      	strb	r1, [r3, #0]
 8003608:	4608      	mov	r0, r1
 800360a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800360e:	4770      	bx	lr

08003610 <__sfputs_r>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	4606      	mov	r6, r0
 8003614:	460f      	mov	r7, r1
 8003616:	4614      	mov	r4, r2
 8003618:	18d5      	adds	r5, r2, r3
 800361a:	42ac      	cmp	r4, r5
 800361c:	d101      	bne.n	8003622 <__sfputs_r+0x12>
 800361e:	2000      	movs	r0, #0
 8003620:	e007      	b.n	8003632 <__sfputs_r+0x22>
 8003622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003626:	463a      	mov	r2, r7
 8003628:	4630      	mov	r0, r6
 800362a:	f7ff ffda 	bl	80035e2 <__sfputc_r>
 800362e:	1c43      	adds	r3, r0, #1
 8003630:	d1f3      	bne.n	800361a <__sfputs_r+0xa>
 8003632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003634 <_vfiprintf_r>:
 8003634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003638:	460d      	mov	r5, r1
 800363a:	b09d      	sub	sp, #116	@ 0x74
 800363c:	4614      	mov	r4, r2
 800363e:	4698      	mov	r8, r3
 8003640:	4606      	mov	r6, r0
 8003642:	b118      	cbz	r0, 800364c <_vfiprintf_r+0x18>
 8003644:	6a03      	ldr	r3, [r0, #32]
 8003646:	b90b      	cbnz	r3, 800364c <_vfiprintf_r+0x18>
 8003648:	f7ff fce2 	bl	8003010 <__sinit>
 800364c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800364e:	07d9      	lsls	r1, r3, #31
 8003650:	d405      	bmi.n	800365e <_vfiprintf_r+0x2a>
 8003652:	89ab      	ldrh	r3, [r5, #12]
 8003654:	059a      	lsls	r2, r3, #22
 8003656:	d402      	bmi.n	800365e <_vfiprintf_r+0x2a>
 8003658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800365a:	f7ff fdcc 	bl	80031f6 <__retarget_lock_acquire_recursive>
 800365e:	89ab      	ldrh	r3, [r5, #12]
 8003660:	071b      	lsls	r3, r3, #28
 8003662:	d501      	bpl.n	8003668 <_vfiprintf_r+0x34>
 8003664:	692b      	ldr	r3, [r5, #16]
 8003666:	b99b      	cbnz	r3, 8003690 <_vfiprintf_r+0x5c>
 8003668:	4629      	mov	r1, r5
 800366a:	4630      	mov	r0, r6
 800366c:	f000 fac4 	bl	8003bf8 <__swsetup_r>
 8003670:	b170      	cbz	r0, 8003690 <_vfiprintf_r+0x5c>
 8003672:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003674:	07dc      	lsls	r4, r3, #31
 8003676:	d504      	bpl.n	8003682 <_vfiprintf_r+0x4e>
 8003678:	f04f 30ff 	mov.w	r0, #4294967295
 800367c:	b01d      	add	sp, #116	@ 0x74
 800367e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003682:	89ab      	ldrh	r3, [r5, #12]
 8003684:	0598      	lsls	r0, r3, #22
 8003686:	d4f7      	bmi.n	8003678 <_vfiprintf_r+0x44>
 8003688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800368a:	f7ff fdb5 	bl	80031f8 <__retarget_lock_release_recursive>
 800368e:	e7f3      	b.n	8003678 <_vfiprintf_r+0x44>
 8003690:	2300      	movs	r3, #0
 8003692:	9309      	str	r3, [sp, #36]	@ 0x24
 8003694:	2320      	movs	r3, #32
 8003696:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800369a:	f8cd 800c 	str.w	r8, [sp, #12]
 800369e:	2330      	movs	r3, #48	@ 0x30
 80036a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003850 <_vfiprintf_r+0x21c>
 80036a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036a8:	f04f 0901 	mov.w	r9, #1
 80036ac:	4623      	mov	r3, r4
 80036ae:	469a      	mov	sl, r3
 80036b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036b4:	b10a      	cbz	r2, 80036ba <_vfiprintf_r+0x86>
 80036b6:	2a25      	cmp	r2, #37	@ 0x25
 80036b8:	d1f9      	bne.n	80036ae <_vfiprintf_r+0x7a>
 80036ba:	ebba 0b04 	subs.w	fp, sl, r4
 80036be:	d00b      	beq.n	80036d8 <_vfiprintf_r+0xa4>
 80036c0:	465b      	mov	r3, fp
 80036c2:	4622      	mov	r2, r4
 80036c4:	4629      	mov	r1, r5
 80036c6:	4630      	mov	r0, r6
 80036c8:	f7ff ffa2 	bl	8003610 <__sfputs_r>
 80036cc:	3001      	adds	r0, #1
 80036ce:	f000 80a7 	beq.w	8003820 <_vfiprintf_r+0x1ec>
 80036d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036d4:	445a      	add	r2, fp
 80036d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80036d8:	f89a 3000 	ldrb.w	r3, [sl]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 809f 	beq.w	8003820 <_vfiprintf_r+0x1ec>
 80036e2:	2300      	movs	r3, #0
 80036e4:	f04f 32ff 	mov.w	r2, #4294967295
 80036e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036ec:	f10a 0a01 	add.w	sl, sl, #1
 80036f0:	9304      	str	r3, [sp, #16]
 80036f2:	9307      	str	r3, [sp, #28]
 80036f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80036fa:	4654      	mov	r4, sl
 80036fc:	2205      	movs	r2, #5
 80036fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003702:	4853      	ldr	r0, [pc, #332]	@ (8003850 <_vfiprintf_r+0x21c>)
 8003704:	f7fc fd84 	bl	8000210 <memchr>
 8003708:	9a04      	ldr	r2, [sp, #16]
 800370a:	b9d8      	cbnz	r0, 8003744 <_vfiprintf_r+0x110>
 800370c:	06d1      	lsls	r1, r2, #27
 800370e:	bf44      	itt	mi
 8003710:	2320      	movmi	r3, #32
 8003712:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003716:	0713      	lsls	r3, r2, #28
 8003718:	bf44      	itt	mi
 800371a:	232b      	movmi	r3, #43	@ 0x2b
 800371c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003720:	f89a 3000 	ldrb.w	r3, [sl]
 8003724:	2b2a      	cmp	r3, #42	@ 0x2a
 8003726:	d015      	beq.n	8003754 <_vfiprintf_r+0x120>
 8003728:	9a07      	ldr	r2, [sp, #28]
 800372a:	4654      	mov	r4, sl
 800372c:	2000      	movs	r0, #0
 800372e:	f04f 0c0a 	mov.w	ip, #10
 8003732:	4621      	mov	r1, r4
 8003734:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003738:	3b30      	subs	r3, #48	@ 0x30
 800373a:	2b09      	cmp	r3, #9
 800373c:	d94b      	bls.n	80037d6 <_vfiprintf_r+0x1a2>
 800373e:	b1b0      	cbz	r0, 800376e <_vfiprintf_r+0x13a>
 8003740:	9207      	str	r2, [sp, #28]
 8003742:	e014      	b.n	800376e <_vfiprintf_r+0x13a>
 8003744:	eba0 0308 	sub.w	r3, r0, r8
 8003748:	fa09 f303 	lsl.w	r3, r9, r3
 800374c:	4313      	orrs	r3, r2
 800374e:	9304      	str	r3, [sp, #16]
 8003750:	46a2      	mov	sl, r4
 8003752:	e7d2      	b.n	80036fa <_vfiprintf_r+0xc6>
 8003754:	9b03      	ldr	r3, [sp, #12]
 8003756:	1d19      	adds	r1, r3, #4
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	9103      	str	r1, [sp, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	bfbb      	ittet	lt
 8003760:	425b      	neglt	r3, r3
 8003762:	f042 0202 	orrlt.w	r2, r2, #2
 8003766:	9307      	strge	r3, [sp, #28]
 8003768:	9307      	strlt	r3, [sp, #28]
 800376a:	bfb8      	it	lt
 800376c:	9204      	strlt	r2, [sp, #16]
 800376e:	7823      	ldrb	r3, [r4, #0]
 8003770:	2b2e      	cmp	r3, #46	@ 0x2e
 8003772:	d10a      	bne.n	800378a <_vfiprintf_r+0x156>
 8003774:	7863      	ldrb	r3, [r4, #1]
 8003776:	2b2a      	cmp	r3, #42	@ 0x2a
 8003778:	d132      	bne.n	80037e0 <_vfiprintf_r+0x1ac>
 800377a:	9b03      	ldr	r3, [sp, #12]
 800377c:	1d1a      	adds	r2, r3, #4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	9203      	str	r2, [sp, #12]
 8003782:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003786:	3402      	adds	r4, #2
 8003788:	9305      	str	r3, [sp, #20]
 800378a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003860 <_vfiprintf_r+0x22c>
 800378e:	7821      	ldrb	r1, [r4, #0]
 8003790:	2203      	movs	r2, #3
 8003792:	4650      	mov	r0, sl
 8003794:	f7fc fd3c 	bl	8000210 <memchr>
 8003798:	b138      	cbz	r0, 80037aa <_vfiprintf_r+0x176>
 800379a:	9b04      	ldr	r3, [sp, #16]
 800379c:	eba0 000a 	sub.w	r0, r0, sl
 80037a0:	2240      	movs	r2, #64	@ 0x40
 80037a2:	4082      	lsls	r2, r0
 80037a4:	4313      	orrs	r3, r2
 80037a6:	3401      	adds	r4, #1
 80037a8:	9304      	str	r3, [sp, #16]
 80037aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ae:	4829      	ldr	r0, [pc, #164]	@ (8003854 <_vfiprintf_r+0x220>)
 80037b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037b4:	2206      	movs	r2, #6
 80037b6:	f7fc fd2b 	bl	8000210 <memchr>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d03f      	beq.n	800383e <_vfiprintf_r+0x20a>
 80037be:	4b26      	ldr	r3, [pc, #152]	@ (8003858 <_vfiprintf_r+0x224>)
 80037c0:	bb1b      	cbnz	r3, 800380a <_vfiprintf_r+0x1d6>
 80037c2:	9b03      	ldr	r3, [sp, #12]
 80037c4:	3307      	adds	r3, #7
 80037c6:	f023 0307 	bic.w	r3, r3, #7
 80037ca:	3308      	adds	r3, #8
 80037cc:	9303      	str	r3, [sp, #12]
 80037ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037d0:	443b      	add	r3, r7
 80037d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80037d4:	e76a      	b.n	80036ac <_vfiprintf_r+0x78>
 80037d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80037da:	460c      	mov	r4, r1
 80037dc:	2001      	movs	r0, #1
 80037de:	e7a8      	b.n	8003732 <_vfiprintf_r+0xfe>
 80037e0:	2300      	movs	r3, #0
 80037e2:	3401      	adds	r4, #1
 80037e4:	9305      	str	r3, [sp, #20]
 80037e6:	4619      	mov	r1, r3
 80037e8:	f04f 0c0a 	mov.w	ip, #10
 80037ec:	4620      	mov	r0, r4
 80037ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037f2:	3a30      	subs	r2, #48	@ 0x30
 80037f4:	2a09      	cmp	r2, #9
 80037f6:	d903      	bls.n	8003800 <_vfiprintf_r+0x1cc>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0c6      	beq.n	800378a <_vfiprintf_r+0x156>
 80037fc:	9105      	str	r1, [sp, #20]
 80037fe:	e7c4      	b.n	800378a <_vfiprintf_r+0x156>
 8003800:	fb0c 2101 	mla	r1, ip, r1, r2
 8003804:	4604      	mov	r4, r0
 8003806:	2301      	movs	r3, #1
 8003808:	e7f0      	b.n	80037ec <_vfiprintf_r+0x1b8>
 800380a:	ab03      	add	r3, sp, #12
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	462a      	mov	r2, r5
 8003810:	4b12      	ldr	r3, [pc, #72]	@ (800385c <_vfiprintf_r+0x228>)
 8003812:	a904      	add	r1, sp, #16
 8003814:	4630      	mov	r0, r6
 8003816:	f3af 8000 	nop.w
 800381a:	4607      	mov	r7, r0
 800381c:	1c78      	adds	r0, r7, #1
 800381e:	d1d6      	bne.n	80037ce <_vfiprintf_r+0x19a>
 8003820:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003822:	07d9      	lsls	r1, r3, #31
 8003824:	d405      	bmi.n	8003832 <_vfiprintf_r+0x1fe>
 8003826:	89ab      	ldrh	r3, [r5, #12]
 8003828:	059a      	lsls	r2, r3, #22
 800382a:	d402      	bmi.n	8003832 <_vfiprintf_r+0x1fe>
 800382c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800382e:	f7ff fce3 	bl	80031f8 <__retarget_lock_release_recursive>
 8003832:	89ab      	ldrh	r3, [r5, #12]
 8003834:	065b      	lsls	r3, r3, #25
 8003836:	f53f af1f 	bmi.w	8003678 <_vfiprintf_r+0x44>
 800383a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800383c:	e71e      	b.n	800367c <_vfiprintf_r+0x48>
 800383e:	ab03      	add	r3, sp, #12
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	462a      	mov	r2, r5
 8003844:	4b05      	ldr	r3, [pc, #20]	@ (800385c <_vfiprintf_r+0x228>)
 8003846:	a904      	add	r1, sp, #16
 8003848:	4630      	mov	r0, r6
 800384a:	f000 f879 	bl	8003940 <_printf_i>
 800384e:	e7e4      	b.n	800381a <_vfiprintf_r+0x1e6>
 8003850:	08003f0f 	.word	0x08003f0f
 8003854:	08003f19 	.word	0x08003f19
 8003858:	00000000 	.word	0x00000000
 800385c:	08003611 	.word	0x08003611
 8003860:	08003f15 	.word	0x08003f15

08003864 <_printf_common>:
 8003864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003868:	4616      	mov	r6, r2
 800386a:	4698      	mov	r8, r3
 800386c:	688a      	ldr	r2, [r1, #8]
 800386e:	690b      	ldr	r3, [r1, #16]
 8003870:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003874:	4293      	cmp	r3, r2
 8003876:	bfb8      	it	lt
 8003878:	4613      	movlt	r3, r2
 800387a:	6033      	str	r3, [r6, #0]
 800387c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003880:	4607      	mov	r7, r0
 8003882:	460c      	mov	r4, r1
 8003884:	b10a      	cbz	r2, 800388a <_printf_common+0x26>
 8003886:	3301      	adds	r3, #1
 8003888:	6033      	str	r3, [r6, #0]
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	0699      	lsls	r1, r3, #26
 800388e:	bf42      	ittt	mi
 8003890:	6833      	ldrmi	r3, [r6, #0]
 8003892:	3302      	addmi	r3, #2
 8003894:	6033      	strmi	r3, [r6, #0]
 8003896:	6825      	ldr	r5, [r4, #0]
 8003898:	f015 0506 	ands.w	r5, r5, #6
 800389c:	d106      	bne.n	80038ac <_printf_common+0x48>
 800389e:	f104 0a19 	add.w	sl, r4, #25
 80038a2:	68e3      	ldr	r3, [r4, #12]
 80038a4:	6832      	ldr	r2, [r6, #0]
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	42ab      	cmp	r3, r5
 80038aa:	dc26      	bgt.n	80038fa <_printf_common+0x96>
 80038ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038b0:	6822      	ldr	r2, [r4, #0]
 80038b2:	3b00      	subs	r3, #0
 80038b4:	bf18      	it	ne
 80038b6:	2301      	movne	r3, #1
 80038b8:	0692      	lsls	r2, r2, #26
 80038ba:	d42b      	bmi.n	8003914 <_printf_common+0xb0>
 80038bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038c0:	4641      	mov	r1, r8
 80038c2:	4638      	mov	r0, r7
 80038c4:	47c8      	blx	r9
 80038c6:	3001      	adds	r0, #1
 80038c8:	d01e      	beq.n	8003908 <_printf_common+0xa4>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	6922      	ldr	r2, [r4, #16]
 80038ce:	f003 0306 	and.w	r3, r3, #6
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	bf02      	ittt	eq
 80038d6:	68e5      	ldreq	r5, [r4, #12]
 80038d8:	6833      	ldreq	r3, [r6, #0]
 80038da:	1aed      	subeq	r5, r5, r3
 80038dc:	68a3      	ldr	r3, [r4, #8]
 80038de:	bf0c      	ite	eq
 80038e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038e4:	2500      	movne	r5, #0
 80038e6:	4293      	cmp	r3, r2
 80038e8:	bfc4      	itt	gt
 80038ea:	1a9b      	subgt	r3, r3, r2
 80038ec:	18ed      	addgt	r5, r5, r3
 80038ee:	2600      	movs	r6, #0
 80038f0:	341a      	adds	r4, #26
 80038f2:	42b5      	cmp	r5, r6
 80038f4:	d11a      	bne.n	800392c <_printf_common+0xc8>
 80038f6:	2000      	movs	r0, #0
 80038f8:	e008      	b.n	800390c <_printf_common+0xa8>
 80038fa:	2301      	movs	r3, #1
 80038fc:	4652      	mov	r2, sl
 80038fe:	4641      	mov	r1, r8
 8003900:	4638      	mov	r0, r7
 8003902:	47c8      	blx	r9
 8003904:	3001      	adds	r0, #1
 8003906:	d103      	bne.n	8003910 <_printf_common+0xac>
 8003908:	f04f 30ff 	mov.w	r0, #4294967295
 800390c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003910:	3501      	adds	r5, #1
 8003912:	e7c6      	b.n	80038a2 <_printf_common+0x3e>
 8003914:	18e1      	adds	r1, r4, r3
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	2030      	movs	r0, #48	@ 0x30
 800391a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800391e:	4422      	add	r2, r4
 8003920:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003924:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003928:	3302      	adds	r3, #2
 800392a:	e7c7      	b.n	80038bc <_printf_common+0x58>
 800392c:	2301      	movs	r3, #1
 800392e:	4622      	mov	r2, r4
 8003930:	4641      	mov	r1, r8
 8003932:	4638      	mov	r0, r7
 8003934:	47c8      	blx	r9
 8003936:	3001      	adds	r0, #1
 8003938:	d0e6      	beq.n	8003908 <_printf_common+0xa4>
 800393a:	3601      	adds	r6, #1
 800393c:	e7d9      	b.n	80038f2 <_printf_common+0x8e>
	...

08003940 <_printf_i>:
 8003940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003944:	7e0f      	ldrb	r7, [r1, #24]
 8003946:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003948:	2f78      	cmp	r7, #120	@ 0x78
 800394a:	4691      	mov	r9, r2
 800394c:	4680      	mov	r8, r0
 800394e:	460c      	mov	r4, r1
 8003950:	469a      	mov	sl, r3
 8003952:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003956:	d807      	bhi.n	8003968 <_printf_i+0x28>
 8003958:	2f62      	cmp	r7, #98	@ 0x62
 800395a:	d80a      	bhi.n	8003972 <_printf_i+0x32>
 800395c:	2f00      	cmp	r7, #0
 800395e:	f000 80d1 	beq.w	8003b04 <_printf_i+0x1c4>
 8003962:	2f58      	cmp	r7, #88	@ 0x58
 8003964:	f000 80b8 	beq.w	8003ad8 <_printf_i+0x198>
 8003968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800396c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003970:	e03a      	b.n	80039e8 <_printf_i+0xa8>
 8003972:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003976:	2b15      	cmp	r3, #21
 8003978:	d8f6      	bhi.n	8003968 <_printf_i+0x28>
 800397a:	a101      	add	r1, pc, #4	@ (adr r1, 8003980 <_printf_i+0x40>)
 800397c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003980:	080039d9 	.word	0x080039d9
 8003984:	080039ed 	.word	0x080039ed
 8003988:	08003969 	.word	0x08003969
 800398c:	08003969 	.word	0x08003969
 8003990:	08003969 	.word	0x08003969
 8003994:	08003969 	.word	0x08003969
 8003998:	080039ed 	.word	0x080039ed
 800399c:	08003969 	.word	0x08003969
 80039a0:	08003969 	.word	0x08003969
 80039a4:	08003969 	.word	0x08003969
 80039a8:	08003969 	.word	0x08003969
 80039ac:	08003aeb 	.word	0x08003aeb
 80039b0:	08003a17 	.word	0x08003a17
 80039b4:	08003aa5 	.word	0x08003aa5
 80039b8:	08003969 	.word	0x08003969
 80039bc:	08003969 	.word	0x08003969
 80039c0:	08003b0d 	.word	0x08003b0d
 80039c4:	08003969 	.word	0x08003969
 80039c8:	08003a17 	.word	0x08003a17
 80039cc:	08003969 	.word	0x08003969
 80039d0:	08003969 	.word	0x08003969
 80039d4:	08003aad 	.word	0x08003aad
 80039d8:	6833      	ldr	r3, [r6, #0]
 80039da:	1d1a      	adds	r2, r3, #4
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6032      	str	r2, [r6, #0]
 80039e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039e8:	2301      	movs	r3, #1
 80039ea:	e09c      	b.n	8003b26 <_printf_i+0x1e6>
 80039ec:	6833      	ldr	r3, [r6, #0]
 80039ee:	6820      	ldr	r0, [r4, #0]
 80039f0:	1d19      	adds	r1, r3, #4
 80039f2:	6031      	str	r1, [r6, #0]
 80039f4:	0606      	lsls	r6, r0, #24
 80039f6:	d501      	bpl.n	80039fc <_printf_i+0xbc>
 80039f8:	681d      	ldr	r5, [r3, #0]
 80039fa:	e003      	b.n	8003a04 <_printf_i+0xc4>
 80039fc:	0645      	lsls	r5, r0, #25
 80039fe:	d5fb      	bpl.n	80039f8 <_printf_i+0xb8>
 8003a00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a04:	2d00      	cmp	r5, #0
 8003a06:	da03      	bge.n	8003a10 <_printf_i+0xd0>
 8003a08:	232d      	movs	r3, #45	@ 0x2d
 8003a0a:	426d      	negs	r5, r5
 8003a0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a10:	4858      	ldr	r0, [pc, #352]	@ (8003b74 <_printf_i+0x234>)
 8003a12:	230a      	movs	r3, #10
 8003a14:	e011      	b.n	8003a3a <_printf_i+0xfa>
 8003a16:	6821      	ldr	r1, [r4, #0]
 8003a18:	6833      	ldr	r3, [r6, #0]
 8003a1a:	0608      	lsls	r0, r1, #24
 8003a1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a20:	d402      	bmi.n	8003a28 <_printf_i+0xe8>
 8003a22:	0649      	lsls	r1, r1, #25
 8003a24:	bf48      	it	mi
 8003a26:	b2ad      	uxthmi	r5, r5
 8003a28:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a2a:	4852      	ldr	r0, [pc, #328]	@ (8003b74 <_printf_i+0x234>)
 8003a2c:	6033      	str	r3, [r6, #0]
 8003a2e:	bf14      	ite	ne
 8003a30:	230a      	movne	r3, #10
 8003a32:	2308      	moveq	r3, #8
 8003a34:	2100      	movs	r1, #0
 8003a36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a3a:	6866      	ldr	r6, [r4, #4]
 8003a3c:	60a6      	str	r6, [r4, #8]
 8003a3e:	2e00      	cmp	r6, #0
 8003a40:	db05      	blt.n	8003a4e <_printf_i+0x10e>
 8003a42:	6821      	ldr	r1, [r4, #0]
 8003a44:	432e      	orrs	r6, r5
 8003a46:	f021 0104 	bic.w	r1, r1, #4
 8003a4a:	6021      	str	r1, [r4, #0]
 8003a4c:	d04b      	beq.n	8003ae6 <_printf_i+0x1a6>
 8003a4e:	4616      	mov	r6, r2
 8003a50:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a54:	fb03 5711 	mls	r7, r3, r1, r5
 8003a58:	5dc7      	ldrb	r7, [r0, r7]
 8003a5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a5e:	462f      	mov	r7, r5
 8003a60:	42bb      	cmp	r3, r7
 8003a62:	460d      	mov	r5, r1
 8003a64:	d9f4      	bls.n	8003a50 <_printf_i+0x110>
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d10b      	bne.n	8003a82 <_printf_i+0x142>
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	07df      	lsls	r7, r3, #31
 8003a6e:	d508      	bpl.n	8003a82 <_printf_i+0x142>
 8003a70:	6923      	ldr	r3, [r4, #16]
 8003a72:	6861      	ldr	r1, [r4, #4]
 8003a74:	4299      	cmp	r1, r3
 8003a76:	bfde      	ittt	le
 8003a78:	2330      	movle	r3, #48	@ 0x30
 8003a7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a82:	1b92      	subs	r2, r2, r6
 8003a84:	6122      	str	r2, [r4, #16]
 8003a86:	f8cd a000 	str.w	sl, [sp]
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	aa03      	add	r2, sp, #12
 8003a8e:	4621      	mov	r1, r4
 8003a90:	4640      	mov	r0, r8
 8003a92:	f7ff fee7 	bl	8003864 <_printf_common>
 8003a96:	3001      	adds	r0, #1
 8003a98:	d14a      	bne.n	8003b30 <_printf_i+0x1f0>
 8003a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9e:	b004      	add	sp, #16
 8003aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	f043 0320 	orr.w	r3, r3, #32
 8003aaa:	6023      	str	r3, [r4, #0]
 8003aac:	4832      	ldr	r0, [pc, #200]	@ (8003b78 <_printf_i+0x238>)
 8003aae:	2778      	movs	r7, #120	@ 0x78
 8003ab0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	6831      	ldr	r1, [r6, #0]
 8003ab8:	061f      	lsls	r7, r3, #24
 8003aba:	f851 5b04 	ldr.w	r5, [r1], #4
 8003abe:	d402      	bmi.n	8003ac6 <_printf_i+0x186>
 8003ac0:	065f      	lsls	r7, r3, #25
 8003ac2:	bf48      	it	mi
 8003ac4:	b2ad      	uxthmi	r5, r5
 8003ac6:	6031      	str	r1, [r6, #0]
 8003ac8:	07d9      	lsls	r1, r3, #31
 8003aca:	bf44      	itt	mi
 8003acc:	f043 0320 	orrmi.w	r3, r3, #32
 8003ad0:	6023      	strmi	r3, [r4, #0]
 8003ad2:	b11d      	cbz	r5, 8003adc <_printf_i+0x19c>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	e7ad      	b.n	8003a34 <_printf_i+0xf4>
 8003ad8:	4826      	ldr	r0, [pc, #152]	@ (8003b74 <_printf_i+0x234>)
 8003ada:	e7e9      	b.n	8003ab0 <_printf_i+0x170>
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	f023 0320 	bic.w	r3, r3, #32
 8003ae2:	6023      	str	r3, [r4, #0]
 8003ae4:	e7f6      	b.n	8003ad4 <_printf_i+0x194>
 8003ae6:	4616      	mov	r6, r2
 8003ae8:	e7bd      	b.n	8003a66 <_printf_i+0x126>
 8003aea:	6833      	ldr	r3, [r6, #0]
 8003aec:	6825      	ldr	r5, [r4, #0]
 8003aee:	6961      	ldr	r1, [r4, #20]
 8003af0:	1d18      	adds	r0, r3, #4
 8003af2:	6030      	str	r0, [r6, #0]
 8003af4:	062e      	lsls	r6, r5, #24
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	d501      	bpl.n	8003afe <_printf_i+0x1be>
 8003afa:	6019      	str	r1, [r3, #0]
 8003afc:	e002      	b.n	8003b04 <_printf_i+0x1c4>
 8003afe:	0668      	lsls	r0, r5, #25
 8003b00:	d5fb      	bpl.n	8003afa <_printf_i+0x1ba>
 8003b02:	8019      	strh	r1, [r3, #0]
 8003b04:	2300      	movs	r3, #0
 8003b06:	6123      	str	r3, [r4, #16]
 8003b08:	4616      	mov	r6, r2
 8003b0a:	e7bc      	b.n	8003a86 <_printf_i+0x146>
 8003b0c:	6833      	ldr	r3, [r6, #0]
 8003b0e:	1d1a      	adds	r2, r3, #4
 8003b10:	6032      	str	r2, [r6, #0]
 8003b12:	681e      	ldr	r6, [r3, #0]
 8003b14:	6862      	ldr	r2, [r4, #4]
 8003b16:	2100      	movs	r1, #0
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f7fc fb79 	bl	8000210 <memchr>
 8003b1e:	b108      	cbz	r0, 8003b24 <_printf_i+0x1e4>
 8003b20:	1b80      	subs	r0, r0, r6
 8003b22:	6060      	str	r0, [r4, #4]
 8003b24:	6863      	ldr	r3, [r4, #4]
 8003b26:	6123      	str	r3, [r4, #16]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b2e:	e7aa      	b.n	8003a86 <_printf_i+0x146>
 8003b30:	6923      	ldr	r3, [r4, #16]
 8003b32:	4632      	mov	r2, r6
 8003b34:	4649      	mov	r1, r9
 8003b36:	4640      	mov	r0, r8
 8003b38:	47d0      	blx	sl
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	d0ad      	beq.n	8003a9a <_printf_i+0x15a>
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	079b      	lsls	r3, r3, #30
 8003b42:	d413      	bmi.n	8003b6c <_printf_i+0x22c>
 8003b44:	68e0      	ldr	r0, [r4, #12]
 8003b46:	9b03      	ldr	r3, [sp, #12]
 8003b48:	4298      	cmp	r0, r3
 8003b4a:	bfb8      	it	lt
 8003b4c:	4618      	movlt	r0, r3
 8003b4e:	e7a6      	b.n	8003a9e <_printf_i+0x15e>
 8003b50:	2301      	movs	r3, #1
 8003b52:	4632      	mov	r2, r6
 8003b54:	4649      	mov	r1, r9
 8003b56:	4640      	mov	r0, r8
 8003b58:	47d0      	blx	sl
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d09d      	beq.n	8003a9a <_printf_i+0x15a>
 8003b5e:	3501      	adds	r5, #1
 8003b60:	68e3      	ldr	r3, [r4, #12]
 8003b62:	9903      	ldr	r1, [sp, #12]
 8003b64:	1a5b      	subs	r3, r3, r1
 8003b66:	42ab      	cmp	r3, r5
 8003b68:	dcf2      	bgt.n	8003b50 <_printf_i+0x210>
 8003b6a:	e7eb      	b.n	8003b44 <_printf_i+0x204>
 8003b6c:	2500      	movs	r5, #0
 8003b6e:	f104 0619 	add.w	r6, r4, #25
 8003b72:	e7f5      	b.n	8003b60 <_printf_i+0x220>
 8003b74:	08003f20 	.word	0x08003f20
 8003b78:	08003f31 	.word	0x08003f31

08003b7c <__swbuf_r>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	460e      	mov	r6, r1
 8003b80:	4614      	mov	r4, r2
 8003b82:	4605      	mov	r5, r0
 8003b84:	b118      	cbz	r0, 8003b8e <__swbuf_r+0x12>
 8003b86:	6a03      	ldr	r3, [r0, #32]
 8003b88:	b90b      	cbnz	r3, 8003b8e <__swbuf_r+0x12>
 8003b8a:	f7ff fa41 	bl	8003010 <__sinit>
 8003b8e:	69a3      	ldr	r3, [r4, #24]
 8003b90:	60a3      	str	r3, [r4, #8]
 8003b92:	89a3      	ldrh	r3, [r4, #12]
 8003b94:	071a      	lsls	r2, r3, #28
 8003b96:	d501      	bpl.n	8003b9c <__swbuf_r+0x20>
 8003b98:	6923      	ldr	r3, [r4, #16]
 8003b9a:	b943      	cbnz	r3, 8003bae <__swbuf_r+0x32>
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f000 f82a 	bl	8003bf8 <__swsetup_r>
 8003ba4:	b118      	cbz	r0, 8003bae <__swbuf_r+0x32>
 8003ba6:	f04f 37ff 	mov.w	r7, #4294967295
 8003baa:	4638      	mov	r0, r7
 8003bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	6922      	ldr	r2, [r4, #16]
 8003bb2:	1a98      	subs	r0, r3, r2
 8003bb4:	6963      	ldr	r3, [r4, #20]
 8003bb6:	b2f6      	uxtb	r6, r6
 8003bb8:	4283      	cmp	r3, r0
 8003bba:	4637      	mov	r7, r6
 8003bbc:	dc05      	bgt.n	8003bca <__swbuf_r+0x4e>
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	f7ff fcbd 	bl	8003540 <_fflush_r>
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d1ed      	bne.n	8003ba6 <__swbuf_r+0x2a>
 8003bca:	68a3      	ldr	r3, [r4, #8]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	60a3      	str	r3, [r4, #8]
 8003bd0:	6823      	ldr	r3, [r4, #0]
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	6022      	str	r2, [r4, #0]
 8003bd6:	701e      	strb	r6, [r3, #0]
 8003bd8:	6962      	ldr	r2, [r4, #20]
 8003bda:	1c43      	adds	r3, r0, #1
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d004      	beq.n	8003bea <__swbuf_r+0x6e>
 8003be0:	89a3      	ldrh	r3, [r4, #12]
 8003be2:	07db      	lsls	r3, r3, #31
 8003be4:	d5e1      	bpl.n	8003baa <__swbuf_r+0x2e>
 8003be6:	2e0a      	cmp	r6, #10
 8003be8:	d1df      	bne.n	8003baa <__swbuf_r+0x2e>
 8003bea:	4621      	mov	r1, r4
 8003bec:	4628      	mov	r0, r5
 8003bee:	f7ff fca7 	bl	8003540 <_fflush_r>
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	d0d9      	beq.n	8003baa <__swbuf_r+0x2e>
 8003bf6:	e7d6      	b.n	8003ba6 <__swbuf_r+0x2a>

08003bf8 <__swsetup_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	4b29      	ldr	r3, [pc, #164]	@ (8003ca0 <__swsetup_r+0xa8>)
 8003bfc:	4605      	mov	r5, r0
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	460c      	mov	r4, r1
 8003c02:	b118      	cbz	r0, 8003c0c <__swsetup_r+0x14>
 8003c04:	6a03      	ldr	r3, [r0, #32]
 8003c06:	b90b      	cbnz	r3, 8003c0c <__swsetup_r+0x14>
 8003c08:	f7ff fa02 	bl	8003010 <__sinit>
 8003c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c10:	0719      	lsls	r1, r3, #28
 8003c12:	d422      	bmi.n	8003c5a <__swsetup_r+0x62>
 8003c14:	06da      	lsls	r2, r3, #27
 8003c16:	d407      	bmi.n	8003c28 <__swsetup_r+0x30>
 8003c18:	2209      	movs	r2, #9
 8003c1a:	602a      	str	r2, [r5, #0]
 8003c1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c20:	81a3      	strh	r3, [r4, #12]
 8003c22:	f04f 30ff 	mov.w	r0, #4294967295
 8003c26:	e033      	b.n	8003c90 <__swsetup_r+0x98>
 8003c28:	0758      	lsls	r0, r3, #29
 8003c2a:	d512      	bpl.n	8003c52 <__swsetup_r+0x5a>
 8003c2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c2e:	b141      	cbz	r1, 8003c42 <__swsetup_r+0x4a>
 8003c30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c34:	4299      	cmp	r1, r3
 8003c36:	d002      	beq.n	8003c3e <__swsetup_r+0x46>
 8003c38:	4628      	mov	r0, r5
 8003c3a:	f7ff fafd 	bl	8003238 <_free_r>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c42:	89a3      	ldrh	r3, [r4, #12]
 8003c44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003c48:	81a3      	strh	r3, [r4, #12]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	6063      	str	r3, [r4, #4]
 8003c4e:	6923      	ldr	r3, [r4, #16]
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	89a3      	ldrh	r3, [r4, #12]
 8003c54:	f043 0308 	orr.w	r3, r3, #8
 8003c58:	81a3      	strh	r3, [r4, #12]
 8003c5a:	6923      	ldr	r3, [r4, #16]
 8003c5c:	b94b      	cbnz	r3, 8003c72 <__swsetup_r+0x7a>
 8003c5e:	89a3      	ldrh	r3, [r4, #12]
 8003c60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c68:	d003      	beq.n	8003c72 <__swsetup_r+0x7a>
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	f000 f883 	bl	8003d78 <__smakebuf_r>
 8003c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c76:	f013 0201 	ands.w	r2, r3, #1
 8003c7a:	d00a      	beq.n	8003c92 <__swsetup_r+0x9a>
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	60a2      	str	r2, [r4, #8]
 8003c80:	6962      	ldr	r2, [r4, #20]
 8003c82:	4252      	negs	r2, r2
 8003c84:	61a2      	str	r2, [r4, #24]
 8003c86:	6922      	ldr	r2, [r4, #16]
 8003c88:	b942      	cbnz	r2, 8003c9c <__swsetup_r+0xa4>
 8003c8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003c8e:	d1c5      	bne.n	8003c1c <__swsetup_r+0x24>
 8003c90:	bd38      	pop	{r3, r4, r5, pc}
 8003c92:	0799      	lsls	r1, r3, #30
 8003c94:	bf58      	it	pl
 8003c96:	6962      	ldrpl	r2, [r4, #20]
 8003c98:	60a2      	str	r2, [r4, #8]
 8003c9a:	e7f4      	b.n	8003c86 <__swsetup_r+0x8e>
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	e7f7      	b.n	8003c90 <__swsetup_r+0x98>
 8003ca0:	20000018 	.word	0x20000018

08003ca4 <_raise_r>:
 8003ca4:	291f      	cmp	r1, #31
 8003ca6:	b538      	push	{r3, r4, r5, lr}
 8003ca8:	4605      	mov	r5, r0
 8003caa:	460c      	mov	r4, r1
 8003cac:	d904      	bls.n	8003cb8 <_raise_r+0x14>
 8003cae:	2316      	movs	r3, #22
 8003cb0:	6003      	str	r3, [r0, #0]
 8003cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb6:	bd38      	pop	{r3, r4, r5, pc}
 8003cb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003cba:	b112      	cbz	r2, 8003cc2 <_raise_r+0x1e>
 8003cbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003cc0:	b94b      	cbnz	r3, 8003cd6 <_raise_r+0x32>
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	f000 f830 	bl	8003d28 <_getpid_r>
 8003cc8:	4622      	mov	r2, r4
 8003cca:	4601      	mov	r1, r0
 8003ccc:	4628      	mov	r0, r5
 8003cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cd2:	f000 b817 	b.w	8003d04 <_kill_r>
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d00a      	beq.n	8003cf0 <_raise_r+0x4c>
 8003cda:	1c59      	adds	r1, r3, #1
 8003cdc:	d103      	bne.n	8003ce6 <_raise_r+0x42>
 8003cde:	2316      	movs	r3, #22
 8003ce0:	6003      	str	r3, [r0, #0]
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	e7e7      	b.n	8003cb6 <_raise_r+0x12>
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003cec:	4620      	mov	r0, r4
 8003cee:	4798      	blx	r3
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	e7e0      	b.n	8003cb6 <_raise_r+0x12>

08003cf4 <raise>:
 8003cf4:	4b02      	ldr	r3, [pc, #8]	@ (8003d00 <raise+0xc>)
 8003cf6:	4601      	mov	r1, r0
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	f7ff bfd3 	b.w	8003ca4 <_raise_r>
 8003cfe:	bf00      	nop
 8003d00:	20000018 	.word	0x20000018

08003d04 <_kill_r>:
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	4d07      	ldr	r5, [pc, #28]	@ (8003d24 <_kill_r+0x20>)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	4611      	mov	r1, r2
 8003d10:	602b      	str	r3, [r5, #0]
 8003d12:	f7fd f898 	bl	8000e46 <_kill>
 8003d16:	1c43      	adds	r3, r0, #1
 8003d18:	d102      	bne.n	8003d20 <_kill_r+0x1c>
 8003d1a:	682b      	ldr	r3, [r5, #0]
 8003d1c:	b103      	cbz	r3, 8003d20 <_kill_r+0x1c>
 8003d1e:	6023      	str	r3, [r4, #0]
 8003d20:	bd38      	pop	{r3, r4, r5, pc}
 8003d22:	bf00      	nop
 8003d24:	20000460 	.word	0x20000460

08003d28 <_getpid_r>:
 8003d28:	f7fd b885 	b.w	8000e36 <_getpid>

08003d2c <__swhatbuf_r>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	460c      	mov	r4, r1
 8003d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d34:	2900      	cmp	r1, #0
 8003d36:	b096      	sub	sp, #88	@ 0x58
 8003d38:	4615      	mov	r5, r2
 8003d3a:	461e      	mov	r6, r3
 8003d3c:	da0d      	bge.n	8003d5a <__swhatbuf_r+0x2e>
 8003d3e:	89a3      	ldrh	r3, [r4, #12]
 8003d40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d44:	f04f 0100 	mov.w	r1, #0
 8003d48:	bf14      	ite	ne
 8003d4a:	2340      	movne	r3, #64	@ 0x40
 8003d4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d50:	2000      	movs	r0, #0
 8003d52:	6031      	str	r1, [r6, #0]
 8003d54:	602b      	str	r3, [r5, #0]
 8003d56:	b016      	add	sp, #88	@ 0x58
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
 8003d5a:	466a      	mov	r2, sp
 8003d5c:	f000 f848 	bl	8003df0 <_fstat_r>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	dbec      	blt.n	8003d3e <__swhatbuf_r+0x12>
 8003d64:	9901      	ldr	r1, [sp, #4]
 8003d66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003d6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003d6e:	4259      	negs	r1, r3
 8003d70:	4159      	adcs	r1, r3
 8003d72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d76:	e7eb      	b.n	8003d50 <__swhatbuf_r+0x24>

08003d78 <__smakebuf_r>:
 8003d78:	898b      	ldrh	r3, [r1, #12]
 8003d7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d7c:	079d      	lsls	r5, r3, #30
 8003d7e:	4606      	mov	r6, r0
 8003d80:	460c      	mov	r4, r1
 8003d82:	d507      	bpl.n	8003d94 <__smakebuf_r+0x1c>
 8003d84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d88:	6023      	str	r3, [r4, #0]
 8003d8a:	6123      	str	r3, [r4, #16]
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	6163      	str	r3, [r4, #20]
 8003d90:	b003      	add	sp, #12
 8003d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d94:	ab01      	add	r3, sp, #4
 8003d96:	466a      	mov	r2, sp
 8003d98:	f7ff ffc8 	bl	8003d2c <__swhatbuf_r>
 8003d9c:	9f00      	ldr	r7, [sp, #0]
 8003d9e:	4605      	mov	r5, r0
 8003da0:	4639      	mov	r1, r7
 8003da2:	4630      	mov	r0, r6
 8003da4:	f7ff fabc 	bl	8003320 <_malloc_r>
 8003da8:	b948      	cbnz	r0, 8003dbe <__smakebuf_r+0x46>
 8003daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dae:	059a      	lsls	r2, r3, #22
 8003db0:	d4ee      	bmi.n	8003d90 <__smakebuf_r+0x18>
 8003db2:	f023 0303 	bic.w	r3, r3, #3
 8003db6:	f043 0302 	orr.w	r3, r3, #2
 8003dba:	81a3      	strh	r3, [r4, #12]
 8003dbc:	e7e2      	b.n	8003d84 <__smakebuf_r+0xc>
 8003dbe:	89a3      	ldrh	r3, [r4, #12]
 8003dc0:	6020      	str	r0, [r4, #0]
 8003dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dc6:	81a3      	strh	r3, [r4, #12]
 8003dc8:	9b01      	ldr	r3, [sp, #4]
 8003dca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003dce:	b15b      	cbz	r3, 8003de8 <__smakebuf_r+0x70>
 8003dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	f000 f81d 	bl	8003e14 <_isatty_r>
 8003dda:	b128      	cbz	r0, 8003de8 <__smakebuf_r+0x70>
 8003ddc:	89a3      	ldrh	r3, [r4, #12]
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	81a3      	strh	r3, [r4, #12]
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	431d      	orrs	r5, r3
 8003dec:	81a5      	strh	r5, [r4, #12]
 8003dee:	e7cf      	b.n	8003d90 <__smakebuf_r+0x18>

08003df0 <_fstat_r>:
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	4d07      	ldr	r5, [pc, #28]	@ (8003e10 <_fstat_r+0x20>)
 8003df4:	2300      	movs	r3, #0
 8003df6:	4604      	mov	r4, r0
 8003df8:	4608      	mov	r0, r1
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	602b      	str	r3, [r5, #0]
 8003dfe:	f7fd f882 	bl	8000f06 <_fstat>
 8003e02:	1c43      	adds	r3, r0, #1
 8003e04:	d102      	bne.n	8003e0c <_fstat_r+0x1c>
 8003e06:	682b      	ldr	r3, [r5, #0]
 8003e08:	b103      	cbz	r3, 8003e0c <_fstat_r+0x1c>
 8003e0a:	6023      	str	r3, [r4, #0]
 8003e0c:	bd38      	pop	{r3, r4, r5, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000460 	.word	0x20000460

08003e14 <_isatty_r>:
 8003e14:	b538      	push	{r3, r4, r5, lr}
 8003e16:	4d06      	ldr	r5, [pc, #24]	@ (8003e30 <_isatty_r+0x1c>)
 8003e18:	2300      	movs	r3, #0
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	4608      	mov	r0, r1
 8003e1e:	602b      	str	r3, [r5, #0]
 8003e20:	f7fd f881 	bl	8000f26 <_isatty>
 8003e24:	1c43      	adds	r3, r0, #1
 8003e26:	d102      	bne.n	8003e2e <_isatty_r+0x1a>
 8003e28:	682b      	ldr	r3, [r5, #0]
 8003e2a:	b103      	cbz	r3, 8003e2e <_isatty_r+0x1a>
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	bd38      	pop	{r3, r4, r5, pc}
 8003e30:	20000460 	.word	0x20000460

08003e34 <_init>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	bf00      	nop
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr

08003e40 <_fini>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	bf00      	nop
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr
